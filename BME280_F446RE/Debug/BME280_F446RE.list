
BME280_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080072a0  080072a0  000172a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007514  08007514  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800751c  0800751c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800751c  0800751c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000070  08007594  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08007594  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b9c4  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c61  00000000  00000000  0002baa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002d708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000813  00000000  00000000  0002e160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222d2  00000000  00000000  0002e973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3b3  00000000  00000000  00050c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5b2  00000000  00000000  0005eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ae4  00000000  00000000  0012b5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0012f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007288 	.word	0x08007288

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007288 	.word	0x08007288

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_ldivmod>:
 8000c4c:	b97b      	cbnz	r3, 8000c6e <__aeabi_ldivmod+0x22>
 8000c4e:	b972      	cbnz	r2, 8000c6e <__aeabi_ldivmod+0x22>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bfbe      	ittt	lt
 8000c54:	2000      	movlt	r0, #0
 8000c56:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c5a:	e006      	blt.n	8000c6a <__aeabi_ldivmod+0x1e>
 8000c5c:	bf08      	it	eq
 8000c5e:	2800      	cmpeq	r0, #0
 8000c60:	bf1c      	itt	ne
 8000c62:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c66:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6a:	f000 b9bb 	b.w	8000fe4 <__aeabi_idiv0>
 8000c6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c76:	2900      	cmp	r1, #0
 8000c78:	db09      	blt.n	8000c8e <__aeabi_ldivmod+0x42>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db1a      	blt.n	8000cb4 <__aeabi_ldivmod+0x68>
 8000c7e:	f000 f84d 	bl	8000d1c <__udivmoddi4>
 8000c82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8a:	b004      	add	sp, #16
 8000c8c:	4770      	bx	lr
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db1b      	blt.n	8000cd0 <__aeabi_ldivmod+0x84>
 8000c98:	f000 f840 	bl	8000d1c <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	4770      	bx	lr
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	f000 f82f 	bl	8000d1c <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4240      	negs	r0, r0
 8000cca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f821 	bl	8000d1c <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	4770      	bx	lr

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b970 	b.w	8000fe4 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9e08      	ldr	r6, [sp, #32]
 8000d22:	460d      	mov	r5, r1
 8000d24:	4604      	mov	r4, r0
 8000d26:	460f      	mov	r7, r1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d14a      	bne.n	8000dc2 <__udivmoddi4+0xa6>
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	4694      	mov	ip, r2
 8000d30:	d965      	bls.n	8000dfe <__udivmoddi4+0xe2>
 8000d32:	fab2 f382 	clz	r3, r2
 8000d36:	b143      	cbz	r3, 8000d4a <__udivmoddi4+0x2e>
 8000d38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d3c:	f1c3 0220 	rsb	r2, r3, #32
 8000d40:	409f      	lsls	r7, r3
 8000d42:	fa20 f202 	lsr.w	r2, r0, r2
 8000d46:	4317      	orrs	r7, r2
 8000d48:	409c      	lsls	r4, r3
 8000d4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4e:	fa1f f58c 	uxth.w	r5, ip
 8000d52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d56:	0c22      	lsrs	r2, r4, #16
 8000d58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d60:	fb01 f005 	mul.w	r0, r1, r5
 8000d64:	4290      	cmp	r0, r2
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x62>
 8000d68:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d70:	f080 811c 	bcs.w	8000fac <__udivmoddi4+0x290>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f240 8119 	bls.w	8000fac <__udivmoddi4+0x290>
 8000d7a:	3902      	subs	r1, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a12      	subs	r2, r2, r0
 8000d80:	b2a4      	uxth	r4, r4
 8000d82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8e:	fb00 f505 	mul.w	r5, r0, r5
 8000d92:	42a5      	cmp	r5, r4
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x90>
 8000d96:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9e:	f080 8107 	bcs.w	8000fb0 <__udivmoddi4+0x294>
 8000da2:	42a5      	cmp	r5, r4
 8000da4:	f240 8104 	bls.w	8000fb0 <__udivmoddi4+0x294>
 8000da8:	4464      	add	r4, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db0:	1b64      	subs	r4, r4, r5
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11e      	cbz	r6, 8000dbe <__udivmoddi4+0xa2>
 8000db6:	40dc      	lsrs	r4, r3
 8000db8:	2300      	movs	r3, #0
 8000dba:	e9c6 4300 	strd	r4, r3, [r6]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0xbc>
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	f000 80ed 	beq.w	8000fa6 <__udivmoddi4+0x28a>
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e9c6 0500 	strd	r0, r5, [r6]
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	fab3 f183 	clz	r1, r3
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	d149      	bne.n	8000e74 <__udivmoddi4+0x158>
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	d302      	bcc.n	8000dea <__udivmoddi4+0xce>
 8000de4:	4282      	cmp	r2, r0
 8000de6:	f200 80f8 	bhi.w	8000fda <__udivmoddi4+0x2be>
 8000dea:	1a84      	subs	r4, r0, r2
 8000dec:	eb65 0203 	sbc.w	r2, r5, r3
 8000df0:	2001      	movs	r0, #1
 8000df2:	4617      	mov	r7, r2
 8000df4:	2e00      	cmp	r6, #0
 8000df6:	d0e2      	beq.n	8000dbe <__udivmoddi4+0xa2>
 8000df8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dfc:	e7df      	b.n	8000dbe <__udivmoddi4+0xa2>
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xe6>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f382 	clz	r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x210>
 8000e0c:	1a8a      	subs	r2, r1, r2
 8000e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	2101      	movs	r1, #1
 8000e18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000e20:	0c22      	lsrs	r2, r4, #16
 8000e22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e26:	fb0e f005 	mul.w	r0, lr, r5
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x124>
 8000e2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000e32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x122>
 8000e38:	4290      	cmp	r0, r2
 8000e3a:	f200 80cb 	bhi.w	8000fd4 <__udivmoddi4+0x2b8>
 8000e3e:	4645      	mov	r5, r8
 8000e40:	1a12      	subs	r2, r2, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e48:	fb07 2210 	mls	r2, r7, r0, r2
 8000e4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e50:	fb0e fe00 	mul.w	lr, lr, r0
 8000e54:	45a6      	cmp	lr, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x14e>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x14c>
 8000e62:	45a6      	cmp	lr, r4
 8000e64:	f200 80bb 	bhi.w	8000fde <__udivmoddi4+0x2c2>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e72:	e79f      	b.n	8000db4 <__udivmoddi4+0x98>
 8000e74:	f1c1 0720 	rsb	r7, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e82:	fa05 f401 	lsl.w	r4, r5, r1
 8000e86:	fa20 f307 	lsr.w	r3, r0, r7
 8000e8a:	40fd      	lsrs	r5, r7
 8000e8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e90:	4323      	orrs	r3, r4
 8000e92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e96:	fa1f fe8c 	uxth.w	lr, ip
 8000e9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e9e:	0c1c      	lsrs	r4, r3, #16
 8000ea0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ea4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea8:	42a5      	cmp	r5, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	fa00 f001 	lsl.w	r0, r0, r1
 8000eb2:	d90b      	bls.n	8000ecc <__udivmoddi4+0x1b0>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ebc:	f080 8088 	bcs.w	8000fd0 <__udivmoddi4+0x2b4>
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	f240 8085 	bls.w	8000fd0 <__udivmoddi4+0x2b4>
 8000ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eca:	4464      	add	r4, ip
 8000ecc:	1b64      	subs	r4, r4, r5
 8000ece:	b29d      	uxth	r5, r3
 8000ed0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000edc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee0:	45a6      	cmp	lr, r4
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1da>
 8000ee4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eec:	d26c      	bcs.n	8000fc8 <__udivmoddi4+0x2ac>
 8000eee:	45a6      	cmp	lr, r4
 8000ef0:	d96a      	bls.n	8000fc8 <__udivmoddi4+0x2ac>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	4464      	add	r4, ip
 8000ef6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000efa:	fba3 9502 	umull	r9, r5, r3, r2
 8000efe:	eba4 040e 	sub.w	r4, r4, lr
 8000f02:	42ac      	cmp	r4, r5
 8000f04:	46c8      	mov	r8, r9
 8000f06:	46ae      	mov	lr, r5
 8000f08:	d356      	bcc.n	8000fb8 <__udivmoddi4+0x29c>
 8000f0a:	d053      	beq.n	8000fb4 <__udivmoddi4+0x298>
 8000f0c:	b156      	cbz	r6, 8000f24 <__udivmoddi4+0x208>
 8000f0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000f12:	eb64 040e 	sbc.w	r4, r4, lr
 8000f16:	fa04 f707 	lsl.w	r7, r4, r7
 8000f1a:	40ca      	lsrs	r2, r1
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	4317      	orrs	r7, r2
 8000f20:	e9c6 7400 	strd	r7, r4, [r6]
 8000f24:	4618      	mov	r0, r3
 8000f26:	2100      	movs	r1, #0
 8000f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2c:	f1c3 0120 	rsb	r1, r3, #32
 8000f30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f34:	fa20 f201 	lsr.w	r2, r0, r1
 8000f38:	fa25 f101 	lsr.w	r1, r5, r1
 8000f3c:	409d      	lsls	r5, r3
 8000f3e:	432a      	orrs	r2, r5
 8000f40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000f50:	0c11      	lsrs	r1, r2, #16
 8000f52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f56:	fb00 f50e 	mul.w	r5, r0, lr
 8000f5a:	428d      	cmp	r5, r1
 8000f5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x258>
 8000f62:	eb1c 0101 	adds.w	r1, ip, r1
 8000f66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6a:	d22f      	bcs.n	8000fcc <__udivmoddi4+0x2b0>
 8000f6c:	428d      	cmp	r5, r1
 8000f6e:	d92d      	bls.n	8000fcc <__udivmoddi4+0x2b0>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4461      	add	r1, ip
 8000f74:	1b49      	subs	r1, r1, r5
 8000f76:	b292      	uxth	r2, r2
 8000f78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	fb05 f10e 	mul.w	r1, r5, lr
 8000f88:	4291      	cmp	r1, r2
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x282>
 8000f8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f94:	d216      	bcs.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f96:	4291      	cmp	r1, r2
 8000f98:	d914      	bls.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f9a:	3d02      	subs	r5, #2
 8000f9c:	4462      	add	r2, ip
 8000f9e:	1a52      	subs	r2, r2, r1
 8000fa0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fa4:	e738      	b.n	8000e18 <__udivmoddi4+0xfc>
 8000fa6:	4631      	mov	r1, r6
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e708      	b.n	8000dbe <__udivmoddi4+0xa2>
 8000fac:	4639      	mov	r1, r7
 8000fae:	e6e6      	b.n	8000d7e <__udivmoddi4+0x62>
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	e6fb      	b.n	8000dac <__udivmoddi4+0x90>
 8000fb4:	4548      	cmp	r0, r9
 8000fb6:	d2a9      	bcs.n	8000f0c <__udivmoddi4+0x1f0>
 8000fb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	e7a3      	b.n	8000f0c <__udivmoddi4+0x1f0>
 8000fc4:	4645      	mov	r5, r8
 8000fc6:	e7ea      	b.n	8000f9e <__udivmoddi4+0x282>
 8000fc8:	462b      	mov	r3, r5
 8000fca:	e794      	b.n	8000ef6 <__udivmoddi4+0x1da>
 8000fcc:	4640      	mov	r0, r8
 8000fce:	e7d1      	b.n	8000f74 <__udivmoddi4+0x258>
 8000fd0:	46d0      	mov	r8, sl
 8000fd2:	e77b      	b.n	8000ecc <__udivmoddi4+0x1b0>
 8000fd4:	3d02      	subs	r5, #2
 8000fd6:	4462      	add	r2, ip
 8000fd8:	e732      	b.n	8000e40 <__udivmoddi4+0x124>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e70a      	b.n	8000df4 <__udivmoddi4+0xd8>
 8000fde:	4464      	add	r4, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e742      	b.n	8000e6a <__udivmoddi4+0x14e>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2319      	movs	r3, #25
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2288      	movs	r2, #136	; 0x88
 8001000:	21ec      	movs	r1, #236	; 0xec
 8001002:	4857      	ldr	r0, [pc, #348]	; (8001160 <TrimRead+0x178>)
 8001004:	f001 fecc 	bl	8002da0 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001008:	463b      	mov	r3, r7
 800100a:	3319      	adds	r3, #25
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	9202      	str	r2, [sp, #8]
 8001012:	2207      	movs	r2, #7
 8001014:	9201      	str	r2, [sp, #4]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	22e1      	movs	r2, #225	; 0xe1
 800101c:	21ec      	movs	r1, #236	; 0xec
 800101e:	4850      	ldr	r0, [pc, #320]	; (8001160 <TrimRead+0x178>)
 8001020:	f001 febe 	bl	8002da0 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	783b      	ldrb	r3, [r7, #0]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <TrimRead+0x17c>)
 8001036:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	78bb      	ldrb	r3, [r7, #2]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b48      	ldr	r3, [pc, #288]	; (8001168 <TrimRead+0x180>)
 8001048:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800104a:	797b      	ldrb	r3, [r7, #5]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	793b      	ldrb	r3, [r7, #4]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b44      	ldr	r3, [pc, #272]	; (800116c <TrimRead+0x184>)
 800105a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b40      	ldr	r3, [pc, #256]	; (8001170 <TrimRead+0x188>)
 800106e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001070:	7a7b      	ldrb	r3, [r7, #9]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <TrimRead+0x18c>)
 8001080:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7abb      	ldrb	r3, [r7, #10]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <TrimRead+0x190>)
 8001092:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <TrimRead+0x194>)
 80010a4:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <TrimRead+0x198>)
 80010b6:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010b8:	7c7b      	ldrb	r3, [r7, #17]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7c3b      	ldrb	r3, [r7, #16]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <TrimRead+0x19c>)
 80010c8:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010ca:	7cfb      	ldrb	r3, [r7, #19]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7cbb      	ldrb	r3, [r7, #18]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <TrimRead+0x1a0>)
 80010da:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010dc:	7d7b      	ldrb	r3, [r7, #21]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7d3b      	ldrb	r3, [r7, #20]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <TrimRead+0x1a4>)
 80010ec:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	7dbb      	ldrb	r3, [r7, #22]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <TrimRead+0x1a8>)
 80010fe:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001100:	7e3b      	ldrb	r3, [r7, #24]
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <TrimRead+0x1ac>)
 8001106:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001108:	7ebb      	ldrb	r3, [r7, #26]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21a      	sxth	r2, r3
 800110e:	7e7b      	ldrb	r3, [r7, #25]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21a      	sxth	r2, r3
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <TrimRead+0x1b0>)
 8001118:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800111a:	7efb      	ldrb	r3, [r7, #27]
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <TrimRead+0x1b4>)
 8001120:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001122:	7f3b      	ldrb	r3, [r7, #28]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	b21a      	sxth	r2, r3
 8001128:	7f7b      	ldrb	r3, [r7, #29]
 800112a:	b21b      	sxth	r3, r3
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <TrimRead+0x1b8>)
 8001138:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800113a:	7fbb      	ldrb	r3, [r7, #30]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	b21a      	sxth	r2, r3
 8001140:	7f7b      	ldrb	r3, [r7, #29]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	b2db      	uxtb	r3, r3
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21a      	sxth	r2, r3
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <TrimRead+0x1bc>)
 800114e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <TrimRead+0x1c0>)
 8001156:	801a      	strh	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200000c4 	.word	0x200000c4
 8001164:	2000009c 	.word	0x2000009c
 8001168:	200000a4 	.word	0x200000a4
 800116c:	200000a6 	.word	0x200000a6
 8001170:	2000009e 	.word	0x2000009e
 8001174:	200000a8 	.word	0x200000a8
 8001178:	200000aa 	.word	0x200000aa
 800117c:	200000ac 	.word	0x200000ac
 8001180:	200000ae 	.word	0x200000ae
 8001184:	200000b0 	.word	0x200000b0
 8001188:	200000b2 	.word	0x200000b2
 800118c:	200000b4 	.word	0x200000b4
 8001190:	200000b6 	.word	0x200000b6
 8001194:	200000a0 	.word	0x200000a0
 8001198:	200000b8 	.word	0x200000b8
 800119c:	200000a2 	.word	0x200000a2
 80011a0:	200000ba 	.word	0x200000ba
 80011a4:	200000bc 	.word	0x200000bc
 80011a8:	200000be 	.word	0x200000be

080011ac <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af04      	add	r7, sp, #16
 80011b2:	4604      	mov	r4, r0
 80011b4:	4608      	mov	r0, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4623      	mov	r3, r4
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	4603      	mov	r3, r0
 80011c0:	71bb      	strb	r3, [r7, #6]
 80011c2:	460b      	mov	r3, r1
 80011c4:	717b      	strb	r3, [r7, #5]
 80011c6:	4613      	mov	r3, r2
 80011c8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011ca:	f7ff ff0d 	bl	8000fe8 <TrimRead>


	uint8_t datatowrite = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;
 80011d6:	23b6      	movs	r3, #182	; 0xb6
 80011d8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2120      	movs	r1, #32
 80011de:	485f      	ldr	r0, [pc, #380]	; (800135c <BME280_Config+0x1b0>)
 80011e0:	f001 fb6c 	bl	80028bc <HAL_GPIO_WritePin>
	// reset sequence
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f107 030f 	add.w	r3, r7, #15
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	22e0      	movs	r2, #224	; 0xe0
 80011f8:	21ec      	movs	r1, #236	; 0xec
 80011fa:	4859      	ldr	r0, [pc, #356]	; (8001360 <BME280_Config+0x1b4>)
 80011fc:	f001 fcd6 	bl	8002bac <HAL_I2C_Mem_Write>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <BME280_Config+0x60>
	{
		return -1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e0a3      	b.n	8001354 <BME280_Config+0x1a8>
	}

	HAL_Delay (100);
 800120c:	2064      	movs	r0, #100	; 0x64
 800120e:	f001 f8b7 	bl	8002380 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001212:	797b      	ldrb	r3, [r7, #5]
 8001214:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	f107 030f 	add.w	r3, r7, #15
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	22f2      	movs	r2, #242	; 0xf2
 800122a:	21ec      	movs	r1, #236	; 0xec
 800122c:	484c      	ldr	r0, [pc, #304]	; (8001360 <BME280_Config+0x1b4>)
 800122e:	f001 fcbd 	bl	8002bac <HAL_I2C_Mem_Write>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <BME280_Config+0x92>
	{
		return -1;
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	e08a      	b.n	8001354 <BME280_Config+0x1a8>
	}
	HAL_Delay (100);
 800123e:	2064      	movs	r0, #100	; 0x64
 8001240:	f001 f89e 	bl	8002380 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	f107 030e 	add.w	r3, r7, #14
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	22f2      	movs	r2, #242	; 0xf2
 8001258:	21ec      	movs	r1, #236	; 0xec
 800125a:	4841      	ldr	r0, [pc, #260]	; (8001360 <BME280_Config+0x1b4>)
 800125c:	f001 fda0 	bl	8002da0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001260:	7bba      	ldrb	r2, [r7, #14]
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	429a      	cmp	r2, r3
 8001266:	d002      	beq.n	800126e <BME280_Config+0xc2>
	{
		return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e072      	b.n	8001354 <BME280_Config+0x1a8>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800126e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001272:	015b      	lsls	r3, r3, #5
 8001274:	b25a      	sxtb	r2, r3
 8001276:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	b25b      	sxtb	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b25b      	sxtb	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	f107 030f 	add.w	r3, r7, #15
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	22f5      	movs	r2, #245	; 0xf5
 800129a:	21ec      	movs	r1, #236	; 0xec
 800129c:	4830      	ldr	r0, [pc, #192]	; (8001360 <BME280_Config+0x1b4>)
 800129e:	f001 fc85 	bl	8002bac <HAL_I2C_Mem_Write>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <BME280_Config+0x102>
	{
		return -1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	e052      	b.n	8001354 <BME280_Config+0x1a8>
	}
	HAL_Delay (100);
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f001 f866 	bl	8002380 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80012b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2301      	movs	r3, #1
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f107 030e 	add.w	r3, r7, #14
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	22f5      	movs	r2, #245	; 0xf5
 80012c8:	21ec      	movs	r1, #236	; 0xec
 80012ca:	4825      	ldr	r0, [pc, #148]	; (8001360 <BME280_Config+0x1b4>)
 80012cc:	f001 fd68 	bl	8002da0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012d0:	7bba      	ldrb	r2, [r7, #14]
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d002      	beq.n	80012de <BME280_Config+0x132>
	{
		return -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	e03a      	b.n	8001354 <BME280_Config+0x1a8>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	015b      	lsls	r3, r3, #5
 80012e2:	b25a      	sxtb	r2, r3
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22f4      	movs	r2, #244	; 0xf4
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <BME280_Config+0x1b4>)
 8001312:	f001 fc4b 	bl	8002bac <HAL_I2C_Mem_Write>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <BME280_Config+0x176>
	{
		return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e018      	b.n	8001354 <BME280_Config+0x1a8>
	}
	HAL_Delay (100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f001 f82c 	bl	8002380 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 030e 	add.w	r3, r7, #14
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	22f4      	movs	r2, #244	; 0xf4
 800133c:	21ec      	movs	r1, #236	; 0xec
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <BME280_Config+0x1b4>)
 8001340:	f001 fd2e 	bl	8002da0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001344:	7bba      	ldrb	r2, [r7, #14]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	429a      	cmp	r2, r3
 800134a:	d002      	beq.n	8001352 <BME280_Config+0x1a6>
	{
		return -1;
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	e000      	b.n	8001354 <BME280_Config+0x1a8>
	}

	return 0;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	40020000 	.word	0x40020000
 8001360:	200000c4 	.word	0x200000c4

08001364 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <BMEReadRaw+0x8c>)
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	22d0      	movs	r2, #208	; 0xd0
 800137c:	21ec      	movs	r1, #236	; 0xec
 800137e:	481d      	ldr	r0, [pc, #116]	; (80013f4 <BMEReadRaw+0x90>)
 8001380:	f001 fd0e 	bl	8002da0 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <BMEReadRaw+0x8c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b60      	cmp	r3, #96	; 0x60
 800138a:	d12a      	bne.n	80013e2 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2308      	movs	r3, #8
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	463b      	mov	r3, r7
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2301      	movs	r3, #1
 800139c:	22f7      	movs	r2, #247	; 0xf7
 800139e:	21ec      	movs	r1, #236	; 0xec
 80013a0:	4814      	ldr	r0, [pc, #80]	; (80013f4 <BMEReadRaw+0x90>)
 80013a2:	f001 fcfd 	bl	8002da0 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80013a6:	783b      	ldrb	r3, [r7, #0]
 80013a8:	031a      	lsls	r2, r3, #12
 80013aa:	787b      	ldrb	r3, [r7, #1]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4313      	orrs	r3, r2
 80013b0:	78ba      	ldrb	r2, [r7, #2]
 80013b2:	0912      	lsrs	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	4313      	orrs	r3, r2
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <BMEReadRaw+0x94>)
 80013ba:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	031a      	lsls	r2, r3, #12
 80013c0:	793b      	ldrb	r3, [r7, #4]
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	4313      	orrs	r3, r2
 80013c6:	797a      	ldrb	r2, [r7, #5]
 80013c8:	0912      	lsrs	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	4313      	orrs	r3, r2
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <BMEReadRaw+0x98>)
 80013d0:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	4313      	orrs	r3, r2
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <BMEReadRaw+0x9c>)
 80013dc:	6013      	str	r3, [r2, #0]

		return 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	e001      	b.n	80013e6 <BMEReadRaw+0x82>
	}

	else return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000008c 	.word	0x2000008c
 80013f4:	200000c4 	.word	0x200000c4
 80013f8:	20000094 	.word	0x20000094
 80013fc:	20000090 	.word	0x20000090
 8001400:	20000098 	.word	0x20000098

08001404 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	10da      	asrs	r2, r3, #3
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <BME280_compensate_T_int32+0x74>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	4a18      	ldr	r2, [pc, #96]	; (800147c <BME280_compensate_T_int32+0x78>)
 800141a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	12db      	asrs	r3, r3, #11
 8001424:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	111b      	asrs	r3, r3, #4
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <BME280_compensate_T_int32+0x74>)
 800142c:	8812      	ldrh	r2, [r2, #0]
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	1112      	asrs	r2, r2, #4
 8001434:	4910      	ldr	r1, [pc, #64]	; (8001478 <BME280_compensate_T_int32+0x74>)
 8001436:	8809      	ldrh	r1, [r1, #0]
 8001438:	1a52      	subs	r2, r2, r1
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	131b      	asrs	r3, r3, #12
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <BME280_compensate_T_int32+0x7c>)
 8001442:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	139b      	asrs	r3, r3, #14
 800144c:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4413      	add	r3, r2
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <BME280_compensate_T_int32+0x80>)
 8001456:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <BME280_compensate_T_int32+0x80>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3380      	adds	r3, #128	; 0x80
 8001464:	121b      	asrs	r3, r3, #8
 8001466:	60fb      	str	r3, [r7, #12]
	return T;
 8001468:	68fb      	ldr	r3, [r7, #12]
}
 800146a:	4618      	mov	r0, r3
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000009c 	.word	0x2000009c
 800147c:	200000a4 	.word	0x200000a4
 8001480:	200000a6 	.word	0x200000a6
 8001484:	200000c0 	.word	0x200000c0

08001488 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800148c:	b0ca      	sub	sp, #296	; 0x128
 800148e:	af00      	add	r7, sp, #0
 8001490:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001494:	4baf      	ldr	r3, [pc, #700]	; (8001754 <BME280_compensate_P_int64+0x2cc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	17da      	asrs	r2, r3, #31
 800149a:	461c      	mov	r4, r3
 800149c:	4615      	mov	r5, r2
 800149e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80014a2:	f145 3bff 	adc.w	fp, r5, #4294967295
 80014a6:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80014aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014b2:	fb03 f102 	mul.w	r1, r3, r2
 80014b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	18ca      	adds	r2, r1, r3
 80014c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c8:	fba3 8903 	umull	r8, r9, r3, r3
 80014cc:	eb02 0309 	add.w	r3, r2, r9
 80014d0:	4699      	mov	r9, r3
 80014d2:	4ba1      	ldr	r3, [pc, #644]	; (8001758 <BME280_compensate_P_int64+0x2d0>)
 80014d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	17da      	asrs	r2, r3, #31
 80014dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014e4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014e8:	4603      	mov	r3, r0
 80014ea:	fb03 f209 	mul.w	r2, r3, r9
 80014ee:	460b      	mov	r3, r1
 80014f0:	fb08 f303 	mul.w	r3, r8, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	4602      	mov	r2, r0
 80014f8:	fba8 1202 	umull	r1, r2, r8, r2
 80014fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001500:	460a      	mov	r2, r1
 8001502:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001506:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800150a:	4413      	add	r3, r2
 800150c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001510:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001514:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001518:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800151c:	4b8f      	ldr	r3, [pc, #572]	; (800175c <BME280_compensate_P_int64+0x2d4>)
 800151e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001522:	b21b      	sxth	r3, r3
 8001524:	17da      	asrs	r2, r3, #31
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800152a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800152e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001532:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001536:	462a      	mov	r2, r5
 8001538:	fb02 f203 	mul.w	r2, r2, r3
 800153c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001540:	4621      	mov	r1, r4
 8001542:	fb01 f303 	mul.w	r3, r1, r3
 8001546:	441a      	add	r2, r3
 8001548:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800154c:	4621      	mov	r1, r4
 800154e:	fba3 1301 	umull	r1, r3, r3, r1
 8001552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001556:	460b      	mov	r3, r1
 8001558:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800155c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001560:	18d3      	adds	r3, r2, r3
 8001562:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001566:	f04f 0000 	mov.w	r0, #0
 800156a:	f04f 0100 	mov.w	r1, #0
 800156e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001572:	462b      	mov	r3, r5
 8001574:	0459      	lsls	r1, r3, #17
 8001576:	4623      	mov	r3, r4
 8001578:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800157c:	4623      	mov	r3, r4
 800157e:	0458      	lsls	r0, r3, #17
 8001580:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001584:	1814      	adds	r4, r2, r0
 8001586:	643c      	str	r4, [r7, #64]	; 0x40
 8001588:	414b      	adcs	r3, r1
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
 800158c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001590:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001594:	4b72      	ldr	r3, [pc, #456]	; (8001760 <BME280_compensate_P_int64+0x2d8>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	b21b      	sxth	r3, r3
 800159c:	17da      	asrs	r2, r3, #31
 800159e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015a2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015b2:	00d9      	lsls	r1, r3, #3
 80015b4:	2000      	movs	r0, #0
 80015b6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015ba:	1814      	adds	r4, r2, r0
 80015bc:	63bc      	str	r4, [r7, #56]	; 0x38
 80015be:	414b      	adcs	r3, r1
 80015c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015c6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d2:	fb03 f102 	mul.w	r1, r3, r2
 80015d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	18ca      	adds	r2, r1, r3
 80015e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e8:	fba3 1303 	umull	r1, r3, r3, r3
 80015ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015f0:	460b      	mov	r3, r1
 80015f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015fa:	18d3      	adds	r3, r2, r3
 80015fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001600:	4b58      	ldr	r3, [pc, #352]	; (8001764 <BME280_compensate_P_int64+0x2dc>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	b21b      	sxth	r3, r3
 8001608:	17da      	asrs	r2, r3, #31
 800160a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800160e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001612:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001616:	462b      	mov	r3, r5
 8001618:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800161c:	4642      	mov	r2, r8
 800161e:	fb02 f203 	mul.w	r2, r2, r3
 8001622:	464b      	mov	r3, r9
 8001624:	4621      	mov	r1, r4
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	4622      	mov	r2, r4
 800162e:	4641      	mov	r1, r8
 8001630:	fba2 1201 	umull	r1, r2, r2, r1
 8001634:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001638:	460a      	mov	r2, r1
 800163a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800163e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001642:	4413      	add	r3, r2
 8001644:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001654:	4623      	mov	r3, r4
 8001656:	0a18      	lsrs	r0, r3, #8
 8001658:	462b      	mov	r3, r5
 800165a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800165e:	462b      	mov	r3, r5
 8001660:	1219      	asrs	r1, r3, #8
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <BME280_compensate_P_int64+0x2e0>)
 8001664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001668:	b21b      	sxth	r3, r3
 800166a:	17da      	asrs	r2, r3, #31
 800166c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001670:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001674:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001678:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800167c:	464a      	mov	r2, r9
 800167e:	fb02 f203 	mul.w	r2, r2, r3
 8001682:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001686:	4644      	mov	r4, r8
 8001688:	fb04 f303 	mul.w	r3, r4, r3
 800168c:	441a      	add	r2, r3
 800168e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001692:	4644      	mov	r4, r8
 8001694:	fba3 4304 	umull	r4, r3, r3, r4
 8001698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800169c:	4623      	mov	r3, r4
 800169e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016a6:	18d3      	adds	r3, r2, r3
 80016a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016b8:	464c      	mov	r4, r9
 80016ba:	0323      	lsls	r3, r4, #12
 80016bc:	4644      	mov	r4, r8
 80016be:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016c2:	4644      	mov	r4, r8
 80016c4:	0322      	lsls	r2, r4, #12
 80016c6:	1884      	adds	r4, r0, r2
 80016c8:	633c      	str	r4, [r7, #48]	; 0x30
 80016ca:	eb41 0303 	adc.w	r3, r1, r3
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
 80016d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016d4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016d8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016dc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016e0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <BME280_compensate_P_int64+0x2e4>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	2200      	movs	r2, #0
 80016f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016f8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016fc:	462b      	mov	r3, r5
 80016fe:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001702:	4642      	mov	r2, r8
 8001704:	fb02 f203 	mul.w	r2, r2, r3
 8001708:	464b      	mov	r3, r9
 800170a:	4621      	mov	r1, r4
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	4413      	add	r3, r2
 8001712:	4622      	mov	r2, r4
 8001714:	4641      	mov	r1, r8
 8001716:	fba2 1201 	umull	r1, r2, r2, r1
 800171a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800171e:	460a      	mov	r2, r1
 8001720:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001724:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001728:	4413      	add	r3, r2
 800172a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800173a:	4629      	mov	r1, r5
 800173c:	104a      	asrs	r2, r1, #1
 800173e:	4629      	mov	r1, r5
 8001740:	17cb      	asrs	r3, r1, #31
 8001742:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 8001746:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800174a:	4313      	orrs	r3, r2
 800174c:	d110      	bne.n	8001770 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 800174e:	2300      	movs	r3, #0
 8001750:	e154      	b.n	80019fc <BME280_compensate_P_int64+0x574>
 8001752:	bf00      	nop
 8001754:	200000c0 	.word	0x200000c0
 8001758:	200000b0 	.word	0x200000b0
 800175c:	200000ae 	.word	0x200000ae
 8001760:	200000ac 	.word	0x200000ac
 8001764:	200000aa 	.word	0x200000aa
 8001768:	200000a8 	.word	0x200000a8
 800176c:	2000009e 	.word	0x2000009e
	}
	p = 1048576-adc_P;
 8001770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001774:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001778:	17da      	asrs	r2, r3, #31
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
 800177c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800177e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001782:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001786:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800178a:	105b      	asrs	r3, r3, #1
 800178c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001790:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001794:	07db      	lsls	r3, r3, #31
 8001796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800179a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800179e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017a2:	4621      	mov	r1, r4
 80017a4:	1a89      	subs	r1, r1, r2
 80017a6:	67b9      	str	r1, [r7, #120]	; 0x78
 80017a8:	4629      	mov	r1, r5
 80017aa:	eb61 0303 	sbc.w	r3, r1, r3
 80017ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017b0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017b4:	4622      	mov	r2, r4
 80017b6:	462b      	mov	r3, r5
 80017b8:	1891      	adds	r1, r2, r2
 80017ba:	6239      	str	r1, [r7, #32]
 80017bc:	415b      	adcs	r3, r3
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
 80017c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017c4:	4621      	mov	r1, r4
 80017c6:	1851      	adds	r1, r2, r1
 80017c8:	61b9      	str	r1, [r7, #24]
 80017ca:	4629      	mov	r1, r5
 80017cc:	414b      	adcs	r3, r1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017dc:	4649      	mov	r1, r9
 80017de:	018b      	lsls	r3, r1, #6
 80017e0:	4641      	mov	r1, r8
 80017e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e6:	4641      	mov	r1, r8
 80017e8:	018a      	lsls	r2, r1, #6
 80017ea:	4641      	mov	r1, r8
 80017ec:	1889      	adds	r1, r1, r2
 80017ee:	6139      	str	r1, [r7, #16]
 80017f0:	4649      	mov	r1, r9
 80017f2:	eb43 0101 	adc.w	r1, r3, r1
 80017f6:	6179      	str	r1, [r7, #20]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001804:	4649      	mov	r1, r9
 8001806:	008b      	lsls	r3, r1, #2
 8001808:	4641      	mov	r1, r8
 800180a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800180e:	4641      	mov	r1, r8
 8001810:	008a      	lsls	r2, r1, #2
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	4603      	mov	r3, r0
 8001818:	4622      	mov	r2, r4
 800181a:	189b      	adds	r3, r3, r2
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	460b      	mov	r3, r1
 8001820:	462a      	mov	r2, r5
 8001822:	eb42 0303 	adc.w	r3, r2, r3
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001834:	4649      	mov	r1, r9
 8001836:	008b      	lsls	r3, r1, #2
 8001838:	4641      	mov	r1, r8
 800183a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800183e:	4641      	mov	r1, r8
 8001840:	008a      	lsls	r2, r1, #2
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	4603      	mov	r3, r0
 8001848:	4622      	mov	r2, r4
 800184a:	189b      	adds	r3, r3, r2
 800184c:	673b      	str	r3, [r7, #112]	; 0x70
 800184e:	462b      	mov	r3, r5
 8001850:	460a      	mov	r2, r1
 8001852:	eb42 0303 	adc.w	r3, r2, r3
 8001856:	677b      	str	r3, [r7, #116]	; 0x74
 8001858:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800185c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001860:	f7ff f9f4 	bl	8000c4c <__aeabi_ldivmod>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800186c:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <BME280_compensate_P_int64+0x580>)
 800186e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001872:	b21b      	sxth	r3, r3
 8001874:	17da      	asrs	r2, r3, #31
 8001876:	66bb      	str	r3, [r7, #104]	; 0x68
 8001878:	66fa      	str	r2, [r7, #108]	; 0x6c
 800187a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	0b50      	lsrs	r0, r2, #13
 8001888:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800188c:	1359      	asrs	r1, r3, #13
 800188e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001892:	462b      	mov	r3, r5
 8001894:	fb00 f203 	mul.w	r2, r0, r3
 8001898:	4623      	mov	r3, r4
 800189a:	fb03 f301 	mul.w	r3, r3, r1
 800189e:	4413      	add	r3, r2
 80018a0:	4622      	mov	r2, r4
 80018a2:	fba2 1200 	umull	r1, r2, r2, r0
 80018a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018aa:	460a      	mov	r2, r1
 80018ac:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018b4:	4413      	add	r3, r2
 80018b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018ba:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	0b50      	lsrs	r0, r2, #13
 80018c8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018cc:	1359      	asrs	r1, r3, #13
 80018ce:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018d2:	462b      	mov	r3, r5
 80018d4:	fb00 f203 	mul.w	r2, r0, r3
 80018d8:	4623      	mov	r3, r4
 80018da:	fb03 f301 	mul.w	r3, r3, r1
 80018de:	4413      	add	r3, r2
 80018e0:	4622      	mov	r2, r4
 80018e2:	fba2 1200 	umull	r1, r2, r2, r0
 80018e6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018ea:	460a      	mov	r2, r1
 80018ec:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018f4:	4413      	add	r3, r2
 80018f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001906:	4621      	mov	r1, r4
 8001908:	0e4a      	lsrs	r2, r1, #25
 800190a:	4629      	mov	r1, r5
 800190c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001910:	4629      	mov	r1, r5
 8001912:	164b      	asrs	r3, r1, #25
 8001914:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001918:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <BME280_compensate_P_int64+0x584>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	b21b      	sxth	r3, r3
 8001920:	17da      	asrs	r2, r3, #31
 8001922:	663b      	str	r3, [r7, #96]	; 0x60
 8001924:	667a      	str	r2, [r7, #100]	; 0x64
 8001926:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800192a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800192e:	462a      	mov	r2, r5
 8001930:	fb02 f203 	mul.w	r2, r2, r3
 8001934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001938:	4621      	mov	r1, r4
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001944:	4621      	mov	r1, r4
 8001946:	fba2 1201 	umull	r1, r2, r2, r1
 800194a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800194e:	460a      	mov	r2, r1
 8001950:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001954:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001958:	4413      	add	r3, r2
 800195a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800196a:	4621      	mov	r1, r4
 800196c:	0cca      	lsrs	r2, r1, #19
 800196e:	4629      	mov	r1, r5
 8001970:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001974:	4629      	mov	r1, r5
 8001976:	14cb      	asrs	r3, r1, #19
 8001978:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800197c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001980:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001984:	1884      	adds	r4, r0, r2
 8001986:	65bc      	str	r4, [r7, #88]	; 0x58
 8001988:	eb41 0303 	adc.w	r3, r1, r3
 800198c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800198e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001992:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001996:	4621      	mov	r1, r4
 8001998:	1889      	adds	r1, r1, r2
 800199a:	6539      	str	r1, [r7, #80]	; 0x50
 800199c:	4629      	mov	r1, r5
 800199e:	eb43 0101 	adc.w	r1, r3, r1
 80019a2:	6579      	str	r1, [r7, #84]	; 0x54
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019b0:	4623      	mov	r3, r4
 80019b2:	0a18      	lsrs	r0, r3, #8
 80019b4:	462b      	mov	r3, r5
 80019b6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019ba:	462b      	mov	r3, r5
 80019bc:	1219      	asrs	r1, r3, #8
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <BME280_compensate_P_int64+0x588>)
 80019c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	17da      	asrs	r2, r3, #31
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80019ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80019d8:	464c      	mov	r4, r9
 80019da:	0123      	lsls	r3, r4, #4
 80019dc:	4644      	mov	r4, r8
 80019de:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019e2:	4644      	mov	r4, r8
 80019e4:	0122      	lsls	r2, r4, #4
 80019e6:	1884      	adds	r4, r0, r2
 80019e8:	603c      	str	r4, [r7, #0]
 80019ea:	eb41 0303 	adc.w	r3, r1, r3
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019f4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80019f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a02:	46bd      	mov	sp, r7
 8001a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a08:	200000b6 	.word	0x200000b6
 8001a0c:	200000b4 	.word	0x200000b4
 8001a10:	200000b2 	.word	0x200000b2

08001a14 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <bme280_compensate_H_int32+0xbc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a24:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	039a      	lsls	r2, r3, #14
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <bme280_compensate_H_int32+0xc0>)
 8001a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a30:	051b      	lsls	r3, r3, #20
 8001a32:	1ad2      	subs	r2, r2, r3
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <bme280_compensate_H_int32+0xc4>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a44:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a48:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a4a:	4a24      	ldr	r2, [pc, #144]	; (8001adc <bme280_compensate_H_int32+0xc8>)
 8001a4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a50:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a58:	1292      	asrs	r2, r2, #10
 8001a5a:	4921      	ldr	r1, [pc, #132]	; (8001ae0 <bme280_compensate_H_int32+0xcc>)
 8001a5c:	8809      	ldrh	r1, [r1, #0]
 8001a5e:	4608      	mov	r0, r1
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	fb00 f101 	mul.w	r1, r0, r1
 8001a66:	12c9      	asrs	r1, r1, #11
 8001a68:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001a6c:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a70:	1292      	asrs	r2, r2, #10
 8001a72:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001a76:	491b      	ldr	r1, [pc, #108]	; (8001ae4 <bme280_compensate_H_int32+0xd0>)
 8001a78:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a7c:	fb01 f202 	mul.w	r2, r1, r2
 8001a80:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001a84:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	13db      	asrs	r3, r3, #15
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	13d2      	asrs	r2, r2, #15
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <bme280_compensate_H_int32+0xd4>)
 8001a9c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001aa2:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ab0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ab8:	bfa8      	it	ge
 8001aba:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001abe:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	131b      	asrs	r3, r3, #12
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	200000c0 	.word	0x200000c0
 8001ad4:	200000ba 	.word	0x200000ba
 8001ad8:	200000bc 	.word	0x200000bc
 8001adc:	200000be 	.word	0x200000be
 8001ae0:	200000a2 	.word	0x200000a2
 8001ae4:	200000b8 	.word	0x200000b8
 8001ae8:	200000a0 	.word	0x200000a0

08001aec <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
int BME280_Measure (void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001af0:	f7ff fc38 	bl	8001364 <BMEReadRaw>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d163      	bne.n	8001bc2 <BME280_Measure+0xd6>
	{

		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001afa:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <BME280_Measure+0xf4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b02:	d104      	bne.n	8001b0e <BME280_Measure+0x22>
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <BME280_Measure+0xf8>)
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e016      	b.n	8001b3c <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <BME280_Measure+0xf4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fc76 	bl	8001404 <BME280_compensate_T_int32>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd1a 	bl	8000554 <__aeabi_i2d>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <BME280_Measure+0xfc>)
 8001b26:	f7fe fea9 	bl	800087c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff f83b 	bl	8000bac <__aeabi_d2f>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <BME280_Measure+0xf8>)
 8001b3a:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <BME280_Measure+0x100>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b44:	d104      	bne.n	8001b50 <BME280_Measure+0x64>
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <BME280_Measure+0x104>)
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e016      	b.n	8001b7e <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <BME280_Measure+0x100>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fc97 	bl	8001488 <BME280_compensate_P_int64>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fce9 	bl	8000534 <__aeabi_ui2d>
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <BME280_Measure+0x108>)
 8001b68:	f7fe fe88 	bl	800087c <__aeabi_ddiv>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7ff f81a 	bl	8000bac <__aeabi_d2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <BME280_Measure+0x104>)
 8001b7c:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <BME280_Measure+0x10c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b86:	d104      	bne.n	8001b92 <BME280_Measure+0xa6>
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <BME280_Measure+0x110>)
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e023      	b.n	8001bda <BME280_Measure+0xee>
		  else
		  {
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <BME280_Measure+0x10c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff3c 	bl	8001a14 <bme280_compensate_H_int32>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcc8 	bl	8000534 <__aeabi_ui2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <BME280_Measure+0x114>)
 8001baa:	f7fe fe67 	bl	800087c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe fff9 	bl	8000bac <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <BME280_Measure+0x110>)
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e00b      	b.n	8001bda <BME280_Measure+0xee>


	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <BME280_Measure+0x110>)
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <BME280_Measure+0x110>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <BME280_Measure+0x104>)
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <BME280_Measure+0x104>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <BME280_Measure+0xf8>)
 8001bd8:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000090 	.word	0x20000090
 8001be4:	2000015c 	.word	0x2000015c
 8001be8:	40590000 	.word	0x40590000
 8001bec:	20000094 	.word	0x20000094
 8001bf0:	20000160 	.word	0x20000160
 8001bf4:	40700000 	.word	0x40700000
 8001bf8:	20000098 	.word	0x20000098
 8001bfc:	20000164 	.word	0x20000164
 8001c00:	40900000 	.word	0x40900000

08001c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0a:	f000 fb47 	bl	800229c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0e:	f000 f845 	bl	8001c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c12:	f000 f909 	bl	8001e28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c16:	f000 f8dd 	bl	8001dd4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c1a:	f000 f8ad 	bl	8001d78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int val=10;
 8001c1e:	230a      	movs	r3, #10
 8001c20:	607b      	str	r3, [r7, #4]
  val=BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001c22:	2304      	movs	r3, #4
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	2300      	movs	r3, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2105      	movs	r1, #5
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff fabb 	bl	80011ac <BME280_Config>
 8001c36:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(BME280_Measure()==0)
 8001c38:	f7ff ff58 	bl	8001aec <BME280_Measure>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <main+0x70>
	  {
		  gcvt(Temperature,5,temp);
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <main+0x84>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc96 	bl	8000578 <__aeabi_f2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <main+0x88>)
 8001c52:	2005      	movs	r0, #5
 8001c54:	ec43 2b10 	vmov	d0, r2, r3
 8001c58:	f002 ffce 	bl	8004bf8 <gcvt>
		  HAL_UART_Transmit(&huart2, temp, sizeof(temp), 100);
 8001c5c:	2364      	movs	r3, #100	; 0x64
 8001c5e:	2206      	movs	r2, #6
 8001c60:	490a      	ldr	r1, [pc, #40]	; (8001c8c <main+0x88>)
 8001c62:	480b      	ldr	r0, [pc, #44]	; (8001c90 <main+0x8c>)
 8001c64:	f002 fc53 	bl	800450e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2,"\n\r",2,100);
 8001c68:	2364      	movs	r3, #100	; 0x64
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	4909      	ldr	r1, [pc, #36]	; (8001c94 <main+0x90>)
 8001c6e:	4808      	ldr	r0, [pc, #32]	; (8001c90 <main+0x8c>)
 8001c70:	f002 fc4d 	bl	800450e <HAL_UART_Transmit>
	  }
//	  HAL_UART_Transmit(&huart2, temp, sizeof(temp), 100);
//	  gcvt(temp,"temp=%f\n\r",Temperature);
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c74:	2120      	movs	r1, #32
 8001c76:	4808      	ldr	r0, [pc, #32]	; (8001c98 <main+0x94>)
 8001c78:	f000 fe39 	bl	80028ee <HAL_GPIO_TogglePin>
	  HAL_Delay (500);
 8001c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c80:	f000 fb7e 	bl	8002380 <HAL_Delay>
	  if(BME280_Measure()==0)
 8001c84:	e7d8      	b.n	8001c38 <main+0x34>
 8001c86:	bf00      	nop
 8001c88:	2000015c 	.word	0x2000015c
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000118 	.word	0x20000118
 8001c94:	080072a0 	.word	0x080072a0
 8001c98:	40020000 	.word	0x40020000

08001c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b094      	sub	sp, #80	; 0x50
 8001ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	2234      	movs	r2, #52	; 0x34
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 f8cd 	bl	8004e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <SystemClock_Config+0xd4>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <SystemClock_Config+0xd4>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <SystemClock_Config+0xd4>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <SystemClock_Config+0xd8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <SystemClock_Config+0xd8>)
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <SystemClock_Config+0xd8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d00:	2301      	movs	r3, #1
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d04:	2310      	movs	r3, #16
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d10:	2310      	movs	r3, #16
 8001d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d22:	2302      	movs	r3, #2
 8001d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 f904 	bl	8003f38 <HAL_RCC_OscConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001d36:	f000 f8c7 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	2102      	movs	r1, #2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 fda4 	bl	80038a4 <HAL_RCC_ClockConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001d62:	f000 f8b1 	bl	8001ec8 <Error_Handler>
  }
}
 8001d66:	bf00      	nop
 8001d68:	3750      	adds	r7, #80	; 0x50
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000

08001d78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d7e:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <MX_I2C1_Init+0x54>)
 8001d80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <MX_I2C1_Init+0x58>)
 8001d86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001db6:	f000 fdb5 	bl	8002924 <HAL_I2C_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dc0:	f000 f882 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200000c4 	.word	0x200000c4
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	000186a0 	.word	0x000186a0

08001dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <MX_USART2_UART_Init+0x50>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001e0c:	f002 fb32 	bl	8004474 <HAL_UART_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e16:	f000 f857 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000118 	.word	0x20000118
 8001e24:	40004400 	.word	0x40004400

08001e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <MX_GPIO_Init+0x98>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <MX_GPIO_Init+0x98>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <MX_GPIO_Init+0x98>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <MX_GPIO_Init+0x98>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <MX_GPIO_Init+0x98>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <MX_GPIO_Init+0x98>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_GPIO_Init+0x98>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <MX_GPIO_Init+0x98>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_GPIO_Init+0x98>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2120      	movs	r1, #32
 8001e96:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <MX_GPIO_Init+0x9c>)
 8001e98:	f000 fd10 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <MX_GPIO_Init+0x9c>)
 8001eb4:	f000 fb6e 	bl	8002594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb8:	bf00      	nop
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <Error_Handler+0x8>
	...

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f000 fb0a 	bl	800252c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_I2C_MspInit+0x84>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12b      	bne.n	8001f9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f62:	23c0      	movs	r3, #192	; 0xc0
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f66:	2312      	movs	r3, #18
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f72:	2304      	movs	r3, #4
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <HAL_I2C_MspInit+0x8c>)
 8001f7e:	f000 fb09 	bl	8002594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_UART_MspInit+0x84>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d12b      	bne.n	800202e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_UART_MspInit+0x88>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_UART_MspInit+0x88>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_UART_MspInit+0x88>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800200e:	230c      	movs	r3, #12
 8002010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800201e:	2307      	movs	r3, #7
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_UART_MspInit+0x8c>)
 800202a:	f000 fab3 	bl	8002594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40004400 	.word	0x40004400
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 f956 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return 1;
 800209c:	2301      	movs	r3, #1
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_kill>:

int _kill(int pid, int sig)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020b2:	f002 ff19 	bl	8004ee8 <__errno>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2216      	movs	r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
  return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_exit>:

void _exit (int status)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ffe7 	bl	80020a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020da:	e7fe      	b.n	80020da <_exit+0x12>

080020dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e00a      	b.n	8002104 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ee:	f3af 8000 	nop.w
 80020f2:	4601      	mov	r1, r0
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	b2ca      	uxtb	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	dbf0      	blt.n	80020ee <_read+0x12>
  }

  return len;
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e009      	b.n	800213c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	dbf1      	blt.n	8002128 <_write+0x12>
  }
  return len;
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_close>:

int _close(int file)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002176:	605a      	str	r2, [r3, #4]
  return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_isatty>:

int _isatty(int file)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f002 fe7e 	bl	8004ee8 <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20020000 	.word	0x20020000
 8002218:	00000400 	.word	0x00000400
 800221c:	20000168 	.word	0x20000168
 8002220:	200002c0 	.word	0x200002c0

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800224c:	480d      	ldr	r0, [pc, #52]	; (8002284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800224e:	490e      	ldr	r1, [pc, #56]	; (8002288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002264:	4c0b      	ldr	r4, [pc, #44]	; (8002294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002272:	f7ff ffd7 	bl	8002224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002276:	f002 fe3d 	bl	8004ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227a:	f7ff fcc3 	bl	8001c04 <main>
  bx  lr    
 800227e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800228c:	08007524 	.word	0x08007524
  ldr r2, =_sbss
 8002290:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002294:	200002bc 	.word	0x200002bc

08002298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC_IRQHandler>
	...

0800229c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <HAL_Init+0x40>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_Init+0x40>)
 80022b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_Init+0x40>)
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f000 f931 	bl	800252c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 f808 	bl	80022e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d0:	f7ff fe00 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x54>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x58>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f93b 	bl	800257a <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f000 f911 	bl	8002542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <HAL_InitTick+0x5c>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000008 	.word	0x20000008
 8002338:	20000010 	.word	0x20000010
 800233c:	2000000c 	.word	0x2000000c

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000010 	.word	0x20000010
 8002364:	2000016c 	.word	0x2000016c

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	2000016c 	.word	0x2000016c

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000010 	.word	0x20000010

080023c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fa:	4a04      	ldr	r2, [pc, #16]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60d3      	str	r3, [r2, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f8:	d301      	bcc.n	80024fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <SysTick_Config+0x40>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002506:	210f      	movs	r1, #15
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f7ff ff8e 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SysTick_Config+0x40>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <SysTick_Config+0x40>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff47 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff5c 	bl	8002410 <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff8e 	bl	8002480 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5d 	bl	800242c <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ffb0 	bl	80024e8 <SysTick_Config>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	e165      	b.n	800287c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f040 8154 	bne.w	8002876 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d005      	beq.n	80025e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d130      	bne.n	8002648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 0201 	and.w	r2, r3, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b03      	cmp	r3, #3
 8002652:	d017      	beq.n	8002684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d123      	bne.n	80026d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	08da      	lsrs	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3208      	adds	r2, #8
 80026d2:	69b9      	ldr	r1, [r7, #24]
 80026d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0203 	and.w	r2, r3, #3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80ae 	beq.w	8002876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <HAL_GPIO_Init+0x300>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a5c      	ldr	r2, [pc, #368]	; (8002894 <HAL_GPIO_Init+0x300>)
 8002724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <HAL_GPIO_Init+0x300>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002736:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_GPIO_Init+0x304>)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4f      	ldr	r2, [pc, #316]	; (800289c <HAL_GPIO_Init+0x308>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d025      	beq.n	80027ae <HAL_GPIO_Init+0x21a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4e      	ldr	r2, [pc, #312]	; (80028a0 <HAL_GPIO_Init+0x30c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01f      	beq.n	80027aa <HAL_GPIO_Init+0x216>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4d      	ldr	r2, [pc, #308]	; (80028a4 <HAL_GPIO_Init+0x310>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d019      	beq.n	80027a6 <HAL_GPIO_Init+0x212>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <HAL_GPIO_Init+0x314>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_GPIO_Init+0x20e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_GPIO_Init+0x318>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00d      	beq.n	800279e <HAL_GPIO_Init+0x20a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_GPIO_Init+0x31c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <HAL_GPIO_Init+0x206>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a49      	ldr	r2, [pc, #292]	; (80028b4 <HAL_GPIO_Init+0x320>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_GPIO_Init+0x202>
 8002792:	2306      	movs	r3, #6
 8002794:	e00c      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 8002796:	2307      	movs	r3, #7
 8002798:	e00a      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 800279a:	2305      	movs	r3, #5
 800279c:	e008      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 800279e:	2304      	movs	r3, #4
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027a2:	2303      	movs	r3, #3
 80027a4:	e004      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e002      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027ae:	2300      	movs	r3, #0
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	f002 0203 	and.w	r2, r2, #3
 80027b6:	0092      	lsls	r2, r2, #2
 80027b8:	4093      	lsls	r3, r2
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c0:	4935      	ldr	r1, [pc, #212]	; (8002898 <HAL_GPIO_Init+0x304>)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	3302      	adds	r3, #2
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ce:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <HAL_GPIO_Init+0x324>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f2:	4a31      	ldr	r2, [pc, #196]	; (80028b8 <HAL_GPIO_Init+0x324>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f8:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_GPIO_Init+0x324>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800281c:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <HAL_GPIO_Init+0x324>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <HAL_GPIO_Init+0x324>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002846:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_GPIO_Init+0x324>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284c:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HAL_GPIO_Init+0x324>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002870:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <HAL_GPIO_Init+0x324>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	f67f ae96 	bls.w	80025b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	40013800 	.word	0x40013800
 800289c:	40020000 	.word	0x40020000
 80028a0:	40020400 	.word	0x40020400
 80028a4:	40020800 	.word	0x40020800
 80028a8:	40020c00 	.word	0x40020c00
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40021400 	.word	0x40021400
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002900:	887a      	ldrh	r2, [r7, #2]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	041a      	lsls	r2, r3, #16
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43d9      	mvns	r1, r3
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	400b      	ands	r3, r1
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e12b      	b.n	8002b8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff faea 	bl	8001f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002988:	f001 f87e 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 800298c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a81      	ldr	r2, [pc, #516]	; (8002b98 <HAL_I2C_Init+0x274>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d807      	bhi.n	80029a8 <HAL_I2C_Init+0x84>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a80      	ldr	r2, [pc, #512]	; (8002b9c <HAL_I2C_Init+0x278>)
 800299c:	4293      	cmp	r3, r2
 800299e:	bf94      	ite	ls
 80029a0:	2301      	movls	r3, #1
 80029a2:	2300      	movhi	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e006      	b.n	80029b6 <HAL_I2C_Init+0x92>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a7d      	ldr	r2, [pc, #500]	; (8002ba0 <HAL_I2C_Init+0x27c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	bf94      	ite	ls
 80029b0:	2301      	movls	r3, #1
 80029b2:	2300      	movhi	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0e7      	b.n	8002b8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a78      	ldr	r2, [pc, #480]	; (8002ba4 <HAL_I2C_Init+0x280>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0c9b      	lsrs	r3, r3, #18
 80029c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <HAL_I2C_Init+0x274>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d802      	bhi.n	80029f8 <HAL_I2C_Init+0xd4>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	3301      	adds	r3, #1
 80029f6:	e009      	b.n	8002a0c <HAL_I2C_Init+0xe8>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	4a69      	ldr	r2, [pc, #420]	; (8002ba8 <HAL_I2C_Init+0x284>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	495c      	ldr	r1, [pc, #368]	; (8002b98 <HAL_I2C_Init+0x274>)
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	d819      	bhi.n	8002a60 <HAL_I2C_Init+0x13c>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e59      	subs	r1, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3a:	1c59      	adds	r1, r3, #1
 8002a3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a40:	400b      	ands	r3, r1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_I2C_Init+0x138>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1e59      	subs	r1, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5a:	e051      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e04f      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <HAL_I2C_Init+0x168>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	440b      	add	r3, r1
 8002a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e012      	b.n	8002ab2 <HAL_I2C_Init+0x18e>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Init+0x196>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e022      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_I2C_Init+0x1bc>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1e58      	subs	r0, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	440b      	add	r3, r1
 8002ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ade:	e00f      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	0099      	lsls	r1, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	6809      	ldr	r1, [r1, #0]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6911      	ldr	r1, [r2, #16]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68d2      	ldr	r2, [r2, #12]
 8002b3a:	4311      	orrs	r1, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	000186a0 	.word	0x000186a0
 8002b9c:	001e847f 	.word	0x001e847f
 8002ba0:	003d08ff 	.word	0x003d08ff
 8002ba4:	431bde83 	.word	0x431bde83
 8002ba8:	10624dd3 	.word	0x10624dd3

08002bac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	817b      	strh	r3, [r7, #10]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	813b      	strh	r3, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bc6:	f7ff fbcf 	bl	8002368 <HAL_GetTick>
 8002bca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	f040 80d9 	bne.w	8002d8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2319      	movs	r3, #25
 8002be0:	2201      	movs	r2, #1
 8002be2:	496d      	ldr	r1, [pc, #436]	; (8002d98 <HAL_I2C_Mem_Write+0x1ec>)
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fc7f 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e0cc      	b.n	8002d8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2C_Mem_Write+0x56>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e0c5      	b.n	8002d8e <HAL_I2C_Mem_Write+0x1e2>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d007      	beq.n	8002c28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2221      	movs	r2, #33	; 0x21
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2240      	movs	r2, #64	; 0x40
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4a4d      	ldr	r2, [pc, #308]	; (8002d9c <HAL_I2C_Mem_Write+0x1f0>)
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c6a:	88f8      	ldrh	r0, [r7, #6]
 8002c6c:	893a      	ldrh	r2, [r7, #8]
 8002c6e:	8979      	ldrh	r1, [r7, #10]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4603      	mov	r3, r0
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fab6 	bl	80031ec <I2C_RequestMemoryWrite>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d052      	beq.n	8002d2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e081      	b.n	8002d8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fd00 	bl	8003694 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d107      	bne.n	8002cb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06b      	b.n	8002d8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d11b      	bne.n	8002d2c <HAL_I2C_Mem_Write+0x180>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d017      	beq.n	8002d2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1aa      	bne.n	8002c8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fcec 	bl	8003716 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00d      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d107      	bne.n	8002d5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e016      	b.n	8002d8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e000      	b.n	8002d8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
  }
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	00100002 	.word	0x00100002
 8002d9c:	ffff0000 	.word	0xffff0000

08002da0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	4608      	mov	r0, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	461a      	mov	r2, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	817b      	strh	r3, [r7, #10]
 8002db2:	460b      	mov	r3, r1
 8002db4:	813b      	strh	r3, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dba:	f7ff fad5 	bl	8002368 <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	f040 8208 	bne.w	80031de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	2319      	movs	r3, #25
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	497b      	ldr	r1, [pc, #492]	; (8002fc4 <HAL_I2C_Mem_Read+0x224>)
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fb85 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
 8002de6:	e1fb      	b.n	80031e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_I2C_Mem_Read+0x56>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e1f4      	b.n	80031e0 <HAL_I2C_Mem_Read+0x440>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d007      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2222      	movs	r2, #34	; 0x22
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2240      	movs	r2, #64	; 0x40
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4a5b      	ldr	r2, [pc, #364]	; (8002fc8 <HAL_I2C_Mem_Read+0x228>)
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e5e:	88f8      	ldrh	r0, [r7, #6]
 8002e60:	893a      	ldrh	r2, [r7, #8]
 8002e62:	8979      	ldrh	r1, [r7, #10]
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fa52 	bl	8003318 <I2C_RequestMemoryRead>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e1b0      	b.n	80031e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d113      	bne.n	8002eae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	623b      	str	r3, [r7, #32]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	623b      	str	r3, [r7, #32]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e184      	b.n	80031b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d11b      	bne.n	8002eee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e164      	b.n	80031b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d11b      	bne.n	8002f2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	e144      	b.n	80031b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f44:	e138      	b.n	80031b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	f200 80f1 	bhi.w	8003132 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d123      	bne.n	8002fa0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fc1b 	bl	8003798 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e139      	b.n	80031e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f9e:	e10b      	b.n	80031b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d14e      	bne.n	8003046 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	2200      	movs	r2, #0
 8002fb0:	4906      	ldr	r1, [pc, #24]	; (8002fcc <HAL_I2C_Mem_Read+0x22c>)
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fa98 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e10e      	b.n	80031e0 <HAL_I2C_Mem_Read+0x440>
 8002fc2:	bf00      	nop
 8002fc4:	00100002 	.word	0x00100002
 8002fc8:	ffff0000 	.word	0xffff0000
 8002fcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003044:	e0b8      	b.n	80031b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	2200      	movs	r2, #0
 800304e:	4966      	ldr	r1, [pc, #408]	; (80031e8 <HAL_I2C_Mem_Read+0x448>)
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fa49 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0bf      	b.n	80031e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	2200      	movs	r2, #0
 80030aa:	494f      	ldr	r1, [pc, #316]	; (80031e8 <HAL_I2C_Mem_Read+0x448>)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fa1b 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e091      	b.n	80031e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003130:	e042      	b.n	80031b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fb2e 	bl	8003798 <I2C_WaitOnRXNEFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e04c      	b.n	80031e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b04      	cmp	r3, #4
 8003184:	d118      	bne.n	80031b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f aec2 	bne.w	8002f46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	00010004 	.word	0x00010004

080031ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003214:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	2200      	movs	r2, #0
 800321e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f960 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800323c:	d103      	bne.n	8003246 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e05f      	b.n	800330a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800324a:	897b      	ldrh	r3, [r7, #10]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003258:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	6a3a      	ldr	r2, [r7, #32]
 800325e:	492d      	ldr	r1, [pc, #180]	; (8003314 <I2C_RequestMemoryWrite+0x128>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f998 	bl	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e04c      	b.n	800330a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	6a39      	ldr	r1, [r7, #32]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fa02 	bl	8003694 <I2C_WaitOnTXEFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b04      	cmp	r3, #4
 800329c:	d107      	bne.n	80032ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e02b      	b.n	800330a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d105      	bne.n	80032c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	611a      	str	r2, [r3, #16]
 80032c2:	e021      	b.n	8003308 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032c4:	893b      	ldrh	r3, [r7, #8]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	6a39      	ldr	r1, [r7, #32]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f9dc 	bl	8003694 <I2C_WaitOnTXEFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d107      	bne.n	80032fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e005      	b.n	800330a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032fe:	893b      	ldrh	r3, [r7, #8]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	00010002 	.word	0x00010002

08003318 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	817b      	strh	r3, [r7, #10]
 800332a:	460b      	mov	r3, r1
 800332c:	813b      	strh	r3, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003340:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	2200      	movs	r2, #0
 800335a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f8c2 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003378:	d103      	bne.n	8003382 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0aa      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	4952      	ldr	r1, [pc, #328]	; (80034e4 <I2C_RequestMemoryRead+0x1cc>)
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f8fa 	bl	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e097      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	6a39      	ldr	r1, [r7, #32]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f964 	bl	8003694 <I2C_WaitOnTXEFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d107      	bne.n	80033ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e076      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	e021      	b.n	8003444 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	b29b      	uxth	r3, r3
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	6a39      	ldr	r1, [r7, #32]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f93e 	bl	8003694 <I2C_WaitOnTXEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b04      	cmp	r3, #4
 8003424:	d107      	bne.n	8003436 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e050      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800343a:	893b      	ldrh	r3, [r7, #8]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	6a39      	ldr	r1, [r7, #32]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f923 	bl	8003694 <I2C_WaitOnTXEFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00d      	beq.n	8003470 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	2b04      	cmp	r3, #4
 800345a:	d107      	bne.n	800346c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e035      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2200      	movs	r2, #0
 8003488:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f82b 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a6:	d103      	bne.n	80034b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e013      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034b4:	897b      	ldrh	r3, [r7, #10]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	4906      	ldr	r1, [pc, #24]	; (80034e4 <I2C_RequestMemoryRead+0x1cc>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f863 	bl	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	00010002 	.word	0x00010002

080034e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f8:	e025      	b.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d021      	beq.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fe ff31 	bl	8002368 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d116      	bne.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f043 0220 	orr.w	r2, r3, #32
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e023      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10d      	bne.n	800356c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	e00c      	b.n	8003586 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	429a      	cmp	r2, r3
 800358a:	d0b6      	beq.n	80034fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a4:	e051      	b.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b4:	d123      	bne.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e046      	b.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d021      	beq.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003606:	f7fe feaf 	bl	8002368 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d302      	bcc.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d116      	bne.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f043 0220 	orr.w	r2, r3, #32
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e020      	b.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d10c      	bne.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	bf14      	ite	ne
 8003666:	2301      	movne	r3, #1
 8003668:	2300      	moveq	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	e00b      	b.n	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	43da      	mvns	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4013      	ands	r3, r2
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d18d      	bne.n	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a0:	e02d      	b.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f8ce 	bl	8003844 <I2C_IsAcknowledgeFailed>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e02d      	b.n	800370e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d021      	beq.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fe fe55 	bl	8002368 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e007      	b.n	800370e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	2b80      	cmp	r3, #128	; 0x80
 800370a:	d1ca      	bne.n	80036a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003722:	e02d      	b.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f88d 	bl	8003844 <I2C_IsAcknowledgeFailed>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e02d      	b.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d021      	beq.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373c:	f7fe fe14 	bl	8002368 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e007      	b.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d1ca      	bne.n	8003724 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037a4:	e042      	b.n	800382c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d119      	bne.n	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e029      	b.n	800383c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e8:	f7fe fdbe 	bl	8002368 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d302      	bcc.n	80037fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e007      	b.n	800383c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d1b5      	bne.n	80037a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d11b      	bne.n	8003894 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003864:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0204 	orr.w	r2, r3, #4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0cc      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d90c      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b8      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f8:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	494d      	ldr	r1, [pc, #308]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d044      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d119      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e07f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d003      	beq.n	8003962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395e:	2b03      	cmp	r3, #3
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e067      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4934      	ldr	r1, [pc, #208]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fe fce8 	bl	8002368 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fe fce4 	bl	8002368 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e04f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20c      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e032      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4916      	ldr	r1, [pc, #88]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2a:	f000 f855 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	490a      	ldr	r1, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fc48 	bl	80022e0 <HAL_InitTick>

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023c00 	.word	0x40023c00
 8003a60:	40023800 	.word	0x40023800
 8003a64:	080072a4 	.word	0x080072a4
 8003a68:	20000008 	.word	0x20000008
 8003a6c:	2000000c 	.word	0x2000000c

08003a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000008 	.word	0x20000008

08003a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a8c:	f7ff fff0 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0a9b      	lsrs	r3, r3, #10
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	080072b4 	.word	0x080072b4

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ab4:	f7ff ffdc 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0b5b      	lsrs	r3, r3, #13
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4903      	ldr	r1, [pc, #12]	; (8003ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	080072b4 	.word	0x080072b4

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003adc:	b0ae      	sub	sp, #184	; 0xb8
 8003ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003afe:	4bcb      	ldr	r3, [pc, #812]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	f200 8206 	bhi.w	8003f18 <HAL_RCC_GetSysClockFreq+0x440>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b49 	.word	0x08003b49
 8003b18:	08003f19 	.word	0x08003f19
 8003b1c:	08003f19 	.word	0x08003f19
 8003b20:	08003f19 	.word	0x08003f19
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003f19 	.word	0x08003f19
 8003b2c:	08003f19 	.word	0x08003f19
 8003b30:	08003f19 	.word	0x08003f19
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003f19 	.word	0x08003f19
 8003b3c:	08003f19 	.word	0x08003f19
 8003b40:	08003f19 	.word	0x08003f19
 8003b44:	08003d49 	.word	0x08003d49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4bb9      	ldr	r3, [pc, #740]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b4e:	e1e7      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b50:	4bb8      	ldr	r3, [pc, #736]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b56:	e1e3      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b58:	4bb4      	ldr	r3, [pc, #720]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b64:	4bb1      	ldr	r3, [pc, #708]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d071      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b70:	4bae      	ldr	r3, [pc, #696]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b7c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b96:	4622      	mov	r2, r4
 8003b98:	462b      	mov	r3, r5
 8003b9a:	f04f 0000 	mov.w	r0, #0
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	0159      	lsls	r1, r3, #5
 8003ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba8:	0150      	lsls	r0, r2, #5
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4621      	mov	r1, r4
 8003bb0:	1a51      	subs	r1, r2, r1
 8003bb2:	6439      	str	r1, [r7, #64]	; 0x40
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bba:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003bc8:	4649      	mov	r1, r9
 8003bca:	018b      	lsls	r3, r1, #6
 8003bcc:	4641      	mov	r1, r8
 8003bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	018a      	lsls	r2, r1, #6
 8003bd6:	4641      	mov	r1, r8
 8003bd8:	1a51      	subs	r1, r2, r1
 8003bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bdc:	4649      	mov	r1, r9
 8003bde:	eb63 0301 	sbc.w	r3, r3, r1
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	00cb      	lsls	r3, r1, #3
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bfa:	4641      	mov	r1, r8
 8003bfc:	00ca      	lsls	r2, r1, #3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	4622      	mov	r2, r4
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	460a      	mov	r2, r1
 8003c0e:	eb42 0303 	adc.w	r3, r2, r3
 8003c12:	637b      	str	r3, [r7, #52]	; 0x34
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c20:	4629      	mov	r1, r5
 8003c22:	024b      	lsls	r3, r1, #9
 8003c24:	4621      	mov	r1, r4
 8003c26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	024a      	lsls	r2, r1, #9
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c40:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c44:	f7fd f852 	bl	8000cec <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c52:	e067      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c54:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	099b      	lsrs	r3, r3, #6
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c60:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c6e:	2300      	movs	r3, #0
 8003c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c72:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c76:	4622      	mov	r2, r4
 8003c78:	462b      	mov	r3, r5
 8003c7a:	f04f 0000 	mov.w	r0, #0
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	0159      	lsls	r1, r3, #5
 8003c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c88:	0150      	lsls	r0, r2, #5
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4621      	mov	r1, r4
 8003c90:	1a51      	subs	r1, r2, r1
 8003c92:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c94:	4629      	mov	r1, r5
 8003c96:	eb63 0301 	sbc.w	r3, r3, r1
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ca8:	4649      	mov	r1, r9
 8003caa:	018b      	lsls	r3, r1, #6
 8003cac:	4641      	mov	r1, r8
 8003cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	018a      	lsls	r2, r1, #6
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd6:	4692      	mov	sl, r2
 8003cd8:	469b      	mov	fp, r3
 8003cda:	4623      	mov	r3, r4
 8003cdc:	eb1a 0303 	adds.w	r3, sl, r3
 8003ce0:	623b      	str	r3, [r7, #32]
 8003ce2:	462b      	mov	r3, r5
 8003ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	028b      	lsls	r3, r1, #10
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d00:	4621      	mov	r1, r4
 8003d02:	028a      	lsls	r2, r1, #10
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d10:	677a      	str	r2, [r7, #116]	; 0x74
 8003d12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d16:	f7fc ffe9 	bl	8000cec <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4613      	mov	r3, r2
 8003d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d24:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d46:	e0eb      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d48:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d54:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d06b      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d60:	4b32      	ldr	r3, [pc, #200]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	2200      	movs	r2, #0
 8003d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	663b      	str	r3, [r7, #96]	; 0x60
 8003d74:	2300      	movs	r3, #0
 8003d76:	667b      	str	r3, [r7, #100]	; 0x64
 8003d78:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d7c:	4622      	mov	r2, r4
 8003d7e:	462b      	mov	r3, r5
 8003d80:	f04f 0000 	mov.w	r0, #0
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	0159      	lsls	r1, r3, #5
 8003d8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d8e:	0150      	lsls	r0, r2, #5
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4621      	mov	r1, r4
 8003d96:	1a51      	subs	r1, r2, r1
 8003d98:	61b9      	str	r1, [r7, #24]
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dae:	4659      	mov	r1, fp
 8003db0:	018b      	lsls	r3, r1, #6
 8003db2:	4651      	mov	r1, sl
 8003db4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003db8:	4651      	mov	r1, sl
 8003dba:	018a      	lsls	r2, r1, #6
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	ebb2 0801 	subs.w	r8, r2, r1
 8003dc2:	4659      	mov	r1, fp
 8003dc4:	eb63 0901 	sbc.w	r9, r3, r1
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ddc:	4690      	mov	r8, r2
 8003dde:	4699      	mov	r9, r3
 8003de0:	4623      	mov	r3, r4
 8003de2:	eb18 0303 	adds.w	r3, r8, r3
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	462b      	mov	r3, r5
 8003dea:	eb49 0303 	adc.w	r3, r9, r3
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	024b      	lsls	r3, r1, #9
 8003e00:	4621      	mov	r1, r4
 8003e02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e06:	4621      	mov	r1, r4
 8003e08:	024a      	lsls	r2, r1, #9
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e12:	2200      	movs	r2, #0
 8003e14:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e16:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e1c:	f7fc ff66 	bl	8000cec <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4613      	mov	r3, r2
 8003e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e2a:	e065      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x420>
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e38:	4b3d      	ldr	r3, [pc, #244]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	099b      	lsrs	r3, r3, #6
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	4611      	mov	r1, r2
 8003e44:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e4e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e52:	4642      	mov	r2, r8
 8003e54:	464b      	mov	r3, r9
 8003e56:	f04f 0000 	mov.w	r0, #0
 8003e5a:	f04f 0100 	mov.w	r1, #0
 8003e5e:	0159      	lsls	r1, r3, #5
 8003e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e64:	0150      	lsls	r0, r2, #5
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4641      	mov	r1, r8
 8003e6c:	1a51      	subs	r1, r2, r1
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	4649      	mov	r1, r9
 8003e72:	eb63 0301 	sbc.w	r3, r3, r1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e84:	4659      	mov	r1, fp
 8003e86:	018b      	lsls	r3, r1, #6
 8003e88:	4651      	mov	r1, sl
 8003e8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e8e:	4651      	mov	r1, sl
 8003e90:	018a      	lsls	r2, r1, #6
 8003e92:	4651      	mov	r1, sl
 8003e94:	1a54      	subs	r4, r2, r1
 8003e96:	4659      	mov	r1, fp
 8003e98:	eb63 0501 	sbc.w	r5, r3, r1
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	00eb      	lsls	r3, r5, #3
 8003ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eaa:	00e2      	lsls	r2, r4, #3
 8003eac:	4614      	mov	r4, r2
 8003eae:	461d      	mov	r5, r3
 8003eb0:	4643      	mov	r3, r8
 8003eb2:	18e3      	adds	r3, r4, r3
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	eb45 0303 	adc.w	r3, r5, r3
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eca:	4629      	mov	r1, r5
 8003ecc:	028b      	lsls	r3, r1, #10
 8003ece:	4621      	mov	r1, r4
 8003ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	028a      	lsls	r2, r1, #10
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ee6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003eea:	f7fc feff 	bl	8000cec <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x458>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	0f1b      	lsrs	r3, r3, #28
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f16:	e003      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	37b8      	adds	r7, #184	; 0xb8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
 8003f34:	00f42400 	.word	0x00f42400

08003f38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e28d      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8083 	beq.w	800405e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f58:	4b94      	ldr	r3, [pc, #592]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d019      	beq.n	8003f98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f64:	4b91      	ldr	r3, [pc, #580]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f70:	4b8e      	ldr	r3, [pc, #568]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7c:	d00c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	4b8b      	ldr	r3, [pc, #556]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d112      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8a:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	4b84      	ldr	r3, [pc, #528]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05b      	beq.n	800405c <HAL_RCC_OscConfig+0x124>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d157      	bne.n	800405c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e25a      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x90>
 8003fba:	4b7c      	ldr	r3, [pc, #496]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7b      	ldr	r2, [pc, #492]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e01d      	b.n	8004004 <HAL_RCC_OscConfig+0xcc>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0xb4>
 8003fd2:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a75      	ldr	r2, [pc, #468]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b73      	ldr	r3, [pc, #460]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a72      	ldr	r2, [pc, #456]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0xcc>
 8003fec:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b6c      	ldr	r3, [pc, #432]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a6b      	ldr	r2, [pc, #428]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fe f9ac 	bl	8002368 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004014:	f7fe f9a8 	bl	8002368 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e21f      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b61      	ldr	r3, [pc, #388]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0xdc>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fe f998 	bl	8002368 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403c:	f7fe f994 	bl	8002368 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e20b      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	4b57      	ldr	r3, [pc, #348]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x104>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d06f      	beq.n	800414a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800406a:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b00      	cmp	r3, #0
 8004074:	d017      	beq.n	80040a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004076:	4b4d      	ldr	r3, [pc, #308]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800407e:	2b08      	cmp	r3, #8
 8004080:	d105      	bne.n	800408e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004082:	4b4a      	ldr	r3, [pc, #296]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d11c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409a:	4b44      	ldr	r3, [pc, #272]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCC_OscConfig+0x186>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e1d3      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4937      	ldr	r1, [pc, #220]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	e03a      	b.n	800414a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040dc:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <HAL_RCC_OscConfig+0x278>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7fe f941 	bl	8002368 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ea:	f7fe f93d 	bl	8002368 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e1b4      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	4b28      	ldr	r3, [pc, #160]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4925      	ldr	r1, [pc, #148]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
 800411c:	e015      	b.n	800414a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <HAL_RCC_OscConfig+0x278>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fe f920 	bl	8002368 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412c:	f7fe f91c 	bl	8002368 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e193      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d036      	beq.n	80041c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_RCC_OscConfig+0x27c>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fe f900 	bl	8002368 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416c:	f7fe f8fc 	bl	8002368 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e173      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_OscConfig+0x274>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x234>
 800418a:	e01b      	b.n	80041c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_OscConfig+0x27c>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004192:	f7fe f8e9 	bl	8002368 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	e00e      	b.n	80041b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419a:	f7fe f8e5 	bl	8002368 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d907      	bls.n	80041b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e15c      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
 80041ac:	40023800 	.word	0x40023800
 80041b0:	42470000 	.word	0x42470000
 80041b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b8:	4b8a      	ldr	r3, [pc, #552]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80041ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ea      	bne.n	800419a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8097 	beq.w	8004300 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d6:	4b83      	ldr	r3, [pc, #524]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	4b7f      	ldr	r3, [pc, #508]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	4a7e      	ldr	r2, [pc, #504]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f0:	6413      	str	r3, [r2, #64]	; 0x40
 80041f2:	4b7c      	ldr	r3, [pc, #496]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fe:	2301      	movs	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004202:	4b79      	ldr	r3, [pc, #484]	; (80043e8 <HAL_RCC_OscConfig+0x4b0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d118      	bne.n	8004240 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800420e:	4b76      	ldr	r3, [pc, #472]	; (80043e8 <HAL_RCC_OscConfig+0x4b0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a75      	ldr	r2, [pc, #468]	; (80043e8 <HAL_RCC_OscConfig+0x4b0>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421a:	f7fe f8a5 	bl	8002368 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004222:	f7fe f8a1 	bl	8002368 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e118      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004234:	4b6c      	ldr	r3, [pc, #432]	; (80043e8 <HAL_RCC_OscConfig+0x4b0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x31e>
 8004248:	4b66      	ldr	r3, [pc, #408]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	4a65      	ldr	r2, [pc, #404]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	6713      	str	r3, [r2, #112]	; 0x70
 8004254:	e01c      	b.n	8004290 <HAL_RCC_OscConfig+0x358>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b05      	cmp	r3, #5
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x340>
 800425e:	4b61      	ldr	r3, [pc, #388]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	4a60      	ldr	r2, [pc, #384]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 8004264:	f043 0304 	orr.w	r3, r3, #4
 8004268:	6713      	str	r3, [r2, #112]	; 0x70
 800426a:	4b5e      	ldr	r3, [pc, #376]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a5d      	ldr	r2, [pc, #372]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6713      	str	r3, [r2, #112]	; 0x70
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0x358>
 8004278:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a59      	ldr	r2, [pc, #356]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
 8004284:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a56      	ldr	r2, [pc, #344]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 800428a:	f023 0304 	bic.w	r3, r3, #4
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d015      	beq.n	80042c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fe f866 	bl	8002368 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a0:	f7fe f862 	bl	8002368 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e0d7      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b6:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0ee      	beq.n	80042a0 <HAL_RCC_OscConfig+0x368>
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fe f850 	bl	8002368 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042cc:	f7fe f84c 	bl	8002368 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e0c1      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ee      	bne.n	80042cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d105      	bne.n	8004300 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f4:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	4a3a      	ldr	r2, [pc, #232]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80042fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80ad 	beq.w	8004464 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b08      	cmp	r3, #8
 8004314:	d060      	beq.n	80043d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d145      	bne.n	80043aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431e:	4b33      	ldr	r3, [pc, #204]	; (80043ec <HAL_RCC_OscConfig+0x4b4>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fe f820 	bl	8002368 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432c:	f7fe f81c 	bl	8002368 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e093      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	071b      	lsls	r3, r3, #28
 8004376:	491b      	ldr	r1, [pc, #108]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_RCC_OscConfig+0x4b4>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fd fff1 	bl	8002368 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438a:	f7fd ffed 	bl	8002368 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e064      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x452>
 80043a8:	e05c      	b.n	8004464 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <HAL_RCC_OscConfig+0x4b4>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fd ffda 	bl	8002368 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fd ffd6 	bl	8002368 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e04d      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_OscConfig+0x4ac>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x480>
 80043d6:	e045      	b.n	8004464 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e040      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40007000 	.word	0x40007000
 80043ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <HAL_RCC_OscConfig+0x538>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d030      	beq.n	8004460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d129      	bne.n	8004460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d122      	bne.n	8004460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004428:	4293      	cmp	r3, r2
 800442a:	d119      	bne.n	8004460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	085b      	lsrs	r3, r3, #1
 8004438:	3b01      	subs	r3, #1
 800443a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d10f      	bne.n	8004460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d107      	bne.n	8004460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e03f      	b.n	8004506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fd fd8a 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	; 0x24
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f929 	bl	8004710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b08a      	sub	sp, #40	; 0x28
 8004512:	af02      	add	r7, sp, #8
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b20      	cmp	r3, #32
 800452c:	d17c      	bne.n	8004628 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_UART_Transmit+0x2c>
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e075      	b.n	800462a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_UART_Transmit+0x3e>
 8004548:	2302      	movs	r3, #2
 800454a:	e06e      	b.n	800462a <HAL_UART_Transmit+0x11c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2221      	movs	r2, #33	; 0x21
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004562:	f7fd ff01 	bl	8002368 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	88fa      	ldrh	r2, [r7, #6]
 8004572:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d108      	bne.n	8004590 <HAL_UART_Transmit+0x82>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e003      	b.n	8004598 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045a0:	e02a      	b.n	80045f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	; 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f840 	bl	8004632 <UART_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e036      	b.n	800462a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	3302      	adds	r3, #2
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	e007      	b.n	80045ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1cf      	bne.n	80045a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	2140      	movs	r1, #64	; 0x40
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f810 	bl	8004632 <UART_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e006      	b.n	800462a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	e000      	b.n	800462a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004628:	2302      	movs	r3, #2
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b090      	sub	sp, #64	; 0x40
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004642:	e050      	b.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d04c      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800464c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x30>
 8004652:	f7fd fe89 	bl	8002368 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800465e:	429a      	cmp	r2, r3
 8004660:	d241      	bcs.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004682:	637a      	str	r2, [r7, #52]	; 0x34
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e5      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3314      	adds	r3, #20
 800469c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	613b      	str	r3, [r7, #16]
   return(result);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3314      	adds	r3, #20
 80046b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046b6:	623a      	str	r2, [r7, #32]
 80046b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	69f9      	ldr	r1, [r7, #28]
 80046bc:	6a3a      	ldr	r2, [r7, #32]
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e5      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e00f      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	429a      	cmp	r2, r3
 8004702:	d09f      	beq.n	8004644 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3740      	adds	r7, #64	; 0x40
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b0c0      	sub	sp, #256	; 0x100
 8004716:	af00      	add	r7, sp, #0
 8004718:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	68d9      	ldr	r1, [r3, #12]
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	ea40 0301 	orr.w	r3, r0, r1
 8004738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	431a      	orrs	r2, r3
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	431a      	orrs	r2, r3
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004768:	f021 010c 	bic.w	r1, r1, #12
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004776:	430b      	orrs	r3, r1
 8004778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478a:	6999      	ldr	r1, [r3, #24]
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	ea40 0301 	orr.w	r3, r0, r1
 8004796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b8f      	ldr	r3, [pc, #572]	; (80049dc <UART_SetConfig+0x2cc>)
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d005      	beq.n	80047b0 <UART_SetConfig+0xa0>
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b8d      	ldr	r3, [pc, #564]	; (80049e0 <UART_SetConfig+0x2d0>)
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d104      	bne.n	80047ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7ff f97e 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 80047b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047b8:	e003      	b.n	80047c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ba:	f7ff f965 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 80047be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047cc:	f040 810c 	bne.w	80049e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	1891      	adds	r1, r2, r2
 80047e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80047ea:	415b      	adcs	r3, r3
 80047ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047f2:	4621      	mov	r1, r4
 80047f4:	eb12 0801 	adds.w	r8, r2, r1
 80047f8:	4629      	mov	r1, r5
 80047fa:	eb43 0901 	adc.w	r9, r3, r1
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800480a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004812:	4690      	mov	r8, r2
 8004814:	4699      	mov	r9, r3
 8004816:	4623      	mov	r3, r4
 8004818:	eb18 0303 	adds.w	r3, r8, r3
 800481c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004820:	462b      	mov	r3, r5
 8004822:	eb49 0303 	adc.w	r3, r9, r3
 8004826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004836:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800483a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800483e:	460b      	mov	r3, r1
 8004840:	18db      	adds	r3, r3, r3
 8004842:	653b      	str	r3, [r7, #80]	; 0x50
 8004844:	4613      	mov	r3, r2
 8004846:	eb42 0303 	adc.w	r3, r2, r3
 800484a:	657b      	str	r3, [r7, #84]	; 0x54
 800484c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004854:	f7fc fa4a 	bl	8000cec <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4b61      	ldr	r3, [pc, #388]	; (80049e4 <UART_SetConfig+0x2d4>)
 800485e:	fba3 2302 	umull	r2, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	011c      	lsls	r4, r3, #4
 8004866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800486a:	2200      	movs	r2, #0
 800486c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004870:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	1891      	adds	r1, r2, r2
 800487e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004880:	415b      	adcs	r3, r3
 8004882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004888:	4641      	mov	r1, r8
 800488a:	eb12 0a01 	adds.w	sl, r2, r1
 800488e:	4649      	mov	r1, r9
 8004890:	eb43 0b01 	adc.w	fp, r3, r1
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048a8:	4692      	mov	sl, r2
 80048aa:	469b      	mov	fp, r3
 80048ac:	4643      	mov	r3, r8
 80048ae:	eb1a 0303 	adds.w	r3, sl, r3
 80048b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048b6:	464b      	mov	r3, r9
 80048b8:	eb4b 0303 	adc.w	r3, fp, r3
 80048bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048d4:	460b      	mov	r3, r1
 80048d6:	18db      	adds	r3, r3, r3
 80048d8:	643b      	str	r3, [r7, #64]	; 0x40
 80048da:	4613      	mov	r3, r2
 80048dc:	eb42 0303 	adc.w	r3, r2, r3
 80048e0:	647b      	str	r3, [r7, #68]	; 0x44
 80048e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048ea:	f7fc f9ff 	bl	8000cec <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <UART_SetConfig+0x2d4>)
 80048f6:	fba3 2301 	umull	r2, r3, r3, r1
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2264      	movs	r2, #100	; 0x64
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	1acb      	subs	r3, r1, r3
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800490a:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <UART_SetConfig+0x2d4>)
 800490c:	fba3 2302 	umull	r2, r3, r3, r2
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004918:	441c      	add	r4, r3
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004924:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	63b9      	str	r1, [r7, #56]	; 0x38
 8004934:	415b      	adcs	r3, r3
 8004936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800493c:	4641      	mov	r1, r8
 800493e:	1851      	adds	r1, r2, r1
 8004940:	6339      	str	r1, [r7, #48]	; 0x30
 8004942:	4649      	mov	r1, r9
 8004944:	414b      	adcs	r3, r1
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004954:	4659      	mov	r1, fp
 8004956:	00cb      	lsls	r3, r1, #3
 8004958:	4651      	mov	r1, sl
 800495a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495e:	4651      	mov	r1, sl
 8004960:	00ca      	lsls	r2, r1, #3
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	4603      	mov	r3, r0
 8004968:	4642      	mov	r2, r8
 800496a:	189b      	adds	r3, r3, r2
 800496c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004970:	464b      	mov	r3, r9
 8004972:	460a      	mov	r2, r1
 8004974:	eb42 0303 	adc.w	r3, r2, r3
 8004978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004988:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800498c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004990:	460b      	mov	r3, r1
 8004992:	18db      	adds	r3, r3, r3
 8004994:	62bb      	str	r3, [r7, #40]	; 0x28
 8004996:	4613      	mov	r3, r2
 8004998:	eb42 0303 	adc.w	r3, r2, r3
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800499e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049a6:	f7fc f9a1 	bl	8000cec <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <UART_SetConfig+0x2d4>)
 80049b0:	fba3 1302 	umull	r1, r3, r3, r2
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	2164      	movs	r1, #100	; 0x64
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	3332      	adds	r3, #50	; 0x32
 80049c2:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <UART_SetConfig+0x2d4>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	f003 0207 	and.w	r2, r3, #7
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4422      	add	r2, r4
 80049d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049d8:	e106      	b.n	8004be8 <UART_SetConfig+0x4d8>
 80049da:	bf00      	nop
 80049dc:	40011000 	.word	0x40011000
 80049e0:	40011400 	.word	0x40011400
 80049e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049fa:	4642      	mov	r2, r8
 80049fc:	464b      	mov	r3, r9
 80049fe:	1891      	adds	r1, r2, r2
 8004a00:	6239      	str	r1, [r7, #32]
 8004a02:	415b      	adcs	r3, r3
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	1854      	adds	r4, r2, r1
 8004a0e:	4649      	mov	r1, r9
 8004a10:	eb43 0501 	adc.w	r5, r3, r1
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	00eb      	lsls	r3, r5, #3
 8004a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a22:	00e2      	lsls	r2, r4, #3
 8004a24:	4614      	mov	r4, r2
 8004a26:	461d      	mov	r5, r3
 8004a28:	4643      	mov	r3, r8
 8004a2a:	18e3      	adds	r3, r4, r3
 8004a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a30:	464b      	mov	r3, r9
 8004a32:	eb45 0303 	adc.w	r3, r5, r3
 8004a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a56:	4629      	mov	r1, r5
 8004a58:	008b      	lsls	r3, r1, #2
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a60:	4621      	mov	r1, r4
 8004a62:	008a      	lsls	r2, r1, #2
 8004a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a68:	f7fc f940 	bl	8000cec <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4b60      	ldr	r3, [pc, #384]	; (8004bf4 <UART_SetConfig+0x4e4>)
 8004a72:	fba3 2302 	umull	r2, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	011c      	lsls	r4, r3, #4
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	1891      	adds	r1, r2, r2
 8004a92:	61b9      	str	r1, [r7, #24]
 8004a94:	415b      	adcs	r3, r3
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	1851      	adds	r1, r2, r1
 8004aa0:	6139      	str	r1, [r7, #16]
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	414b      	adcs	r3, r1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	00cb      	lsls	r3, r1, #3
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004abe:	4651      	mov	r1, sl
 8004ac0:	00ca      	lsls	r2, r1, #3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4642      	mov	r2, r8
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	460a      	mov	r2, r1
 8004ad4:	eb42 0303 	adc.w	r3, r2, r3
 8004ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004af4:	4649      	mov	r1, r9
 8004af6:	008b      	lsls	r3, r1, #2
 8004af8:	4641      	mov	r1, r8
 8004afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004afe:	4641      	mov	r1, r8
 8004b00:	008a      	lsls	r2, r1, #2
 8004b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b06:	f7fc f8f1 	bl	8000cec <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <UART_SetConfig+0x4e4>)
 8004b12:	fba3 2301 	umull	r2, r3, r3, r1
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	2264      	movs	r2, #100	; 0x64
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	1acb      	subs	r3, r1, r3
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	3332      	adds	r3, #50	; 0x32
 8004b24:	4a33      	ldr	r2, [pc, #204]	; (8004bf4 <UART_SetConfig+0x4e4>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b30:	441c      	add	r4, r3
 8004b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b36:	2200      	movs	r2, #0
 8004b38:	673b      	str	r3, [r7, #112]	; 0x70
 8004b3a:	677a      	str	r2, [r7, #116]	; 0x74
 8004b3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b82:	464b      	mov	r3, r9
 8004b84:	460a      	mov	r2, r1
 8004b86:	eb42 0303 	adc.w	r3, r2, r3
 8004b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	663b      	str	r3, [r7, #96]	; 0x60
 8004b96:	667a      	str	r2, [r7, #100]	; 0x64
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	008b      	lsls	r3, r1, #2
 8004ba8:	4641      	mov	r1, r8
 8004baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bae:	4641      	mov	r1, r8
 8004bb0:	008a      	lsls	r2, r1, #2
 8004bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bb6:	f7fc f899 	bl	8000cec <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <UART_SetConfig+0x4e4>)
 8004bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	2164      	movs	r1, #100	; 0x64
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	3332      	adds	r3, #50	; 0x32
 8004bd2:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <UART_SetConfig+0x4e4>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	f003 020f 	and.w	r2, r3, #15
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4422      	add	r2, r4
 8004be6:	609a      	str	r2, [r3, #8]
}
 8004be8:	bf00      	nop
 8004bea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf4:	51eb851f 	.word	0x51eb851f

08004bf8 <gcvt>:
 8004bf8:	b530      	push	{r4, r5, lr}
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	460c      	mov	r4, r1
 8004c00:	4605      	mov	r5, r0
 8004c02:	2300      	movs	r3, #0
 8004c04:	ec51 0b10 	vmov	r0, r1, d0
 8004c08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004c0c:	f7fb ff7e 	bl	8000b0c <__aeabi_dcmplt>
 8004c10:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004c14:	4622      	mov	r2, r4
 8004c16:	b118      	cbz	r0, 8004c20 <gcvt+0x28>
 8004c18:	232d      	movs	r3, #45	; 0x2d
 8004c1a:	f802 3b01 	strb.w	r3, [r2], #1
 8004c1e:	3d01      	subs	r5, #1
 8004c20:	2300      	movs	r3, #0
 8004c22:	4806      	ldr	r0, [pc, #24]	; (8004c3c <gcvt+0x44>)
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4629      	mov	r1, r5
 8004c28:	2367      	movs	r3, #103	; 0x67
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	f000 fafc 	bl	8005228 <_gcvt>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	bf14      	ite	ne
 8004c34:	4620      	movne	r0, r4
 8004c36:	2000      	moveq	r0, #0
 8004c38:	b005      	add	sp, #20
 8004c3a:	bd30      	pop	{r4, r5, pc}
 8004c3c:	2000006c 	.word	0x2000006c

08004c40 <std>:
 8004c40:	2300      	movs	r3, #0
 8004c42:	b510      	push	{r4, lr}
 8004c44:	4604      	mov	r4, r0
 8004c46:	e9c0 3300 	strd	r3, r3, [r0]
 8004c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c4e:	6083      	str	r3, [r0, #8]
 8004c50:	8181      	strh	r1, [r0, #12]
 8004c52:	6643      	str	r3, [r0, #100]	; 0x64
 8004c54:	81c2      	strh	r2, [r0, #14]
 8004c56:	6183      	str	r3, [r0, #24]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	305c      	adds	r0, #92	; 0x5c
 8004c5e:	f000 f8f4 	bl	8004e4a <memset>
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <std+0x58>)
 8004c64:	6263      	str	r3, [r4, #36]	; 0x24
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <std+0x5c>)
 8004c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <std+0x60>)
 8004c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <std+0x64>)
 8004c70:	6323      	str	r3, [r4, #48]	; 0x30
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <std+0x68>)
 8004c74:	6224      	str	r4, [r4, #32]
 8004c76:	429c      	cmp	r4, r3
 8004c78:	d006      	beq.n	8004c88 <std+0x48>
 8004c7a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c7e:	4294      	cmp	r4, r2
 8004c80:	d002      	beq.n	8004c88 <std+0x48>
 8004c82:	33d0      	adds	r3, #208	; 0xd0
 8004c84:	429c      	cmp	r4, r3
 8004c86:	d105      	bne.n	8004c94 <std+0x54>
 8004c88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c90:	f000 b954 	b.w	8004f3c <__retarget_lock_init_recursive>
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	bf00      	nop
 8004c98:	08004dc5 	.word	0x08004dc5
 8004c9c:	08004de7 	.word	0x08004de7
 8004ca0:	08004e1f 	.word	0x08004e1f
 8004ca4:	08004e43 	.word	0x08004e43
 8004ca8:	20000170 	.word	0x20000170

08004cac <stdio_exit_handler>:
 8004cac:	4a02      	ldr	r2, [pc, #8]	; (8004cb8 <stdio_exit_handler+0xc>)
 8004cae:	4903      	ldr	r1, [pc, #12]	; (8004cbc <stdio_exit_handler+0x10>)
 8004cb0:	4803      	ldr	r0, [pc, #12]	; (8004cc0 <stdio_exit_handler+0x14>)
 8004cb2:	f000 b869 	b.w	8004d88 <_fwalk_sglue>
 8004cb6:	bf00      	nop
 8004cb8:	20000014 	.word	0x20000014
 8004cbc:	080054b5 	.word	0x080054b5
 8004cc0:	20000020 	.word	0x20000020

08004cc4 <cleanup_stdio>:
 8004cc4:	6841      	ldr	r1, [r0, #4]
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <cleanup_stdio+0x34>)
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	4604      	mov	r4, r0
 8004cce:	d001      	beq.n	8004cd4 <cleanup_stdio+0x10>
 8004cd0:	f000 fbf0 	bl	80054b4 <_fflush_r>
 8004cd4:	68a1      	ldr	r1, [r4, #8]
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <cleanup_stdio+0x38>)
 8004cd8:	4299      	cmp	r1, r3
 8004cda:	d002      	beq.n	8004ce2 <cleanup_stdio+0x1e>
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 fbe9 	bl	80054b4 <_fflush_r>
 8004ce2:	68e1      	ldr	r1, [r4, #12]
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <cleanup_stdio+0x3c>)
 8004ce6:	4299      	cmp	r1, r3
 8004ce8:	d004      	beq.n	8004cf4 <cleanup_stdio+0x30>
 8004cea:	4620      	mov	r0, r4
 8004cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf0:	f000 bbe0 	b.w	80054b4 <_fflush_r>
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000170 	.word	0x20000170
 8004cfc:	200001d8 	.word	0x200001d8
 8004d00:	20000240 	.word	0x20000240

08004d04 <global_stdio_init.part.0>:
 8004d04:	b510      	push	{r4, lr}
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <global_stdio_init.part.0+0x30>)
 8004d08:	4c0b      	ldr	r4, [pc, #44]	; (8004d38 <global_stdio_init.part.0+0x34>)
 8004d0a:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <global_stdio_init.part.0+0x38>)
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	4620      	mov	r0, r4
 8004d10:	2200      	movs	r2, #0
 8004d12:	2104      	movs	r1, #4
 8004d14:	f7ff ff94 	bl	8004c40 <std>
 8004d18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	2109      	movs	r1, #9
 8004d20:	f7ff ff8e 	bl	8004c40 <std>
 8004d24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d28:	2202      	movs	r2, #2
 8004d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d2e:	2112      	movs	r1, #18
 8004d30:	f7ff bf86 	b.w	8004c40 <std>
 8004d34:	200002a8 	.word	0x200002a8
 8004d38:	20000170 	.word	0x20000170
 8004d3c:	08004cad 	.word	0x08004cad

08004d40 <__sfp_lock_acquire>:
 8004d40:	4801      	ldr	r0, [pc, #4]	; (8004d48 <__sfp_lock_acquire+0x8>)
 8004d42:	f000 b8fc 	b.w	8004f3e <__retarget_lock_acquire_recursive>
 8004d46:	bf00      	nop
 8004d48:	200002b1 	.word	0x200002b1

08004d4c <__sfp_lock_release>:
 8004d4c:	4801      	ldr	r0, [pc, #4]	; (8004d54 <__sfp_lock_release+0x8>)
 8004d4e:	f000 b8f7 	b.w	8004f40 <__retarget_lock_release_recursive>
 8004d52:	bf00      	nop
 8004d54:	200002b1 	.word	0x200002b1

08004d58 <__sinit>:
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	f7ff fff0 	bl	8004d40 <__sfp_lock_acquire>
 8004d60:	6a23      	ldr	r3, [r4, #32]
 8004d62:	b11b      	cbz	r3, 8004d6c <__sinit+0x14>
 8004d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d68:	f7ff bff0 	b.w	8004d4c <__sfp_lock_release>
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <__sinit+0x28>)
 8004d6e:	6223      	str	r3, [r4, #32]
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <__sinit+0x2c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f5      	bne.n	8004d64 <__sinit+0xc>
 8004d78:	f7ff ffc4 	bl	8004d04 <global_stdio_init.part.0>
 8004d7c:	e7f2      	b.n	8004d64 <__sinit+0xc>
 8004d7e:	bf00      	nop
 8004d80:	08004cc5 	.word	0x08004cc5
 8004d84:	200002a8 	.word	0x200002a8

08004d88 <_fwalk_sglue>:
 8004d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	4688      	mov	r8, r1
 8004d90:	4614      	mov	r4, r2
 8004d92:	2600      	movs	r6, #0
 8004d94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d98:	f1b9 0901 	subs.w	r9, r9, #1
 8004d9c:	d505      	bpl.n	8004daa <_fwalk_sglue+0x22>
 8004d9e:	6824      	ldr	r4, [r4, #0]
 8004da0:	2c00      	cmp	r4, #0
 8004da2:	d1f7      	bne.n	8004d94 <_fwalk_sglue+0xc>
 8004da4:	4630      	mov	r0, r6
 8004da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004daa:	89ab      	ldrh	r3, [r5, #12]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d907      	bls.n	8004dc0 <_fwalk_sglue+0x38>
 8004db0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004db4:	3301      	adds	r3, #1
 8004db6:	d003      	beq.n	8004dc0 <_fwalk_sglue+0x38>
 8004db8:	4629      	mov	r1, r5
 8004dba:	4638      	mov	r0, r7
 8004dbc:	47c0      	blx	r8
 8004dbe:	4306      	orrs	r6, r0
 8004dc0:	3568      	adds	r5, #104	; 0x68
 8004dc2:	e7e9      	b.n	8004d98 <_fwalk_sglue+0x10>

08004dc4 <__sread>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dcc:	f000 f868 	bl	8004ea0 <_read_r>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	bfab      	itete	ge
 8004dd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004dd8:	181b      	addge	r3, r3, r0
 8004dda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dde:	bfac      	ite	ge
 8004de0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004de2:	81a3      	strhlt	r3, [r4, #12]
 8004de4:	bd10      	pop	{r4, pc}

08004de6 <__swrite>:
 8004de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dea:	461f      	mov	r7, r3
 8004dec:	898b      	ldrh	r3, [r1, #12]
 8004dee:	05db      	lsls	r3, r3, #23
 8004df0:	4605      	mov	r5, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	4616      	mov	r6, r2
 8004df6:	d505      	bpl.n	8004e04 <__swrite+0x1e>
 8004df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f000 f83c 	bl	8004e7c <_lseek_r>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	4632      	mov	r2, r6
 8004e12:	463b      	mov	r3, r7
 8004e14:	4628      	mov	r0, r5
 8004e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1a:	f000 b853 	b.w	8004ec4 <_write_r>

08004e1e <__sseek>:
 8004e1e:	b510      	push	{r4, lr}
 8004e20:	460c      	mov	r4, r1
 8004e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e26:	f000 f829 	bl	8004e7c <_lseek_r>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	bf15      	itete	ne
 8004e30:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e3a:	81a3      	strheq	r3, [r4, #12]
 8004e3c:	bf18      	it	ne
 8004e3e:	81a3      	strhne	r3, [r4, #12]
 8004e40:	bd10      	pop	{r4, pc}

08004e42 <__sclose>:
 8004e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e46:	f000 b809 	b.w	8004e5c <_close_r>

08004e4a <memset>:
 8004e4a:	4402      	add	r2, r0
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d100      	bne.n	8004e54 <memset+0xa>
 8004e52:	4770      	bx	lr
 8004e54:	f803 1b01 	strb.w	r1, [r3], #1
 8004e58:	e7f9      	b.n	8004e4e <memset+0x4>
	...

08004e5c <_close_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4d06      	ldr	r5, [pc, #24]	; (8004e78 <_close_r+0x1c>)
 8004e60:	2300      	movs	r3, #0
 8004e62:	4604      	mov	r4, r0
 8004e64:	4608      	mov	r0, r1
 8004e66:	602b      	str	r3, [r5, #0]
 8004e68:	f7fd f971 	bl	800214e <_close>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d102      	bne.n	8004e76 <_close_r+0x1a>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	b103      	cbz	r3, 8004e76 <_close_r+0x1a>
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	200002ac 	.word	0x200002ac

08004e7c <_lseek_r>:
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	4d07      	ldr	r5, [pc, #28]	; (8004e9c <_lseek_r+0x20>)
 8004e80:	4604      	mov	r4, r0
 8004e82:	4608      	mov	r0, r1
 8004e84:	4611      	mov	r1, r2
 8004e86:	2200      	movs	r2, #0
 8004e88:	602a      	str	r2, [r5, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f7fd f986 	bl	800219c <_lseek>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_lseek_r+0x1e>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_lseek_r+0x1e>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	200002ac 	.word	0x200002ac

08004ea0 <_read_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4d07      	ldr	r5, [pc, #28]	; (8004ec0 <_read_r+0x20>)
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	2200      	movs	r2, #0
 8004eac:	602a      	str	r2, [r5, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f7fd f914 	bl	80020dc <_read>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_read_r+0x1e>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_read_r+0x1e>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	200002ac 	.word	0x200002ac

08004ec4 <_write_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d07      	ldr	r5, [pc, #28]	; (8004ee4 <_write_r+0x20>)
 8004ec8:	4604      	mov	r4, r0
 8004eca:	4608      	mov	r0, r1
 8004ecc:	4611      	mov	r1, r2
 8004ece:	2200      	movs	r2, #0
 8004ed0:	602a      	str	r2, [r5, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7fd f91f 	bl	8002116 <_write>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_write_r+0x1e>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_write_r+0x1e>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	200002ac 	.word	0x200002ac

08004ee8 <__errno>:
 8004ee8:	4b01      	ldr	r3, [pc, #4]	; (8004ef0 <__errno+0x8>)
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	2000006c 	.word	0x2000006c

08004ef4 <__libc_init_array>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4d0d      	ldr	r5, [pc, #52]	; (8004f2c <__libc_init_array+0x38>)
 8004ef8:	4c0d      	ldr	r4, [pc, #52]	; (8004f30 <__libc_init_array+0x3c>)
 8004efa:	1b64      	subs	r4, r4, r5
 8004efc:	10a4      	asrs	r4, r4, #2
 8004efe:	2600      	movs	r6, #0
 8004f00:	42a6      	cmp	r6, r4
 8004f02:	d109      	bne.n	8004f18 <__libc_init_array+0x24>
 8004f04:	4d0b      	ldr	r5, [pc, #44]	; (8004f34 <__libc_init_array+0x40>)
 8004f06:	4c0c      	ldr	r4, [pc, #48]	; (8004f38 <__libc_init_array+0x44>)
 8004f08:	f002 f9be 	bl	8007288 <_init>
 8004f0c:	1b64      	subs	r4, r4, r5
 8004f0e:	10a4      	asrs	r4, r4, #2
 8004f10:	2600      	movs	r6, #0
 8004f12:	42a6      	cmp	r6, r4
 8004f14:	d105      	bne.n	8004f22 <__libc_init_array+0x2e>
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1c:	4798      	blx	r3
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7ee      	b.n	8004f00 <__libc_init_array+0xc>
 8004f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f26:	4798      	blx	r3
 8004f28:	3601      	adds	r6, #1
 8004f2a:	e7f2      	b.n	8004f12 <__libc_init_array+0x1e>
 8004f2c:	0800751c 	.word	0x0800751c
 8004f30:	0800751c 	.word	0x0800751c
 8004f34:	0800751c 	.word	0x0800751c
 8004f38:	08007520 	.word	0x08007520

08004f3c <__retarget_lock_init_recursive>:
 8004f3c:	4770      	bx	lr

08004f3e <__retarget_lock_acquire_recursive>:
 8004f3e:	4770      	bx	lr

08004f40 <__retarget_lock_release_recursive>:
 8004f40:	4770      	bx	lr
	...

08004f44 <_free_r>:
 8004f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f46:	2900      	cmp	r1, #0
 8004f48:	d044      	beq.n	8004fd4 <_free_r+0x90>
 8004f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f4e:	9001      	str	r0, [sp, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f1a1 0404 	sub.w	r4, r1, #4
 8004f56:	bfb8      	it	lt
 8004f58:	18e4      	addlt	r4, r4, r3
 8004f5a:	f000 f8df 	bl	800511c <__malloc_lock>
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <_free_r+0x94>)
 8004f60:	9801      	ldr	r0, [sp, #4]
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	b933      	cbnz	r3, 8004f74 <_free_r+0x30>
 8004f66:	6063      	str	r3, [r4, #4]
 8004f68:	6014      	str	r4, [r2, #0]
 8004f6a:	b003      	add	sp, #12
 8004f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f70:	f000 b8da 	b.w	8005128 <__malloc_unlock>
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	d908      	bls.n	8004f8a <_free_r+0x46>
 8004f78:	6825      	ldr	r5, [r4, #0]
 8004f7a:	1961      	adds	r1, r4, r5
 8004f7c:	428b      	cmp	r3, r1
 8004f7e:	bf01      	itttt	eq
 8004f80:	6819      	ldreq	r1, [r3, #0]
 8004f82:	685b      	ldreq	r3, [r3, #4]
 8004f84:	1949      	addeq	r1, r1, r5
 8004f86:	6021      	streq	r1, [r4, #0]
 8004f88:	e7ed      	b.n	8004f66 <_free_r+0x22>
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	b10b      	cbz	r3, 8004f94 <_free_r+0x50>
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	d9fa      	bls.n	8004f8a <_free_r+0x46>
 8004f94:	6811      	ldr	r1, [r2, #0]
 8004f96:	1855      	adds	r5, r2, r1
 8004f98:	42a5      	cmp	r5, r4
 8004f9a:	d10b      	bne.n	8004fb4 <_free_r+0x70>
 8004f9c:	6824      	ldr	r4, [r4, #0]
 8004f9e:	4421      	add	r1, r4
 8004fa0:	1854      	adds	r4, r2, r1
 8004fa2:	42a3      	cmp	r3, r4
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	d1e0      	bne.n	8004f6a <_free_r+0x26>
 8004fa8:	681c      	ldr	r4, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	6053      	str	r3, [r2, #4]
 8004fae:	440c      	add	r4, r1
 8004fb0:	6014      	str	r4, [r2, #0]
 8004fb2:	e7da      	b.n	8004f6a <_free_r+0x26>
 8004fb4:	d902      	bls.n	8004fbc <_free_r+0x78>
 8004fb6:	230c      	movs	r3, #12
 8004fb8:	6003      	str	r3, [r0, #0]
 8004fba:	e7d6      	b.n	8004f6a <_free_r+0x26>
 8004fbc:	6825      	ldr	r5, [r4, #0]
 8004fbe:	1961      	adds	r1, r4, r5
 8004fc0:	428b      	cmp	r3, r1
 8004fc2:	bf04      	itt	eq
 8004fc4:	6819      	ldreq	r1, [r3, #0]
 8004fc6:	685b      	ldreq	r3, [r3, #4]
 8004fc8:	6063      	str	r3, [r4, #4]
 8004fca:	bf04      	itt	eq
 8004fcc:	1949      	addeq	r1, r1, r5
 8004fce:	6021      	streq	r1, [r4, #0]
 8004fd0:	6054      	str	r4, [r2, #4]
 8004fd2:	e7ca      	b.n	8004f6a <_free_r+0x26>
 8004fd4:	b003      	add	sp, #12
 8004fd6:	bd30      	pop	{r4, r5, pc}
 8004fd8:	200002b4 	.word	0x200002b4

08004fdc <sbrk_aligned>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	4e0e      	ldr	r6, [pc, #56]	; (8005018 <sbrk_aligned+0x3c>)
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	6831      	ldr	r1, [r6, #0]
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	b911      	cbnz	r1, 8004fee <sbrk_aligned+0x12>
 8004fe8:	f000 fa8c 	bl	8005504 <_sbrk_r>
 8004fec:	6030      	str	r0, [r6, #0]
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	f000 fa87 	bl	8005504 <_sbrk_r>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	d00a      	beq.n	8005010 <sbrk_aligned+0x34>
 8004ffa:	1cc4      	adds	r4, r0, #3
 8004ffc:	f024 0403 	bic.w	r4, r4, #3
 8005000:	42a0      	cmp	r0, r4
 8005002:	d007      	beq.n	8005014 <sbrk_aligned+0x38>
 8005004:	1a21      	subs	r1, r4, r0
 8005006:	4628      	mov	r0, r5
 8005008:	f000 fa7c 	bl	8005504 <_sbrk_r>
 800500c:	3001      	adds	r0, #1
 800500e:	d101      	bne.n	8005014 <sbrk_aligned+0x38>
 8005010:	f04f 34ff 	mov.w	r4, #4294967295
 8005014:	4620      	mov	r0, r4
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	200002b8 	.word	0x200002b8

0800501c <_malloc_r>:
 800501c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005020:	1ccd      	adds	r5, r1, #3
 8005022:	f025 0503 	bic.w	r5, r5, #3
 8005026:	3508      	adds	r5, #8
 8005028:	2d0c      	cmp	r5, #12
 800502a:	bf38      	it	cc
 800502c:	250c      	movcc	r5, #12
 800502e:	2d00      	cmp	r5, #0
 8005030:	4607      	mov	r7, r0
 8005032:	db01      	blt.n	8005038 <_malloc_r+0x1c>
 8005034:	42a9      	cmp	r1, r5
 8005036:	d905      	bls.n	8005044 <_malloc_r+0x28>
 8005038:	230c      	movs	r3, #12
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	2600      	movs	r6, #0
 800503e:	4630      	mov	r0, r6
 8005040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005044:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005118 <_malloc_r+0xfc>
 8005048:	f000 f868 	bl	800511c <__malloc_lock>
 800504c:	f8d8 3000 	ldr.w	r3, [r8]
 8005050:	461c      	mov	r4, r3
 8005052:	bb5c      	cbnz	r4, 80050ac <_malloc_r+0x90>
 8005054:	4629      	mov	r1, r5
 8005056:	4638      	mov	r0, r7
 8005058:	f7ff ffc0 	bl	8004fdc <sbrk_aligned>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	4604      	mov	r4, r0
 8005060:	d155      	bne.n	800510e <_malloc_r+0xf2>
 8005062:	f8d8 4000 	ldr.w	r4, [r8]
 8005066:	4626      	mov	r6, r4
 8005068:	2e00      	cmp	r6, #0
 800506a:	d145      	bne.n	80050f8 <_malloc_r+0xdc>
 800506c:	2c00      	cmp	r4, #0
 800506e:	d048      	beq.n	8005102 <_malloc_r+0xe6>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	4631      	mov	r1, r6
 8005074:	4638      	mov	r0, r7
 8005076:	eb04 0903 	add.w	r9, r4, r3
 800507a:	f000 fa43 	bl	8005504 <_sbrk_r>
 800507e:	4581      	cmp	r9, r0
 8005080:	d13f      	bne.n	8005102 <_malloc_r+0xe6>
 8005082:	6821      	ldr	r1, [r4, #0]
 8005084:	1a6d      	subs	r5, r5, r1
 8005086:	4629      	mov	r1, r5
 8005088:	4638      	mov	r0, r7
 800508a:	f7ff ffa7 	bl	8004fdc <sbrk_aligned>
 800508e:	3001      	adds	r0, #1
 8005090:	d037      	beq.n	8005102 <_malloc_r+0xe6>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	442b      	add	r3, r5
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	f8d8 3000 	ldr.w	r3, [r8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d038      	beq.n	8005112 <_malloc_r+0xf6>
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	42a2      	cmp	r2, r4
 80050a4:	d12b      	bne.n	80050fe <_malloc_r+0xe2>
 80050a6:	2200      	movs	r2, #0
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	e00f      	b.n	80050cc <_malloc_r+0xb0>
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	1b52      	subs	r2, r2, r5
 80050b0:	d41f      	bmi.n	80050f2 <_malloc_r+0xd6>
 80050b2:	2a0b      	cmp	r2, #11
 80050b4:	d917      	bls.n	80050e6 <_malloc_r+0xca>
 80050b6:	1961      	adds	r1, r4, r5
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	6025      	str	r5, [r4, #0]
 80050bc:	bf18      	it	ne
 80050be:	6059      	strne	r1, [r3, #4]
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	bf08      	it	eq
 80050c4:	f8c8 1000 	streq.w	r1, [r8]
 80050c8:	5162      	str	r2, [r4, r5]
 80050ca:	604b      	str	r3, [r1, #4]
 80050cc:	4638      	mov	r0, r7
 80050ce:	f104 060b 	add.w	r6, r4, #11
 80050d2:	f000 f829 	bl	8005128 <__malloc_unlock>
 80050d6:	f026 0607 	bic.w	r6, r6, #7
 80050da:	1d23      	adds	r3, r4, #4
 80050dc:	1af2      	subs	r2, r6, r3
 80050de:	d0ae      	beq.n	800503e <_malloc_r+0x22>
 80050e0:	1b9b      	subs	r3, r3, r6
 80050e2:	50a3      	str	r3, [r4, r2]
 80050e4:	e7ab      	b.n	800503e <_malloc_r+0x22>
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	6862      	ldr	r2, [r4, #4]
 80050ea:	d1dd      	bne.n	80050a8 <_malloc_r+0x8c>
 80050ec:	f8c8 2000 	str.w	r2, [r8]
 80050f0:	e7ec      	b.n	80050cc <_malloc_r+0xb0>
 80050f2:	4623      	mov	r3, r4
 80050f4:	6864      	ldr	r4, [r4, #4]
 80050f6:	e7ac      	b.n	8005052 <_malloc_r+0x36>
 80050f8:	4634      	mov	r4, r6
 80050fa:	6876      	ldr	r6, [r6, #4]
 80050fc:	e7b4      	b.n	8005068 <_malloc_r+0x4c>
 80050fe:	4613      	mov	r3, r2
 8005100:	e7cc      	b.n	800509c <_malloc_r+0x80>
 8005102:	230c      	movs	r3, #12
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	4638      	mov	r0, r7
 8005108:	f000 f80e 	bl	8005128 <__malloc_unlock>
 800510c:	e797      	b.n	800503e <_malloc_r+0x22>
 800510e:	6025      	str	r5, [r4, #0]
 8005110:	e7dc      	b.n	80050cc <_malloc_r+0xb0>
 8005112:	605b      	str	r3, [r3, #4]
 8005114:	deff      	udf	#255	; 0xff
 8005116:	bf00      	nop
 8005118:	200002b4 	.word	0x200002b4

0800511c <__malloc_lock>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__malloc_lock+0x8>)
 800511e:	f7ff bf0e 	b.w	8004f3e <__retarget_lock_acquire_recursive>
 8005122:	bf00      	nop
 8005124:	200002b0 	.word	0x200002b0

08005128 <__malloc_unlock>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__malloc_unlock+0x8>)
 800512a:	f7ff bf09 	b.w	8004f40 <__retarget_lock_release_recursive>
 800512e:	bf00      	nop
 8005130:	200002b0 	.word	0x200002b0

08005134 <print_e>:
 8005134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005136:	b087      	sub	sp, #28
 8005138:	ec43 2b10 	vmov	d0, r2, r3
 800513c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800513e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8005142:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005144:	ab04      	add	r3, sp, #16
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	ab03      	add	r3, sp, #12
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	1c62      	adds	r2, r4, #1
 800514e:	ab05      	add	r3, sp, #20
 8005150:	460f      	mov	r7, r1
 8005152:	2102      	movs	r1, #2
 8005154:	f000 fa78 	bl	8005648 <_dtoa_r>
 8005158:	9a05      	ldr	r2, [sp, #20]
 800515a:	f242 730f 	movw	r3, #9999	; 0x270f
 800515e:	429a      	cmp	r2, r3
 8005160:	d105      	bne.n	800516e <print_e+0x3a>
 8005162:	4601      	mov	r1, r0
 8005164:	4638      	mov	r0, r7
 8005166:	f000 f9dd 	bl	8005524 <strcpy>
 800516a:	b007      	add	sp, #28
 800516c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516e:	463b      	mov	r3, r7
 8005170:	7801      	ldrb	r1, [r0, #0]
 8005172:	f803 1b01 	strb.w	r1, [r3], #1
 8005176:	2c00      	cmp	r4, #0
 8005178:	bfc8      	it	gt
 800517a:	2501      	movgt	r5, #1
 800517c:	212e      	movs	r1, #46	; 0x2e
 800517e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8005182:	b10f      	cbz	r7, 8005188 <print_e+0x54>
 8005184:	2c00      	cmp	r4, #0
 8005186:	dc37      	bgt.n	80051f8 <print_e+0xc4>
 8005188:	2e67      	cmp	r6, #103	; 0x67
 800518a:	d046      	beq.n	800521a <print_e+0xe6>
 800518c:	2e47      	cmp	r6, #71	; 0x47
 800518e:	d046      	beq.n	800521e <print_e+0xea>
 8005190:	212e      	movs	r1, #46	; 0x2e
 8005192:	2030      	movs	r0, #48	; 0x30
 8005194:	2c00      	cmp	r4, #0
 8005196:	dc38      	bgt.n	800520a <print_e+0xd6>
 8005198:	1e51      	subs	r1, r2, #1
 800519a:	2900      	cmp	r1, #0
 800519c:	bfb8      	it	lt
 800519e:	f1c2 0201 	rsblt	r2, r2, #1
 80051a2:	4618      	mov	r0, r3
 80051a4:	9105      	str	r1, [sp, #20]
 80051a6:	bfac      	ite	ge
 80051a8:	222b      	movge	r2, #43	; 0x2b
 80051aa:	9205      	strlt	r2, [sp, #20]
 80051ac:	f800 6b02 	strb.w	r6, [r0], #2
 80051b0:	bfa8      	it	ge
 80051b2:	705a      	strbge	r2, [r3, #1]
 80051b4:	9a05      	ldr	r2, [sp, #20]
 80051b6:	bfbc      	itt	lt
 80051b8:	212d      	movlt	r1, #45	; 0x2d
 80051ba:	7059      	strblt	r1, [r3, #1]
 80051bc:	2a63      	cmp	r2, #99	; 0x63
 80051be:	dd0b      	ble.n	80051d8 <print_e+0xa4>
 80051c0:	2164      	movs	r1, #100	; 0x64
 80051c2:	fb92 f1f1 	sdiv	r1, r2, r1
 80051c6:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80051ca:	1cd8      	adds	r0, r3, #3
 80051cc:	709c      	strb	r4, [r3, #2]
 80051ce:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80051d2:	fb03 2201 	mla	r2, r3, r1, r2
 80051d6:	9205      	str	r2, [sp, #20]
 80051d8:	9b05      	ldr	r3, [sp, #20]
 80051da:	220a      	movs	r2, #10
 80051dc:	fb93 f2f2 	sdiv	r2, r3, r2
 80051e0:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80051e4:	7001      	strb	r1, [r0, #0]
 80051e6:	f06f 0109 	mvn.w	r1, #9
 80051ea:	fb01 3302 	mla	r3, r1, r2, r3
 80051ee:	3330      	adds	r3, #48	; 0x30
 80051f0:	7043      	strb	r3, [r0, #1]
 80051f2:	2300      	movs	r3, #0
 80051f4:	7083      	strb	r3, [r0, #2]
 80051f6:	e7b8      	b.n	800516a <print_e+0x36>
 80051f8:	b10d      	cbz	r5, 80051fe <print_e+0xca>
 80051fa:	f803 1b01 	strb.w	r1, [r3], #1
 80051fe:	7805      	ldrb	r5, [r0, #0]
 8005200:	f803 5b01 	strb.w	r5, [r3], #1
 8005204:	3c01      	subs	r4, #1
 8005206:	2500      	movs	r5, #0
 8005208:	e7b9      	b.n	800517e <print_e+0x4a>
 800520a:	b10d      	cbz	r5, 8005210 <print_e+0xdc>
 800520c:	f803 1b01 	strb.w	r1, [r3], #1
 8005210:	f803 0b01 	strb.w	r0, [r3], #1
 8005214:	3c01      	subs	r4, #1
 8005216:	2500      	movs	r5, #0
 8005218:	e7bc      	b.n	8005194 <print_e+0x60>
 800521a:	2665      	movs	r6, #101	; 0x65
 800521c:	e7bc      	b.n	8005198 <print_e+0x64>
 800521e:	2645      	movs	r6, #69	; 0x45
 8005220:	e7ba      	b.n	8005198 <print_e+0x64>
 8005222:	0000      	movs	r0, r0
 8005224:	0000      	movs	r0, r0
	...

08005228 <_gcvt>:
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	ec55 4b10 	vmov	r4, r5, d0
 8005230:	b088      	sub	sp, #32
 8005232:	4681      	mov	r9, r0
 8005234:	4688      	mov	r8, r1
 8005236:	4616      	mov	r6, r2
 8005238:	469a      	mov	sl, r3
 800523a:	ee10 0a10 	vmov	r0, s0
 800523e:	2200      	movs	r2, #0
 8005240:	2300      	movs	r3, #0
 8005242:	4629      	mov	r1, r5
 8005244:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005246:	f7fb fc61 	bl	8000b0c <__aeabi_dcmplt>
 800524a:	b110      	cbz	r0, 8005252 <_gcvt+0x2a>
 800524c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005250:	461d      	mov	r5, r3
 8005252:	2200      	movs	r2, #0
 8005254:	2300      	movs	r3, #0
 8005256:	4620      	mov	r0, r4
 8005258:	4629      	mov	r1, r5
 800525a:	f7fb fc4d 	bl	8000af8 <__aeabi_dcmpeq>
 800525e:	b138      	cbz	r0, 8005270 <_gcvt+0x48>
 8005260:	2330      	movs	r3, #48	; 0x30
 8005262:	7033      	strb	r3, [r6, #0]
 8005264:	2300      	movs	r3, #0
 8005266:	7073      	strb	r3, [r6, #1]
 8005268:	4630      	mov	r0, r6
 800526a:	b008      	add	sp, #32
 800526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005270:	a34b      	add	r3, pc, #300	; (adr r3, 80053a0 <_gcvt+0x178>)
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fb fc51 	bl	8000b20 <__aeabi_dcmple>
 800527e:	b158      	cbz	r0, 8005298 <_gcvt+0x70>
 8005280:	f108 33ff 	add.w	r3, r8, #4294967295
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	e9cd a701 	strd	sl, r7, [sp, #4]
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	4631      	mov	r1, r6
 8005290:	4648      	mov	r0, r9
 8005292:	f7ff ff4f 	bl	8005134 <print_e>
 8005296:	e7e7      	b.n	8005268 <_gcvt+0x40>
 8005298:	4640      	mov	r0, r8
 800529a:	f001 fb4b 	bl	8006934 <_mprec_log10>
 800529e:	4622      	mov	r2, r4
 80052a0:	ec51 0b10 	vmov	r0, r1, d0
 80052a4:	462b      	mov	r3, r5
 80052a6:	f7fb fc3b 	bl	8000b20 <__aeabi_dcmple>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d1e8      	bne.n	8005280 <_gcvt+0x58>
 80052ae:	ab07      	add	r3, sp, #28
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	ab06      	add	r3, sp, #24
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	4642      	mov	r2, r8
 80052b8:	ab05      	add	r3, sp, #20
 80052ba:	ec45 4b10 	vmov	d0, r4, r5
 80052be:	2102      	movs	r1, #2
 80052c0:	4648      	mov	r0, r9
 80052c2:	f000 f9c1 	bl	8005648 <_dtoa_r>
 80052c6:	9a05      	ldr	r2, [sp, #20]
 80052c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d00e      	beq.n	80052ee <_gcvt+0xc6>
 80052d0:	4633      	mov	r3, r6
 80052d2:	44b0      	add	r8, r6
 80052d4:	4605      	mov	r5, r0
 80052d6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80052da:	9c05      	ldr	r4, [sp, #20]
 80052dc:	eba8 0203 	sub.w	r2, r8, r3
 80052e0:	b109      	cbz	r1, 80052e6 <_gcvt+0xbe>
 80052e2:	2c00      	cmp	r4, #0
 80052e4:	dc08      	bgt.n	80052f8 <_gcvt+0xd0>
 80052e6:	2100      	movs	r1, #0
 80052e8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80052ec:	e00d      	b.n	800530a <_gcvt+0xe2>
 80052ee:	4601      	mov	r1, r0
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 f917 	bl	8005524 <strcpy>
 80052f6:	e7b7      	b.n	8005268 <_gcvt+0x40>
 80052f8:	3c01      	subs	r4, #1
 80052fa:	f803 1b01 	strb.w	r1, [r3], #1
 80052fe:	9405      	str	r4, [sp, #20]
 8005300:	e7e8      	b.n	80052d4 <_gcvt+0xac>
 8005302:	f803 cb01 	strb.w	ip, [r3], #1
 8005306:	3a01      	subs	r2, #1
 8005308:	2101      	movs	r1, #1
 800530a:	2c00      	cmp	r4, #0
 800530c:	4620      	mov	r0, r4
 800530e:	dc2a      	bgt.n	8005366 <_gcvt+0x13e>
 8005310:	b101      	cbz	r1, 8005314 <_gcvt+0xec>
 8005312:	9405      	str	r4, [sp, #20]
 8005314:	b90f      	cbnz	r7, 800531a <_gcvt+0xf2>
 8005316:	7829      	ldrb	r1, [r5, #0]
 8005318:	b311      	cbz	r1, 8005360 <_gcvt+0x138>
 800531a:	42b3      	cmp	r3, r6
 800531c:	bf04      	itt	eq
 800531e:	2130      	moveq	r1, #48	; 0x30
 8005320:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005324:	212e      	movs	r1, #46	; 0x2e
 8005326:	7019      	strb	r1, [r3, #0]
 8005328:	9905      	ldr	r1, [sp, #20]
 800532a:	4618      	mov	r0, r3
 800532c:	2400      	movs	r4, #0
 800532e:	eba1 0c03 	sub.w	ip, r1, r3
 8005332:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005336:	eb1c 0f00 	cmn.w	ip, r0
 800533a:	d41c      	bmi.n	8005376 <_gcvt+0x14e>
 800533c:	2900      	cmp	r1, #0
 800533e:	f1c1 0000 	rsb	r0, r1, #0
 8005342:	bfc8      	it	gt
 8005344:	2000      	movgt	r0, #0
 8005346:	f100 0c01 	add.w	ip, r0, #1
 800534a:	4463      	add	r3, ip
 800534c:	4401      	add	r1, r0
 800534e:	b104      	cbz	r4, 8005352 <_gcvt+0x12a>
 8005350:	9105      	str	r1, [sp, #20]
 8005352:	1e69      	subs	r1, r5, #1
 8005354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005358:	b108      	cbz	r0, 800535e <_gcvt+0x136>
 800535a:	2a00      	cmp	r2, #0
 800535c:	dc0f      	bgt.n	800537e <_gcvt+0x156>
 800535e:	b9df      	cbnz	r7, 8005398 <_gcvt+0x170>
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e780      	b.n	8005268 <_gcvt+0x40>
 8005366:	2a00      	cmp	r2, #0
 8005368:	f104 34ff 	add.w	r4, r4, #4294967295
 800536c:	dcc9      	bgt.n	8005302 <_gcvt+0xda>
 800536e:	2900      	cmp	r1, #0
 8005370:	d0d0      	beq.n	8005314 <_gcvt+0xec>
 8005372:	9005      	str	r0, [sp, #20]
 8005374:	e7ce      	b.n	8005314 <_gcvt+0xec>
 8005376:	f800 ef01 	strb.w	lr, [r0, #1]!
 800537a:	2401      	movs	r4, #1
 800537c:	e7db      	b.n	8005336 <_gcvt+0x10e>
 800537e:	f803 0b01 	strb.w	r0, [r3], #1
 8005382:	3a01      	subs	r2, #1
 8005384:	e7e6      	b.n	8005354 <_gcvt+0x12c>
 8005386:	f801 5b01 	strb.w	r5, [r1], #1
 800538a:	1a60      	subs	r0, r4, r1
 800538c:	2800      	cmp	r0, #0
 800538e:	dcfa      	bgt.n	8005386 <_gcvt+0x15e>
 8005390:	2a00      	cmp	r2, #0
 8005392:	bfa8      	it	ge
 8005394:	189b      	addge	r3, r3, r2
 8005396:	e7e3      	b.n	8005360 <_gcvt+0x138>
 8005398:	4619      	mov	r1, r3
 800539a:	189c      	adds	r4, r3, r2
 800539c:	2530      	movs	r5, #48	; 0x30
 800539e:	e7f4      	b.n	800538a <_gcvt+0x162>
 80053a0:	eb1c432d 	.word	0xeb1c432d
 80053a4:	3f1a36e2 	.word	0x3f1a36e2

080053a8 <__sflush_r>:
 80053a8:	898a      	ldrh	r2, [r1, #12]
 80053aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ae:	4605      	mov	r5, r0
 80053b0:	0710      	lsls	r0, r2, #28
 80053b2:	460c      	mov	r4, r1
 80053b4:	d458      	bmi.n	8005468 <__sflush_r+0xc0>
 80053b6:	684b      	ldr	r3, [r1, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	dc05      	bgt.n	80053c8 <__sflush_r+0x20>
 80053bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	dc02      	bgt.n	80053c8 <__sflush_r+0x20>
 80053c2:	2000      	movs	r0, #0
 80053c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ca:	2e00      	cmp	r6, #0
 80053cc:	d0f9      	beq.n	80053c2 <__sflush_r+0x1a>
 80053ce:	2300      	movs	r3, #0
 80053d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053d4:	682f      	ldr	r7, [r5, #0]
 80053d6:	6a21      	ldr	r1, [r4, #32]
 80053d8:	602b      	str	r3, [r5, #0]
 80053da:	d032      	beq.n	8005442 <__sflush_r+0x9a>
 80053dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	075a      	lsls	r2, r3, #29
 80053e2:	d505      	bpl.n	80053f0 <__sflush_r+0x48>
 80053e4:	6863      	ldr	r3, [r4, #4]
 80053e6:	1ac0      	subs	r0, r0, r3
 80053e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053ea:	b10b      	cbz	r3, 80053f0 <__sflush_r+0x48>
 80053ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053ee:	1ac0      	subs	r0, r0, r3
 80053f0:	2300      	movs	r3, #0
 80053f2:	4602      	mov	r2, r0
 80053f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053f6:	6a21      	ldr	r1, [r4, #32]
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b0      	blx	r6
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	d106      	bne.n	8005410 <__sflush_r+0x68>
 8005402:	6829      	ldr	r1, [r5, #0]
 8005404:	291d      	cmp	r1, #29
 8005406:	d82b      	bhi.n	8005460 <__sflush_r+0xb8>
 8005408:	4a29      	ldr	r2, [pc, #164]	; (80054b0 <__sflush_r+0x108>)
 800540a:	410a      	asrs	r2, r1
 800540c:	07d6      	lsls	r6, r2, #31
 800540e:	d427      	bmi.n	8005460 <__sflush_r+0xb8>
 8005410:	2200      	movs	r2, #0
 8005412:	6062      	str	r2, [r4, #4]
 8005414:	04d9      	lsls	r1, r3, #19
 8005416:	6922      	ldr	r2, [r4, #16]
 8005418:	6022      	str	r2, [r4, #0]
 800541a:	d504      	bpl.n	8005426 <__sflush_r+0x7e>
 800541c:	1c42      	adds	r2, r0, #1
 800541e:	d101      	bne.n	8005424 <__sflush_r+0x7c>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b903      	cbnz	r3, 8005426 <__sflush_r+0x7e>
 8005424:	6560      	str	r0, [r4, #84]	; 0x54
 8005426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005428:	602f      	str	r7, [r5, #0]
 800542a:	2900      	cmp	r1, #0
 800542c:	d0c9      	beq.n	80053c2 <__sflush_r+0x1a>
 800542e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005432:	4299      	cmp	r1, r3
 8005434:	d002      	beq.n	800543c <__sflush_r+0x94>
 8005436:	4628      	mov	r0, r5
 8005438:	f7ff fd84 	bl	8004f44 <_free_r>
 800543c:	2000      	movs	r0, #0
 800543e:	6360      	str	r0, [r4, #52]	; 0x34
 8005440:	e7c0      	b.n	80053c4 <__sflush_r+0x1c>
 8005442:	2301      	movs	r3, #1
 8005444:	4628      	mov	r0, r5
 8005446:	47b0      	blx	r6
 8005448:	1c41      	adds	r1, r0, #1
 800544a:	d1c8      	bne.n	80053de <__sflush_r+0x36>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0c5      	beq.n	80053de <__sflush_r+0x36>
 8005452:	2b1d      	cmp	r3, #29
 8005454:	d001      	beq.n	800545a <__sflush_r+0xb2>
 8005456:	2b16      	cmp	r3, #22
 8005458:	d101      	bne.n	800545e <__sflush_r+0xb6>
 800545a:	602f      	str	r7, [r5, #0]
 800545c:	e7b1      	b.n	80053c2 <__sflush_r+0x1a>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005464:	81a3      	strh	r3, [r4, #12]
 8005466:	e7ad      	b.n	80053c4 <__sflush_r+0x1c>
 8005468:	690f      	ldr	r7, [r1, #16]
 800546a:	2f00      	cmp	r7, #0
 800546c:	d0a9      	beq.n	80053c2 <__sflush_r+0x1a>
 800546e:	0793      	lsls	r3, r2, #30
 8005470:	680e      	ldr	r6, [r1, #0]
 8005472:	bf08      	it	eq
 8005474:	694b      	ldreq	r3, [r1, #20]
 8005476:	600f      	str	r7, [r1, #0]
 8005478:	bf18      	it	ne
 800547a:	2300      	movne	r3, #0
 800547c:	eba6 0807 	sub.w	r8, r6, r7
 8005480:	608b      	str	r3, [r1, #8]
 8005482:	f1b8 0f00 	cmp.w	r8, #0
 8005486:	dd9c      	ble.n	80053c2 <__sflush_r+0x1a>
 8005488:	6a21      	ldr	r1, [r4, #32]
 800548a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800548c:	4643      	mov	r3, r8
 800548e:	463a      	mov	r2, r7
 8005490:	4628      	mov	r0, r5
 8005492:	47b0      	blx	r6
 8005494:	2800      	cmp	r0, #0
 8005496:	dc06      	bgt.n	80054a6 <__sflush_r+0xfe>
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800549e:	81a3      	strh	r3, [r4, #12]
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	e78e      	b.n	80053c4 <__sflush_r+0x1c>
 80054a6:	4407      	add	r7, r0
 80054a8:	eba8 0800 	sub.w	r8, r8, r0
 80054ac:	e7e9      	b.n	8005482 <__sflush_r+0xda>
 80054ae:	bf00      	nop
 80054b0:	dfbffffe 	.word	0xdfbffffe

080054b4 <_fflush_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	690b      	ldr	r3, [r1, #16]
 80054b8:	4605      	mov	r5, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	b913      	cbnz	r3, 80054c4 <_fflush_r+0x10>
 80054be:	2500      	movs	r5, #0
 80054c0:	4628      	mov	r0, r5
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	b118      	cbz	r0, 80054ce <_fflush_r+0x1a>
 80054c6:	6a03      	ldr	r3, [r0, #32]
 80054c8:	b90b      	cbnz	r3, 80054ce <_fflush_r+0x1a>
 80054ca:	f7ff fc45 	bl	8004d58 <__sinit>
 80054ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f3      	beq.n	80054be <_fflush_r+0xa>
 80054d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054d8:	07d0      	lsls	r0, r2, #31
 80054da:	d404      	bmi.n	80054e6 <_fflush_r+0x32>
 80054dc:	0599      	lsls	r1, r3, #22
 80054de:	d402      	bmi.n	80054e6 <_fflush_r+0x32>
 80054e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e2:	f7ff fd2c 	bl	8004f3e <__retarget_lock_acquire_recursive>
 80054e6:	4628      	mov	r0, r5
 80054e8:	4621      	mov	r1, r4
 80054ea:	f7ff ff5d 	bl	80053a8 <__sflush_r>
 80054ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054f0:	07da      	lsls	r2, r3, #31
 80054f2:	4605      	mov	r5, r0
 80054f4:	d4e4      	bmi.n	80054c0 <_fflush_r+0xc>
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	059b      	lsls	r3, r3, #22
 80054fa:	d4e1      	bmi.n	80054c0 <_fflush_r+0xc>
 80054fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054fe:	f7ff fd1f 	bl	8004f40 <__retarget_lock_release_recursive>
 8005502:	e7dd      	b.n	80054c0 <_fflush_r+0xc>

08005504 <_sbrk_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d06      	ldr	r5, [pc, #24]	; (8005520 <_sbrk_r+0x1c>)
 8005508:	2300      	movs	r3, #0
 800550a:	4604      	mov	r4, r0
 800550c:	4608      	mov	r0, r1
 800550e:	602b      	str	r3, [r5, #0]
 8005510:	f7fc fe52 	bl	80021b8 <_sbrk>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_sbrk_r+0x1a>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_sbrk_r+0x1a>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200002ac 	.word	0x200002ac

08005524 <strcpy>:
 8005524:	4603      	mov	r3, r0
 8005526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800552a:	f803 2b01 	strb.w	r2, [r3], #1
 800552e:	2a00      	cmp	r2, #0
 8005530:	d1f9      	bne.n	8005526 <strcpy+0x2>
 8005532:	4770      	bx	lr

08005534 <quorem>:
 8005534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	6903      	ldr	r3, [r0, #16]
 800553a:	690c      	ldr	r4, [r1, #16]
 800553c:	42a3      	cmp	r3, r4
 800553e:	4607      	mov	r7, r0
 8005540:	db7e      	blt.n	8005640 <quorem+0x10c>
 8005542:	3c01      	subs	r4, #1
 8005544:	f101 0814 	add.w	r8, r1, #20
 8005548:	f100 0514 	add.w	r5, r0, #20
 800554c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005556:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800555a:	3301      	adds	r3, #1
 800555c:	429a      	cmp	r2, r3
 800555e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005562:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005566:	fbb2 f6f3 	udiv	r6, r2, r3
 800556a:	d331      	bcc.n	80055d0 <quorem+0x9c>
 800556c:	f04f 0e00 	mov.w	lr, #0
 8005570:	4640      	mov	r0, r8
 8005572:	46ac      	mov	ip, r5
 8005574:	46f2      	mov	sl, lr
 8005576:	f850 2b04 	ldr.w	r2, [r0], #4
 800557a:	b293      	uxth	r3, r2
 800557c:	fb06 e303 	mla	r3, r6, r3, lr
 8005580:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005584:	0c1a      	lsrs	r2, r3, #16
 8005586:	b29b      	uxth	r3, r3
 8005588:	ebaa 0303 	sub.w	r3, sl, r3
 800558c:	f8dc a000 	ldr.w	sl, [ip]
 8005590:	fa13 f38a 	uxtah	r3, r3, sl
 8005594:	fb06 220e 	mla	r2, r6, lr, r2
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	9b00      	ldr	r3, [sp, #0]
 800559c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055a0:	b292      	uxth	r2, r2
 80055a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80055ae:	4581      	cmp	r9, r0
 80055b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b4:	f84c 3b04 	str.w	r3, [ip], #4
 80055b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055bc:	d2db      	bcs.n	8005576 <quorem+0x42>
 80055be:	f855 300b 	ldr.w	r3, [r5, fp]
 80055c2:	b92b      	cbnz	r3, 80055d0 <quorem+0x9c>
 80055c4:	9b01      	ldr	r3, [sp, #4]
 80055c6:	3b04      	subs	r3, #4
 80055c8:	429d      	cmp	r5, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	d32c      	bcc.n	8005628 <quorem+0xf4>
 80055ce:	613c      	str	r4, [r7, #16]
 80055d0:	4638      	mov	r0, r7
 80055d2:	f001 f8af 	bl	8006734 <__mcmp>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	db22      	blt.n	8005620 <quorem+0xec>
 80055da:	3601      	adds	r6, #1
 80055dc:	4629      	mov	r1, r5
 80055de:	2000      	movs	r0, #0
 80055e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80055e4:	f8d1 c000 	ldr.w	ip, [r1]
 80055e8:	b293      	uxth	r3, r2
 80055ea:	1ac3      	subs	r3, r0, r3
 80055ec:	0c12      	lsrs	r2, r2, #16
 80055ee:	fa13 f38c 	uxtah	r3, r3, ip
 80055f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80055f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005600:	45c1      	cmp	r9, r8
 8005602:	f841 3b04 	str.w	r3, [r1], #4
 8005606:	ea4f 4022 	mov.w	r0, r2, asr #16
 800560a:	d2e9      	bcs.n	80055e0 <quorem+0xac>
 800560c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005614:	b922      	cbnz	r2, 8005620 <quorem+0xec>
 8005616:	3b04      	subs	r3, #4
 8005618:	429d      	cmp	r5, r3
 800561a:	461a      	mov	r2, r3
 800561c:	d30a      	bcc.n	8005634 <quorem+0x100>
 800561e:	613c      	str	r4, [r7, #16]
 8005620:	4630      	mov	r0, r6
 8005622:	b003      	add	sp, #12
 8005624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	3b04      	subs	r3, #4
 800562c:	2a00      	cmp	r2, #0
 800562e:	d1ce      	bne.n	80055ce <quorem+0x9a>
 8005630:	3c01      	subs	r4, #1
 8005632:	e7c9      	b.n	80055c8 <quorem+0x94>
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	3b04      	subs	r3, #4
 8005638:	2a00      	cmp	r2, #0
 800563a:	d1f0      	bne.n	800561e <quorem+0xea>
 800563c:	3c01      	subs	r4, #1
 800563e:	e7eb      	b.n	8005618 <quorem+0xe4>
 8005640:	2000      	movs	r0, #0
 8005642:	e7ee      	b.n	8005622 <quorem+0xee>
 8005644:	0000      	movs	r0, r0
	...

08005648 <_dtoa_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	ed2d 8b04 	vpush	{d8-d9}
 8005650:	69c5      	ldr	r5, [r0, #28]
 8005652:	b093      	sub	sp, #76	; 0x4c
 8005654:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005658:	ec57 6b10 	vmov	r6, r7, d0
 800565c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005660:	9107      	str	r1, [sp, #28]
 8005662:	4604      	mov	r4, r0
 8005664:	920a      	str	r2, [sp, #40]	; 0x28
 8005666:	930d      	str	r3, [sp, #52]	; 0x34
 8005668:	b975      	cbnz	r5, 8005688 <_dtoa_r+0x40>
 800566a:	2010      	movs	r0, #16
 800566c:	f000 fdde 	bl	800622c <malloc>
 8005670:	4602      	mov	r2, r0
 8005672:	61e0      	str	r0, [r4, #28]
 8005674:	b920      	cbnz	r0, 8005680 <_dtoa_r+0x38>
 8005676:	4bae      	ldr	r3, [pc, #696]	; (8005930 <_dtoa_r+0x2e8>)
 8005678:	21ef      	movs	r1, #239	; 0xef
 800567a:	48ae      	ldr	r0, [pc, #696]	; (8005934 <_dtoa_r+0x2ec>)
 800567c:	f001 f986 	bl	800698c <__assert_func>
 8005680:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005684:	6005      	str	r5, [r0, #0]
 8005686:	60c5      	str	r5, [r0, #12]
 8005688:	69e3      	ldr	r3, [r4, #28]
 800568a:	6819      	ldr	r1, [r3, #0]
 800568c:	b151      	cbz	r1, 80056a4 <_dtoa_r+0x5c>
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	604a      	str	r2, [r1, #4]
 8005692:	2301      	movs	r3, #1
 8005694:	4093      	lsls	r3, r2
 8005696:	608b      	str	r3, [r1, #8]
 8005698:	4620      	mov	r0, r4
 800569a:	f000 fe0f 	bl	80062bc <_Bfree>
 800569e:	69e3      	ldr	r3, [r4, #28]
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	1e3b      	subs	r3, r7, #0
 80056a6:	bfbb      	ittet	lt
 80056a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056ac:	9303      	strlt	r3, [sp, #12]
 80056ae:	2300      	movge	r3, #0
 80056b0:	2201      	movlt	r2, #1
 80056b2:	bfac      	ite	ge
 80056b4:	f8c8 3000 	strge.w	r3, [r8]
 80056b8:	f8c8 2000 	strlt.w	r2, [r8]
 80056bc:	4b9e      	ldr	r3, [pc, #632]	; (8005938 <_dtoa_r+0x2f0>)
 80056be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80056c2:	ea33 0308 	bics.w	r3, r3, r8
 80056c6:	d11b      	bne.n	8005700 <_dtoa_r+0xb8>
 80056c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80056d4:	4333      	orrs	r3, r6
 80056d6:	f000 8593 	beq.w	8006200 <_dtoa_r+0xbb8>
 80056da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056dc:	b963      	cbnz	r3, 80056f8 <_dtoa_r+0xb0>
 80056de:	4b97      	ldr	r3, [pc, #604]	; (800593c <_dtoa_r+0x2f4>)
 80056e0:	e027      	b.n	8005732 <_dtoa_r+0xea>
 80056e2:	4b97      	ldr	r3, [pc, #604]	; (8005940 <_dtoa_r+0x2f8>)
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	9800      	ldr	r0, [sp, #0]
 80056ee:	b013      	add	sp, #76	; 0x4c
 80056f0:	ecbd 8b04 	vpop	{d8-d9}
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f8:	4b90      	ldr	r3, [pc, #576]	; (800593c <_dtoa_r+0x2f4>)
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	3303      	adds	r3, #3
 80056fe:	e7f3      	b.n	80056e8 <_dtoa_r+0xa0>
 8005700:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005704:	2200      	movs	r2, #0
 8005706:	ec51 0b17 	vmov	r0, r1, d7
 800570a:	eeb0 8a47 	vmov.f32	s16, s14
 800570e:	eef0 8a67 	vmov.f32	s17, s15
 8005712:	2300      	movs	r3, #0
 8005714:	f7fb f9f0 	bl	8000af8 <__aeabi_dcmpeq>
 8005718:	4681      	mov	r9, r0
 800571a:	b160      	cbz	r0, 8005736 <_dtoa_r+0xee>
 800571c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800571e:	2301      	movs	r3, #1
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8568 	beq.w	80061fa <_dtoa_r+0xbb2>
 800572a:	4b86      	ldr	r3, [pc, #536]	; (8005944 <_dtoa_r+0x2fc>)
 800572c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	3b01      	subs	r3, #1
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	e7da      	b.n	80056ec <_dtoa_r+0xa4>
 8005736:	aa10      	add	r2, sp, #64	; 0x40
 8005738:	a911      	add	r1, sp, #68	; 0x44
 800573a:	4620      	mov	r0, r4
 800573c:	eeb0 0a48 	vmov.f32	s0, s16
 8005740:	eef0 0a68 	vmov.f32	s1, s17
 8005744:	f001 f89c 	bl	8006880 <__d2b>
 8005748:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800574c:	4682      	mov	sl, r0
 800574e:	2d00      	cmp	r5, #0
 8005750:	d07f      	beq.n	8005852 <_dtoa_r+0x20a>
 8005752:	ee18 3a90 	vmov	r3, s17
 8005756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800575a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800575e:	ec51 0b18 	vmov	r0, r1, d8
 8005762:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800576a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800576e:	4619      	mov	r1, r3
 8005770:	2200      	movs	r2, #0
 8005772:	4b75      	ldr	r3, [pc, #468]	; (8005948 <_dtoa_r+0x300>)
 8005774:	f7fa fda0 	bl	80002b8 <__aeabi_dsub>
 8005778:	a367      	add	r3, pc, #412	; (adr r3, 8005918 <_dtoa_r+0x2d0>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa ff53 	bl	8000628 <__aeabi_dmul>
 8005782:	a367      	add	r3, pc, #412	; (adr r3, 8005920 <_dtoa_r+0x2d8>)
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f7fa fd98 	bl	80002bc <__adddf3>
 800578c:	4606      	mov	r6, r0
 800578e:	4628      	mov	r0, r5
 8005790:	460f      	mov	r7, r1
 8005792:	f7fa fedf 	bl	8000554 <__aeabi_i2d>
 8005796:	a364      	add	r3, pc, #400	; (adr r3, 8005928 <_dtoa_r+0x2e0>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa ff44 	bl	8000628 <__aeabi_dmul>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4630      	mov	r0, r6
 80057a6:	4639      	mov	r1, r7
 80057a8:	f7fa fd88 	bl	80002bc <__adddf3>
 80057ac:	4606      	mov	r6, r0
 80057ae:	460f      	mov	r7, r1
 80057b0:	f7fb f9d4 	bl	8000b5c <__aeabi_d2iz>
 80057b4:	2200      	movs	r2, #0
 80057b6:	4683      	mov	fp, r0
 80057b8:	2300      	movs	r3, #0
 80057ba:	4630      	mov	r0, r6
 80057bc:	4639      	mov	r1, r7
 80057be:	f7fb f9a5 	bl	8000b0c <__aeabi_dcmplt>
 80057c2:	b148      	cbz	r0, 80057d8 <_dtoa_r+0x190>
 80057c4:	4658      	mov	r0, fp
 80057c6:	f7fa fec5 	bl	8000554 <__aeabi_i2d>
 80057ca:	4632      	mov	r2, r6
 80057cc:	463b      	mov	r3, r7
 80057ce:	f7fb f993 	bl	8000af8 <__aeabi_dcmpeq>
 80057d2:	b908      	cbnz	r0, 80057d8 <_dtoa_r+0x190>
 80057d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057d8:	f1bb 0f16 	cmp.w	fp, #22
 80057dc:	d857      	bhi.n	800588e <_dtoa_r+0x246>
 80057de:	4b5b      	ldr	r3, [pc, #364]	; (800594c <_dtoa_r+0x304>)
 80057e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	ec51 0b18 	vmov	r0, r1, d8
 80057ec:	f7fb f98e 	bl	8000b0c <__aeabi_dcmplt>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d04e      	beq.n	8005892 <_dtoa_r+0x24a>
 80057f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057f8:	2300      	movs	r3, #0
 80057fa:	930c      	str	r3, [sp, #48]	; 0x30
 80057fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057fe:	1b5b      	subs	r3, r3, r5
 8005800:	1e5a      	subs	r2, r3, #1
 8005802:	bf45      	ittet	mi
 8005804:	f1c3 0301 	rsbmi	r3, r3, #1
 8005808:	9305      	strmi	r3, [sp, #20]
 800580a:	2300      	movpl	r3, #0
 800580c:	2300      	movmi	r3, #0
 800580e:	9206      	str	r2, [sp, #24]
 8005810:	bf54      	ite	pl
 8005812:	9305      	strpl	r3, [sp, #20]
 8005814:	9306      	strmi	r3, [sp, #24]
 8005816:	f1bb 0f00 	cmp.w	fp, #0
 800581a:	db3c      	blt.n	8005896 <_dtoa_r+0x24e>
 800581c:	9b06      	ldr	r3, [sp, #24]
 800581e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005822:	445b      	add	r3, fp
 8005824:	9306      	str	r3, [sp, #24]
 8005826:	2300      	movs	r3, #0
 8005828:	9308      	str	r3, [sp, #32]
 800582a:	9b07      	ldr	r3, [sp, #28]
 800582c:	2b09      	cmp	r3, #9
 800582e:	d868      	bhi.n	8005902 <_dtoa_r+0x2ba>
 8005830:	2b05      	cmp	r3, #5
 8005832:	bfc4      	itt	gt
 8005834:	3b04      	subgt	r3, #4
 8005836:	9307      	strgt	r3, [sp, #28]
 8005838:	9b07      	ldr	r3, [sp, #28]
 800583a:	f1a3 0302 	sub.w	r3, r3, #2
 800583e:	bfcc      	ite	gt
 8005840:	2500      	movgt	r5, #0
 8005842:	2501      	movle	r5, #1
 8005844:	2b03      	cmp	r3, #3
 8005846:	f200 8085 	bhi.w	8005954 <_dtoa_r+0x30c>
 800584a:	e8df f003 	tbb	[pc, r3]
 800584e:	3b2e      	.short	0x3b2e
 8005850:	5839      	.short	0x5839
 8005852:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005856:	441d      	add	r5, r3
 8005858:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800585c:	2b20      	cmp	r3, #32
 800585e:	bfc1      	itttt	gt
 8005860:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005864:	fa08 f803 	lslgt.w	r8, r8, r3
 8005868:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800586c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005870:	bfd6      	itet	le
 8005872:	f1c3 0320 	rsble	r3, r3, #32
 8005876:	ea48 0003 	orrgt.w	r0, r8, r3
 800587a:	fa06 f003 	lslle.w	r0, r6, r3
 800587e:	f7fa fe59 	bl	8000534 <__aeabi_ui2d>
 8005882:	2201      	movs	r2, #1
 8005884:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005888:	3d01      	subs	r5, #1
 800588a:	920e      	str	r2, [sp, #56]	; 0x38
 800588c:	e76f      	b.n	800576e <_dtoa_r+0x126>
 800588e:	2301      	movs	r3, #1
 8005890:	e7b3      	b.n	80057fa <_dtoa_r+0x1b2>
 8005892:	900c      	str	r0, [sp, #48]	; 0x30
 8005894:	e7b2      	b.n	80057fc <_dtoa_r+0x1b4>
 8005896:	9b05      	ldr	r3, [sp, #20]
 8005898:	eba3 030b 	sub.w	r3, r3, fp
 800589c:	9305      	str	r3, [sp, #20]
 800589e:	f1cb 0300 	rsb	r3, fp, #0
 80058a2:	9308      	str	r3, [sp, #32]
 80058a4:	2300      	movs	r3, #0
 80058a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058a8:	e7bf      	b.n	800582a <_dtoa_r+0x1e2>
 80058aa:	2300      	movs	r3, #0
 80058ac:	9309      	str	r3, [sp, #36]	; 0x24
 80058ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	dc52      	bgt.n	800595a <_dtoa_r+0x312>
 80058b4:	2301      	movs	r3, #1
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	9304      	str	r3, [sp, #16]
 80058ba:	461a      	mov	r2, r3
 80058bc:	920a      	str	r2, [sp, #40]	; 0x28
 80058be:	e00b      	b.n	80058d8 <_dtoa_r+0x290>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e7f3      	b.n	80058ac <_dtoa_r+0x264>
 80058c4:	2300      	movs	r3, #0
 80058c6:	9309      	str	r3, [sp, #36]	; 0x24
 80058c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ca:	445b      	add	r3, fp
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	3301      	adds	r3, #1
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	9304      	str	r3, [sp, #16]
 80058d4:	bfb8      	it	lt
 80058d6:	2301      	movlt	r3, #1
 80058d8:	69e0      	ldr	r0, [r4, #28]
 80058da:	2100      	movs	r1, #0
 80058dc:	2204      	movs	r2, #4
 80058de:	f102 0614 	add.w	r6, r2, #20
 80058e2:	429e      	cmp	r6, r3
 80058e4:	d93d      	bls.n	8005962 <_dtoa_r+0x31a>
 80058e6:	6041      	str	r1, [r0, #4]
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fca7 	bl	800623c <_Balloc>
 80058ee:	9000      	str	r0, [sp, #0]
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d139      	bne.n	8005968 <_dtoa_r+0x320>
 80058f4:	4b16      	ldr	r3, [pc, #88]	; (8005950 <_dtoa_r+0x308>)
 80058f6:	4602      	mov	r2, r0
 80058f8:	f240 11af 	movw	r1, #431	; 0x1af
 80058fc:	e6bd      	b.n	800567a <_dtoa_r+0x32>
 80058fe:	2301      	movs	r3, #1
 8005900:	e7e1      	b.n	80058c6 <_dtoa_r+0x27e>
 8005902:	2501      	movs	r5, #1
 8005904:	2300      	movs	r3, #0
 8005906:	9307      	str	r3, [sp, #28]
 8005908:	9509      	str	r5, [sp, #36]	; 0x24
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	9304      	str	r3, [sp, #16]
 8005912:	2200      	movs	r2, #0
 8005914:	2312      	movs	r3, #18
 8005916:	e7d1      	b.n	80058bc <_dtoa_r+0x274>
 8005918:	636f4361 	.word	0x636f4361
 800591c:	3fd287a7 	.word	0x3fd287a7
 8005920:	8b60c8b3 	.word	0x8b60c8b3
 8005924:	3fc68a28 	.word	0x3fc68a28
 8005928:	509f79fb 	.word	0x509f79fb
 800592c:	3fd34413 	.word	0x3fd34413
 8005930:	080072cb 	.word	0x080072cb
 8005934:	080072e2 	.word	0x080072e2
 8005938:	7ff00000 	.word	0x7ff00000
 800593c:	080072c5 	.word	0x080072c5
 8005940:	080072bc 	.word	0x080072bc
 8005944:	080072ca 	.word	0x080072ca
 8005948:	3ff80000 	.word	0x3ff80000
 800594c:	080073d0 	.word	0x080073d0
 8005950:	0800733a 	.word	0x0800733a
 8005954:	2301      	movs	r3, #1
 8005956:	9309      	str	r3, [sp, #36]	; 0x24
 8005958:	e7d7      	b.n	800590a <_dtoa_r+0x2c2>
 800595a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	9304      	str	r3, [sp, #16]
 8005960:	e7ba      	b.n	80058d8 <_dtoa_r+0x290>
 8005962:	3101      	adds	r1, #1
 8005964:	0052      	lsls	r2, r2, #1
 8005966:	e7ba      	b.n	80058de <_dtoa_r+0x296>
 8005968:	69e3      	ldr	r3, [r4, #28]
 800596a:	9a00      	ldr	r2, [sp, #0]
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	9b04      	ldr	r3, [sp, #16]
 8005970:	2b0e      	cmp	r3, #14
 8005972:	f200 80a8 	bhi.w	8005ac6 <_dtoa_r+0x47e>
 8005976:	2d00      	cmp	r5, #0
 8005978:	f000 80a5 	beq.w	8005ac6 <_dtoa_r+0x47e>
 800597c:	f1bb 0f00 	cmp.w	fp, #0
 8005980:	dd38      	ble.n	80059f4 <_dtoa_r+0x3ac>
 8005982:	4bc0      	ldr	r3, [pc, #768]	; (8005c84 <_dtoa_r+0x63c>)
 8005984:	f00b 020f 	and.w	r2, fp, #15
 8005988:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800598c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005990:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005994:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005998:	d019      	beq.n	80059ce <_dtoa_r+0x386>
 800599a:	4bbb      	ldr	r3, [pc, #748]	; (8005c88 <_dtoa_r+0x640>)
 800599c:	ec51 0b18 	vmov	r0, r1, d8
 80059a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059a4:	f7fa ff6a 	bl	800087c <__aeabi_ddiv>
 80059a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ac:	f008 080f 	and.w	r8, r8, #15
 80059b0:	2503      	movs	r5, #3
 80059b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005c88 <_dtoa_r+0x640>
 80059b6:	f1b8 0f00 	cmp.w	r8, #0
 80059ba:	d10a      	bne.n	80059d2 <_dtoa_r+0x38a>
 80059bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059c0:	4632      	mov	r2, r6
 80059c2:	463b      	mov	r3, r7
 80059c4:	f7fa ff5a 	bl	800087c <__aeabi_ddiv>
 80059c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059cc:	e02b      	b.n	8005a26 <_dtoa_r+0x3de>
 80059ce:	2502      	movs	r5, #2
 80059d0:	e7ef      	b.n	80059b2 <_dtoa_r+0x36a>
 80059d2:	f018 0f01 	tst.w	r8, #1
 80059d6:	d008      	beq.n	80059ea <_dtoa_r+0x3a2>
 80059d8:	4630      	mov	r0, r6
 80059da:	4639      	mov	r1, r7
 80059dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80059e0:	f7fa fe22 	bl	8000628 <__aeabi_dmul>
 80059e4:	3501      	adds	r5, #1
 80059e6:	4606      	mov	r6, r0
 80059e8:	460f      	mov	r7, r1
 80059ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80059ee:	f109 0908 	add.w	r9, r9, #8
 80059f2:	e7e0      	b.n	80059b6 <_dtoa_r+0x36e>
 80059f4:	f000 809f 	beq.w	8005b36 <_dtoa_r+0x4ee>
 80059f8:	f1cb 0600 	rsb	r6, fp, #0
 80059fc:	4ba1      	ldr	r3, [pc, #644]	; (8005c84 <_dtoa_r+0x63c>)
 80059fe:	4fa2      	ldr	r7, [pc, #648]	; (8005c88 <_dtoa_r+0x640>)
 8005a00:	f006 020f 	and.w	r2, r6, #15
 8005a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	ec51 0b18 	vmov	r0, r1, d8
 8005a10:	f7fa fe0a 	bl	8000628 <__aeabi_dmul>
 8005a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a18:	1136      	asrs	r6, r6, #4
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2502      	movs	r5, #2
 8005a1e:	2e00      	cmp	r6, #0
 8005a20:	d17e      	bne.n	8005b20 <_dtoa_r+0x4d8>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1d0      	bne.n	80059c8 <_dtoa_r+0x380>
 8005a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8084 	beq.w	8005b3a <_dtoa_r+0x4f2>
 8005a32:	4b96      	ldr	r3, [pc, #600]	; (8005c8c <_dtoa_r+0x644>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	4640      	mov	r0, r8
 8005a38:	4649      	mov	r1, r9
 8005a3a:	f7fb f867 	bl	8000b0c <__aeabi_dcmplt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d07b      	beq.n	8005b3a <_dtoa_r+0x4f2>
 8005a42:	9b04      	ldr	r3, [sp, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d078      	beq.n	8005b3a <_dtoa_r+0x4f2>
 8005a48:	9b01      	ldr	r3, [sp, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dd39      	ble.n	8005ac2 <_dtoa_r+0x47a>
 8005a4e:	4b90      	ldr	r3, [pc, #576]	; (8005c90 <_dtoa_r+0x648>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	4640      	mov	r0, r8
 8005a54:	4649      	mov	r1, r9
 8005a56:	f7fa fde7 	bl	8000628 <__aeabi_dmul>
 8005a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a5e:	9e01      	ldr	r6, [sp, #4]
 8005a60:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005a64:	3501      	adds	r5, #1
 8005a66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f7fa fd72 	bl	8000554 <__aeabi_i2d>
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	f7fa fdd8 	bl	8000628 <__aeabi_dmul>
 8005a78:	4b86      	ldr	r3, [pc, #536]	; (8005c94 <_dtoa_r+0x64c>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7fa fc1e 	bl	80002bc <__adddf3>
 8005a80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a88:	9303      	str	r3, [sp, #12]
 8005a8a:	2e00      	cmp	r6, #0
 8005a8c:	d158      	bne.n	8005b40 <_dtoa_r+0x4f8>
 8005a8e:	4b82      	ldr	r3, [pc, #520]	; (8005c98 <_dtoa_r+0x650>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	4640      	mov	r0, r8
 8005a94:	4649      	mov	r1, r9
 8005a96:	f7fa fc0f 	bl	80002b8 <__aeabi_dsub>
 8005a9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a9e:	4680      	mov	r8, r0
 8005aa0:	4689      	mov	r9, r1
 8005aa2:	f7fb f851 	bl	8000b48 <__aeabi_dcmpgt>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f040 8296 	bne.w	8005fd8 <_dtoa_r+0x990>
 8005aac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	f7fb f828 	bl	8000b0c <__aeabi_dcmplt>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	f040 8289 	bne.w	8005fd4 <_dtoa_r+0x98c>
 8005ac2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f2c0 814e 	blt.w	8005d6a <_dtoa_r+0x722>
 8005ace:	f1bb 0f0e 	cmp.w	fp, #14
 8005ad2:	f300 814a 	bgt.w	8005d6a <_dtoa_r+0x722>
 8005ad6:	4b6b      	ldr	r3, [pc, #428]	; (8005c84 <_dtoa_r+0x63c>)
 8005ad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005adc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f280 80dc 	bge.w	8005ca0 <_dtoa_r+0x658>
 8005ae8:	9b04      	ldr	r3, [sp, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f300 80d8 	bgt.w	8005ca0 <_dtoa_r+0x658>
 8005af0:	f040 826f 	bne.w	8005fd2 <_dtoa_r+0x98a>
 8005af4:	4b68      	ldr	r3, [pc, #416]	; (8005c98 <_dtoa_r+0x650>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	4640      	mov	r0, r8
 8005afa:	4649      	mov	r1, r9
 8005afc:	f7fa fd94 	bl	8000628 <__aeabi_dmul>
 8005b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b04:	f7fb f816 	bl	8000b34 <__aeabi_dcmpge>
 8005b08:	9e04      	ldr	r6, [sp, #16]
 8005b0a:	4637      	mov	r7, r6
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	f040 8245 	bne.w	8005f9c <_dtoa_r+0x954>
 8005b12:	9d00      	ldr	r5, [sp, #0]
 8005b14:	2331      	movs	r3, #49	; 0x31
 8005b16:	f805 3b01 	strb.w	r3, [r5], #1
 8005b1a:	f10b 0b01 	add.w	fp, fp, #1
 8005b1e:	e241      	b.n	8005fa4 <_dtoa_r+0x95c>
 8005b20:	07f2      	lsls	r2, r6, #31
 8005b22:	d505      	bpl.n	8005b30 <_dtoa_r+0x4e8>
 8005b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b28:	f7fa fd7e 	bl	8000628 <__aeabi_dmul>
 8005b2c:	3501      	adds	r5, #1
 8005b2e:	2301      	movs	r3, #1
 8005b30:	1076      	asrs	r6, r6, #1
 8005b32:	3708      	adds	r7, #8
 8005b34:	e773      	b.n	8005a1e <_dtoa_r+0x3d6>
 8005b36:	2502      	movs	r5, #2
 8005b38:	e775      	b.n	8005a26 <_dtoa_r+0x3de>
 8005b3a:	9e04      	ldr	r6, [sp, #16]
 8005b3c:	465f      	mov	r7, fp
 8005b3e:	e792      	b.n	8005a66 <_dtoa_r+0x41e>
 8005b40:	9900      	ldr	r1, [sp, #0]
 8005b42:	4b50      	ldr	r3, [pc, #320]	; (8005c84 <_dtoa_r+0x63c>)
 8005b44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b48:	4431      	add	r1, r6
 8005b4a:	9102      	str	r1, [sp, #8]
 8005b4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b4e:	eeb0 9a47 	vmov.f32	s18, s14
 8005b52:	eef0 9a67 	vmov.f32	s19, s15
 8005b56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d044      	beq.n	8005bec <_dtoa_r+0x5a4>
 8005b62:	494e      	ldr	r1, [pc, #312]	; (8005c9c <_dtoa_r+0x654>)
 8005b64:	2000      	movs	r0, #0
 8005b66:	f7fa fe89 	bl	800087c <__aeabi_ddiv>
 8005b6a:	ec53 2b19 	vmov	r2, r3, d9
 8005b6e:	f7fa fba3 	bl	80002b8 <__aeabi_dsub>
 8005b72:	9d00      	ldr	r5, [sp, #0]
 8005b74:	ec41 0b19 	vmov	d9, r0, r1
 8005b78:	4649      	mov	r1, r9
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	f7fa ffee 	bl	8000b5c <__aeabi_d2iz>
 8005b80:	4606      	mov	r6, r0
 8005b82:	f7fa fce7 	bl	8000554 <__aeabi_i2d>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	f7fa fb93 	bl	80002b8 <__aeabi_dsub>
 8005b92:	3630      	adds	r6, #48	; 0x30
 8005b94:	f805 6b01 	strb.w	r6, [r5], #1
 8005b98:	ec53 2b19 	vmov	r2, r3, d9
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	4689      	mov	r9, r1
 8005ba0:	f7fa ffb4 	bl	8000b0c <__aeabi_dcmplt>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d164      	bne.n	8005c72 <_dtoa_r+0x62a>
 8005ba8:	4642      	mov	r2, r8
 8005baa:	464b      	mov	r3, r9
 8005bac:	4937      	ldr	r1, [pc, #220]	; (8005c8c <_dtoa_r+0x644>)
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f7fa fb82 	bl	80002b8 <__aeabi_dsub>
 8005bb4:	ec53 2b19 	vmov	r2, r3, d9
 8005bb8:	f7fa ffa8 	bl	8000b0c <__aeabi_dcmplt>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f040 80b6 	bne.w	8005d2e <_dtoa_r+0x6e6>
 8005bc2:	9b02      	ldr	r3, [sp, #8]
 8005bc4:	429d      	cmp	r5, r3
 8005bc6:	f43f af7c 	beq.w	8005ac2 <_dtoa_r+0x47a>
 8005bca:	4b31      	ldr	r3, [pc, #196]	; (8005c90 <_dtoa_r+0x648>)
 8005bcc:	ec51 0b19 	vmov	r0, r1, d9
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f7fa fd29 	bl	8000628 <__aeabi_dmul>
 8005bd6:	4b2e      	ldr	r3, [pc, #184]	; (8005c90 <_dtoa_r+0x648>)
 8005bd8:	ec41 0b19 	vmov	d9, r0, r1
 8005bdc:	2200      	movs	r2, #0
 8005bde:	4640      	mov	r0, r8
 8005be0:	4649      	mov	r1, r9
 8005be2:	f7fa fd21 	bl	8000628 <__aeabi_dmul>
 8005be6:	4680      	mov	r8, r0
 8005be8:	4689      	mov	r9, r1
 8005bea:	e7c5      	b.n	8005b78 <_dtoa_r+0x530>
 8005bec:	ec51 0b17 	vmov	r0, r1, d7
 8005bf0:	f7fa fd1a 	bl	8000628 <__aeabi_dmul>
 8005bf4:	9b02      	ldr	r3, [sp, #8]
 8005bf6:	9d00      	ldr	r5, [sp, #0]
 8005bf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bfa:	ec41 0b19 	vmov	d9, r0, r1
 8005bfe:	4649      	mov	r1, r9
 8005c00:	4640      	mov	r0, r8
 8005c02:	f7fa ffab 	bl	8000b5c <__aeabi_d2iz>
 8005c06:	4606      	mov	r6, r0
 8005c08:	f7fa fca4 	bl	8000554 <__aeabi_i2d>
 8005c0c:	3630      	adds	r6, #48	; 0x30
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4640      	mov	r0, r8
 8005c14:	4649      	mov	r1, r9
 8005c16:	f7fa fb4f 	bl	80002b8 <__aeabi_dsub>
 8005c1a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c1e:	9b02      	ldr	r3, [sp, #8]
 8005c20:	429d      	cmp	r5, r3
 8005c22:	4680      	mov	r8, r0
 8005c24:	4689      	mov	r9, r1
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	d124      	bne.n	8005c76 <_dtoa_r+0x62e>
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <_dtoa_r+0x654>)
 8005c2e:	ec51 0b19 	vmov	r0, r1, d9
 8005c32:	f7fa fb43 	bl	80002bc <__adddf3>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa ff83 	bl	8000b48 <__aeabi_dcmpgt>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d173      	bne.n	8005d2e <_dtoa_r+0x6e6>
 8005c46:	ec53 2b19 	vmov	r2, r3, d9
 8005c4a:	4914      	ldr	r1, [pc, #80]	; (8005c9c <_dtoa_r+0x654>)
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f7fa fb33 	bl	80002b8 <__aeabi_dsub>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4640      	mov	r0, r8
 8005c58:	4649      	mov	r1, r9
 8005c5a:	f7fa ff57 	bl	8000b0c <__aeabi_dcmplt>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f43f af2f 	beq.w	8005ac2 <_dtoa_r+0x47a>
 8005c64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c66:	1e6b      	subs	r3, r5, #1
 8005c68:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c6e:	2b30      	cmp	r3, #48	; 0x30
 8005c70:	d0f8      	beq.n	8005c64 <_dtoa_r+0x61c>
 8005c72:	46bb      	mov	fp, r7
 8005c74:	e04a      	b.n	8005d0c <_dtoa_r+0x6c4>
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <_dtoa_r+0x648>)
 8005c78:	f7fa fcd6 	bl	8000628 <__aeabi_dmul>
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4689      	mov	r9, r1
 8005c80:	e7bd      	b.n	8005bfe <_dtoa_r+0x5b6>
 8005c82:	bf00      	nop
 8005c84:	080073d0 	.word	0x080073d0
 8005c88:	080073a8 	.word	0x080073a8
 8005c8c:	3ff00000 	.word	0x3ff00000
 8005c90:	40240000 	.word	0x40240000
 8005c94:	401c0000 	.word	0x401c0000
 8005c98:	40140000 	.word	0x40140000
 8005c9c:	3fe00000 	.word	0x3fe00000
 8005ca0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ca4:	9d00      	ldr	r5, [sp, #0]
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	464b      	mov	r3, r9
 8005caa:	4630      	mov	r0, r6
 8005cac:	4639      	mov	r1, r7
 8005cae:	f7fa fde5 	bl	800087c <__aeabi_ddiv>
 8005cb2:	f7fa ff53 	bl	8000b5c <__aeabi_d2iz>
 8005cb6:	9001      	str	r0, [sp, #4]
 8005cb8:	f7fa fc4c 	bl	8000554 <__aeabi_i2d>
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	f7fa fcb2 	bl	8000628 <__aeabi_dmul>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4630      	mov	r0, r6
 8005cca:	4639      	mov	r1, r7
 8005ccc:	f7fa faf4 	bl	80002b8 <__aeabi_dsub>
 8005cd0:	9e01      	ldr	r6, [sp, #4]
 8005cd2:	9f04      	ldr	r7, [sp, #16]
 8005cd4:	3630      	adds	r6, #48	; 0x30
 8005cd6:	f805 6b01 	strb.w	r6, [r5], #1
 8005cda:	9e00      	ldr	r6, [sp, #0]
 8005cdc:	1bae      	subs	r6, r5, r6
 8005cde:	42b7      	cmp	r7, r6
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	d134      	bne.n	8005d50 <_dtoa_r+0x708>
 8005ce6:	f7fa fae9 	bl	80002bc <__adddf3>
 8005cea:	4642      	mov	r2, r8
 8005cec:	464b      	mov	r3, r9
 8005cee:	4606      	mov	r6, r0
 8005cf0:	460f      	mov	r7, r1
 8005cf2:	f7fa ff29 	bl	8000b48 <__aeabi_dcmpgt>
 8005cf6:	b9c8      	cbnz	r0, 8005d2c <_dtoa_r+0x6e4>
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	4639      	mov	r1, r7
 8005d00:	f7fa fefa 	bl	8000af8 <__aeabi_dcmpeq>
 8005d04:	b110      	cbz	r0, 8005d0c <_dtoa_r+0x6c4>
 8005d06:	9b01      	ldr	r3, [sp, #4]
 8005d08:	07db      	lsls	r3, r3, #31
 8005d0a:	d40f      	bmi.n	8005d2c <_dtoa_r+0x6e4>
 8005d0c:	4651      	mov	r1, sl
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 fad4 	bl	80062bc <_Bfree>
 8005d14:	2300      	movs	r3, #0
 8005d16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d18:	702b      	strb	r3, [r5, #0]
 8005d1a:	f10b 0301 	add.w	r3, fp, #1
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f43f ace2 	beq.w	80056ec <_dtoa_r+0xa4>
 8005d28:	601d      	str	r5, [r3, #0]
 8005d2a:	e4df      	b.n	80056ec <_dtoa_r+0xa4>
 8005d2c:	465f      	mov	r7, fp
 8005d2e:	462b      	mov	r3, r5
 8005d30:	461d      	mov	r5, r3
 8005d32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d36:	2a39      	cmp	r2, #57	; 0x39
 8005d38:	d106      	bne.n	8005d48 <_dtoa_r+0x700>
 8005d3a:	9a00      	ldr	r2, [sp, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d1f7      	bne.n	8005d30 <_dtoa_r+0x6e8>
 8005d40:	9900      	ldr	r1, [sp, #0]
 8005d42:	2230      	movs	r2, #48	; 0x30
 8005d44:	3701      	adds	r7, #1
 8005d46:	700a      	strb	r2, [r1, #0]
 8005d48:	781a      	ldrb	r2, [r3, #0]
 8005d4a:	3201      	adds	r2, #1
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	e790      	b.n	8005c72 <_dtoa_r+0x62a>
 8005d50:	4ba3      	ldr	r3, [pc, #652]	; (8005fe0 <_dtoa_r+0x998>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	f7fa fc68 	bl	8000628 <__aeabi_dmul>
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	460f      	mov	r7, r1
 8005d60:	f7fa feca 	bl	8000af8 <__aeabi_dcmpeq>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d09e      	beq.n	8005ca6 <_dtoa_r+0x65e>
 8005d68:	e7d0      	b.n	8005d0c <_dtoa_r+0x6c4>
 8005d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	f000 80ca 	beq.w	8005f06 <_dtoa_r+0x8be>
 8005d72:	9a07      	ldr	r2, [sp, #28]
 8005d74:	2a01      	cmp	r2, #1
 8005d76:	f300 80ad 	bgt.w	8005ed4 <_dtoa_r+0x88c>
 8005d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	f000 80a5 	beq.w	8005ecc <_dtoa_r+0x884>
 8005d82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d86:	9e08      	ldr	r6, [sp, #32]
 8005d88:	9d05      	ldr	r5, [sp, #20]
 8005d8a:	9a05      	ldr	r2, [sp, #20]
 8005d8c:	441a      	add	r2, r3
 8005d8e:	9205      	str	r2, [sp, #20]
 8005d90:	9a06      	ldr	r2, [sp, #24]
 8005d92:	2101      	movs	r1, #1
 8005d94:	441a      	add	r2, r3
 8005d96:	4620      	mov	r0, r4
 8005d98:	9206      	str	r2, [sp, #24]
 8005d9a:	f000 fb45 	bl	8006428 <__i2b>
 8005d9e:	4607      	mov	r7, r0
 8005da0:	b165      	cbz	r5, 8005dbc <_dtoa_r+0x774>
 8005da2:	9b06      	ldr	r3, [sp, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	dd09      	ble.n	8005dbc <_dtoa_r+0x774>
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	9a05      	ldr	r2, [sp, #20]
 8005dac:	bfa8      	it	ge
 8005dae:	462b      	movge	r3, r5
 8005db0:	1ad2      	subs	r2, r2, r3
 8005db2:	9205      	str	r2, [sp, #20]
 8005db4:	9a06      	ldr	r2, [sp, #24]
 8005db6:	1aed      	subs	r5, r5, r3
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	9306      	str	r3, [sp, #24]
 8005dbc:	9b08      	ldr	r3, [sp, #32]
 8005dbe:	b1f3      	cbz	r3, 8005dfe <_dtoa_r+0x7b6>
 8005dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 80a3 	beq.w	8005f0e <_dtoa_r+0x8c6>
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	dd10      	ble.n	8005dee <_dtoa_r+0x7a6>
 8005dcc:	4639      	mov	r1, r7
 8005dce:	4632      	mov	r2, r6
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 fbe9 	bl	80065a8 <__pow5mult>
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	4601      	mov	r1, r0
 8005dda:	4607      	mov	r7, r0
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 fb39 	bl	8006454 <__multiply>
 8005de2:	4651      	mov	r1, sl
 8005de4:	4680      	mov	r8, r0
 8005de6:	4620      	mov	r0, r4
 8005de8:	f000 fa68 	bl	80062bc <_Bfree>
 8005dec:	46c2      	mov	sl, r8
 8005dee:	9b08      	ldr	r3, [sp, #32]
 8005df0:	1b9a      	subs	r2, r3, r6
 8005df2:	d004      	beq.n	8005dfe <_dtoa_r+0x7b6>
 8005df4:	4651      	mov	r1, sl
 8005df6:	4620      	mov	r0, r4
 8005df8:	f000 fbd6 	bl	80065a8 <__pow5mult>
 8005dfc:	4682      	mov	sl, r0
 8005dfe:	2101      	movs	r1, #1
 8005e00:	4620      	mov	r0, r4
 8005e02:	f000 fb11 	bl	8006428 <__i2b>
 8005e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	f340 8081 	ble.w	8005f12 <_dtoa_r+0x8ca>
 8005e10:	461a      	mov	r2, r3
 8005e12:	4601      	mov	r1, r0
 8005e14:	4620      	mov	r0, r4
 8005e16:	f000 fbc7 	bl	80065a8 <__pow5mult>
 8005e1a:	9b07      	ldr	r3, [sp, #28]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	4606      	mov	r6, r0
 8005e20:	dd7a      	ble.n	8005f18 <_dtoa_r+0x8d0>
 8005e22:	f04f 0800 	mov.w	r8, #0
 8005e26:	6933      	ldr	r3, [r6, #16]
 8005e28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e2c:	6918      	ldr	r0, [r3, #16]
 8005e2e:	f000 faad 	bl	800638c <__hi0bits>
 8005e32:	f1c0 0020 	rsb	r0, r0, #32
 8005e36:	9b06      	ldr	r3, [sp, #24]
 8005e38:	4418      	add	r0, r3
 8005e3a:	f010 001f 	ands.w	r0, r0, #31
 8005e3e:	f000 8094 	beq.w	8005f6a <_dtoa_r+0x922>
 8005e42:	f1c0 0320 	rsb	r3, r0, #32
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	f340 8085 	ble.w	8005f56 <_dtoa_r+0x90e>
 8005e4c:	9b05      	ldr	r3, [sp, #20]
 8005e4e:	f1c0 001c 	rsb	r0, r0, #28
 8005e52:	4403      	add	r3, r0
 8005e54:	9305      	str	r3, [sp, #20]
 8005e56:	9b06      	ldr	r3, [sp, #24]
 8005e58:	4403      	add	r3, r0
 8005e5a:	4405      	add	r5, r0
 8005e5c:	9306      	str	r3, [sp, #24]
 8005e5e:	9b05      	ldr	r3, [sp, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	dd05      	ble.n	8005e70 <_dtoa_r+0x828>
 8005e64:	4651      	mov	r1, sl
 8005e66:	461a      	mov	r2, r3
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f000 fbf7 	bl	800665c <__lshift>
 8005e6e:	4682      	mov	sl, r0
 8005e70:	9b06      	ldr	r3, [sp, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	dd05      	ble.n	8005e82 <_dtoa_r+0x83a>
 8005e76:	4631      	mov	r1, r6
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 fbee 	bl	800665c <__lshift>
 8005e80:	4606      	mov	r6, r0
 8005e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d072      	beq.n	8005f6e <_dtoa_r+0x926>
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	f000 fc52 	bl	8006734 <__mcmp>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	da6c      	bge.n	8005f6e <_dtoa_r+0x926>
 8005e94:	2300      	movs	r3, #0
 8005e96:	4651      	mov	r1, sl
 8005e98:	220a      	movs	r2, #10
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 fa30 	bl	8006300 <__multadd>
 8005ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ea6:	4682      	mov	sl, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 81b0 	beq.w	800620e <_dtoa_r+0xbc6>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f000 fa23 	bl	8006300 <__multadd>
 8005eba:	9b01      	ldr	r3, [sp, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	f300 8096 	bgt.w	8005ff0 <_dtoa_r+0x9a8>
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	dc59      	bgt.n	8005f7e <_dtoa_r+0x936>
 8005eca:	e091      	b.n	8005ff0 <_dtoa_r+0x9a8>
 8005ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ece:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ed2:	e758      	b.n	8005d86 <_dtoa_r+0x73e>
 8005ed4:	9b04      	ldr	r3, [sp, #16]
 8005ed6:	1e5e      	subs	r6, r3, #1
 8005ed8:	9b08      	ldr	r3, [sp, #32]
 8005eda:	42b3      	cmp	r3, r6
 8005edc:	bfbf      	itttt	lt
 8005ede:	9b08      	ldrlt	r3, [sp, #32]
 8005ee0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005ee2:	9608      	strlt	r6, [sp, #32]
 8005ee4:	1af3      	sublt	r3, r6, r3
 8005ee6:	bfb4      	ite	lt
 8005ee8:	18d2      	addlt	r2, r2, r3
 8005eea:	1b9e      	subge	r6, r3, r6
 8005eec:	9b04      	ldr	r3, [sp, #16]
 8005eee:	bfbc      	itt	lt
 8005ef0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005ef2:	2600      	movlt	r6, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bfb7      	itett	lt
 8005ef8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005efc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005f00:	1a9d      	sublt	r5, r3, r2
 8005f02:	2300      	movlt	r3, #0
 8005f04:	e741      	b.n	8005d8a <_dtoa_r+0x742>
 8005f06:	9e08      	ldr	r6, [sp, #32]
 8005f08:	9d05      	ldr	r5, [sp, #20]
 8005f0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f0c:	e748      	b.n	8005da0 <_dtoa_r+0x758>
 8005f0e:	9a08      	ldr	r2, [sp, #32]
 8005f10:	e770      	b.n	8005df4 <_dtoa_r+0x7ac>
 8005f12:	9b07      	ldr	r3, [sp, #28]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	dc19      	bgt.n	8005f4c <_dtoa_r+0x904>
 8005f18:	9b02      	ldr	r3, [sp, #8]
 8005f1a:	b9bb      	cbnz	r3, 8005f4c <_dtoa_r+0x904>
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f22:	b99b      	cbnz	r3, 8005f4c <_dtoa_r+0x904>
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f2a:	0d1b      	lsrs	r3, r3, #20
 8005f2c:	051b      	lsls	r3, r3, #20
 8005f2e:	b183      	cbz	r3, 8005f52 <_dtoa_r+0x90a>
 8005f30:	9b05      	ldr	r3, [sp, #20]
 8005f32:	3301      	adds	r3, #1
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	9b06      	ldr	r3, [sp, #24]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	9306      	str	r3, [sp, #24]
 8005f3c:	f04f 0801 	mov.w	r8, #1
 8005f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f47f af6f 	bne.w	8005e26 <_dtoa_r+0x7de>
 8005f48:	2001      	movs	r0, #1
 8005f4a:	e774      	b.n	8005e36 <_dtoa_r+0x7ee>
 8005f4c:	f04f 0800 	mov.w	r8, #0
 8005f50:	e7f6      	b.n	8005f40 <_dtoa_r+0x8f8>
 8005f52:	4698      	mov	r8, r3
 8005f54:	e7f4      	b.n	8005f40 <_dtoa_r+0x8f8>
 8005f56:	d082      	beq.n	8005e5e <_dtoa_r+0x816>
 8005f58:	9a05      	ldr	r2, [sp, #20]
 8005f5a:	331c      	adds	r3, #28
 8005f5c:	441a      	add	r2, r3
 8005f5e:	9205      	str	r2, [sp, #20]
 8005f60:	9a06      	ldr	r2, [sp, #24]
 8005f62:	441a      	add	r2, r3
 8005f64:	441d      	add	r5, r3
 8005f66:	9206      	str	r2, [sp, #24]
 8005f68:	e779      	b.n	8005e5e <_dtoa_r+0x816>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	e7f4      	b.n	8005f58 <_dtoa_r+0x910>
 8005f6e:	9b04      	ldr	r3, [sp, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	dc37      	bgt.n	8005fe4 <_dtoa_r+0x99c>
 8005f74:	9b07      	ldr	r3, [sp, #28]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	dd34      	ble.n	8005fe4 <_dtoa_r+0x99c>
 8005f7a:	9b04      	ldr	r3, [sp, #16]
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	b963      	cbnz	r3, 8005f9c <_dtoa_r+0x954>
 8005f82:	4631      	mov	r1, r6
 8005f84:	2205      	movs	r2, #5
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 f9ba 	bl	8006300 <__multadd>
 8005f8c:	4601      	mov	r1, r0
 8005f8e:	4606      	mov	r6, r0
 8005f90:	4650      	mov	r0, sl
 8005f92:	f000 fbcf 	bl	8006734 <__mcmp>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	f73f adbb 	bgt.w	8005b12 <_dtoa_r+0x4ca>
 8005f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f9e:	9d00      	ldr	r5, [sp, #0]
 8005fa0:	ea6f 0b03 	mvn.w	fp, r3
 8005fa4:	f04f 0800 	mov.w	r8, #0
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4620      	mov	r0, r4
 8005fac:	f000 f986 	bl	80062bc <_Bfree>
 8005fb0:	2f00      	cmp	r7, #0
 8005fb2:	f43f aeab 	beq.w	8005d0c <_dtoa_r+0x6c4>
 8005fb6:	f1b8 0f00 	cmp.w	r8, #0
 8005fba:	d005      	beq.n	8005fc8 <_dtoa_r+0x980>
 8005fbc:	45b8      	cmp	r8, r7
 8005fbe:	d003      	beq.n	8005fc8 <_dtoa_r+0x980>
 8005fc0:	4641      	mov	r1, r8
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f97a 	bl	80062bc <_Bfree>
 8005fc8:	4639      	mov	r1, r7
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f976 	bl	80062bc <_Bfree>
 8005fd0:	e69c      	b.n	8005d0c <_dtoa_r+0x6c4>
 8005fd2:	2600      	movs	r6, #0
 8005fd4:	4637      	mov	r7, r6
 8005fd6:	e7e1      	b.n	8005f9c <_dtoa_r+0x954>
 8005fd8:	46bb      	mov	fp, r7
 8005fda:	4637      	mov	r7, r6
 8005fdc:	e599      	b.n	8005b12 <_dtoa_r+0x4ca>
 8005fde:	bf00      	nop
 8005fe0:	40240000 	.word	0x40240000
 8005fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 80c8 	beq.w	800617c <_dtoa_r+0xb34>
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	2d00      	cmp	r5, #0
 8005ff2:	dd05      	ble.n	8006000 <_dtoa_r+0x9b8>
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fb2f 	bl	800665c <__lshift>
 8005ffe:	4607      	mov	r7, r0
 8006000:	f1b8 0f00 	cmp.w	r8, #0
 8006004:	d05b      	beq.n	80060be <_dtoa_r+0xa76>
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4620      	mov	r0, r4
 800600a:	f000 f917 	bl	800623c <_Balloc>
 800600e:	4605      	mov	r5, r0
 8006010:	b928      	cbnz	r0, 800601e <_dtoa_r+0x9d6>
 8006012:	4b83      	ldr	r3, [pc, #524]	; (8006220 <_dtoa_r+0xbd8>)
 8006014:	4602      	mov	r2, r0
 8006016:	f240 21ef 	movw	r1, #751	; 0x2ef
 800601a:	f7ff bb2e 	b.w	800567a <_dtoa_r+0x32>
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	3202      	adds	r2, #2
 8006022:	0092      	lsls	r2, r2, #2
 8006024:	f107 010c 	add.w	r1, r7, #12
 8006028:	300c      	adds	r0, #12
 800602a:	f000 fca1 	bl	8006970 <memcpy>
 800602e:	2201      	movs	r2, #1
 8006030:	4629      	mov	r1, r5
 8006032:	4620      	mov	r0, r4
 8006034:	f000 fb12 	bl	800665c <__lshift>
 8006038:	9b00      	ldr	r3, [sp, #0]
 800603a:	3301      	adds	r3, #1
 800603c:	9304      	str	r3, [sp, #16]
 800603e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006042:	4413      	add	r3, r2
 8006044:	9308      	str	r3, [sp, #32]
 8006046:	9b02      	ldr	r3, [sp, #8]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	46b8      	mov	r8, r7
 800604e:	9306      	str	r3, [sp, #24]
 8006050:	4607      	mov	r7, r0
 8006052:	9b04      	ldr	r3, [sp, #16]
 8006054:	4631      	mov	r1, r6
 8006056:	3b01      	subs	r3, #1
 8006058:	4650      	mov	r0, sl
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	f7ff fa6a 	bl	8005534 <quorem>
 8006060:	4641      	mov	r1, r8
 8006062:	9002      	str	r0, [sp, #8]
 8006064:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006068:	4650      	mov	r0, sl
 800606a:	f000 fb63 	bl	8006734 <__mcmp>
 800606e:	463a      	mov	r2, r7
 8006070:	9005      	str	r0, [sp, #20]
 8006072:	4631      	mov	r1, r6
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fb79 	bl	800676c <__mdiff>
 800607a:	68c2      	ldr	r2, [r0, #12]
 800607c:	4605      	mov	r5, r0
 800607e:	bb02      	cbnz	r2, 80060c2 <_dtoa_r+0xa7a>
 8006080:	4601      	mov	r1, r0
 8006082:	4650      	mov	r0, sl
 8006084:	f000 fb56 	bl	8006734 <__mcmp>
 8006088:	4602      	mov	r2, r0
 800608a:	4629      	mov	r1, r5
 800608c:	4620      	mov	r0, r4
 800608e:	9209      	str	r2, [sp, #36]	; 0x24
 8006090:	f000 f914 	bl	80062bc <_Bfree>
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006098:	9d04      	ldr	r5, [sp, #16]
 800609a:	ea43 0102 	orr.w	r1, r3, r2
 800609e:	9b06      	ldr	r3, [sp, #24]
 80060a0:	4319      	orrs	r1, r3
 80060a2:	d110      	bne.n	80060c6 <_dtoa_r+0xa7e>
 80060a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060a8:	d029      	beq.n	80060fe <_dtoa_r+0xab6>
 80060aa:	9b05      	ldr	r3, [sp, #20]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dd02      	ble.n	80060b6 <_dtoa_r+0xa6e>
 80060b0:	9b02      	ldr	r3, [sp, #8]
 80060b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80060b6:	9b01      	ldr	r3, [sp, #4]
 80060b8:	f883 9000 	strb.w	r9, [r3]
 80060bc:	e774      	b.n	8005fa8 <_dtoa_r+0x960>
 80060be:	4638      	mov	r0, r7
 80060c0:	e7ba      	b.n	8006038 <_dtoa_r+0x9f0>
 80060c2:	2201      	movs	r2, #1
 80060c4:	e7e1      	b.n	800608a <_dtoa_r+0xa42>
 80060c6:	9b05      	ldr	r3, [sp, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	db04      	blt.n	80060d6 <_dtoa_r+0xa8e>
 80060cc:	9907      	ldr	r1, [sp, #28]
 80060ce:	430b      	orrs	r3, r1
 80060d0:	9906      	ldr	r1, [sp, #24]
 80060d2:	430b      	orrs	r3, r1
 80060d4:	d120      	bne.n	8006118 <_dtoa_r+0xad0>
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	dded      	ble.n	80060b6 <_dtoa_r+0xa6e>
 80060da:	4651      	mov	r1, sl
 80060dc:	2201      	movs	r2, #1
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 fabc 	bl	800665c <__lshift>
 80060e4:	4631      	mov	r1, r6
 80060e6:	4682      	mov	sl, r0
 80060e8:	f000 fb24 	bl	8006734 <__mcmp>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	dc03      	bgt.n	80060f8 <_dtoa_r+0xab0>
 80060f0:	d1e1      	bne.n	80060b6 <_dtoa_r+0xa6e>
 80060f2:	f019 0f01 	tst.w	r9, #1
 80060f6:	d0de      	beq.n	80060b6 <_dtoa_r+0xa6e>
 80060f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060fc:	d1d8      	bne.n	80060b0 <_dtoa_r+0xa68>
 80060fe:	9a01      	ldr	r2, [sp, #4]
 8006100:	2339      	movs	r3, #57	; 0x39
 8006102:	7013      	strb	r3, [r2, #0]
 8006104:	462b      	mov	r3, r5
 8006106:	461d      	mov	r5, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800610e:	2a39      	cmp	r2, #57	; 0x39
 8006110:	d06c      	beq.n	80061ec <_dtoa_r+0xba4>
 8006112:	3201      	adds	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e747      	b.n	8005fa8 <_dtoa_r+0x960>
 8006118:	2a00      	cmp	r2, #0
 800611a:	dd07      	ble.n	800612c <_dtoa_r+0xae4>
 800611c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006120:	d0ed      	beq.n	80060fe <_dtoa_r+0xab6>
 8006122:	9a01      	ldr	r2, [sp, #4]
 8006124:	f109 0301 	add.w	r3, r9, #1
 8006128:	7013      	strb	r3, [r2, #0]
 800612a:	e73d      	b.n	8005fa8 <_dtoa_r+0x960>
 800612c:	9b04      	ldr	r3, [sp, #16]
 800612e:	9a08      	ldr	r2, [sp, #32]
 8006130:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006134:	4293      	cmp	r3, r2
 8006136:	d043      	beq.n	80061c0 <_dtoa_r+0xb78>
 8006138:	4651      	mov	r1, sl
 800613a:	2300      	movs	r3, #0
 800613c:	220a      	movs	r2, #10
 800613e:	4620      	mov	r0, r4
 8006140:	f000 f8de 	bl	8006300 <__multadd>
 8006144:	45b8      	cmp	r8, r7
 8006146:	4682      	mov	sl, r0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	f04f 020a 	mov.w	r2, #10
 8006150:	4641      	mov	r1, r8
 8006152:	4620      	mov	r0, r4
 8006154:	d107      	bne.n	8006166 <_dtoa_r+0xb1e>
 8006156:	f000 f8d3 	bl	8006300 <__multadd>
 800615a:	4680      	mov	r8, r0
 800615c:	4607      	mov	r7, r0
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	3301      	adds	r3, #1
 8006162:	9304      	str	r3, [sp, #16]
 8006164:	e775      	b.n	8006052 <_dtoa_r+0xa0a>
 8006166:	f000 f8cb 	bl	8006300 <__multadd>
 800616a:	4639      	mov	r1, r7
 800616c:	4680      	mov	r8, r0
 800616e:	2300      	movs	r3, #0
 8006170:	220a      	movs	r2, #10
 8006172:	4620      	mov	r0, r4
 8006174:	f000 f8c4 	bl	8006300 <__multadd>
 8006178:	4607      	mov	r7, r0
 800617a:	e7f0      	b.n	800615e <_dtoa_r+0xb16>
 800617c:	9b04      	ldr	r3, [sp, #16]
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	9d00      	ldr	r5, [sp, #0]
 8006182:	4631      	mov	r1, r6
 8006184:	4650      	mov	r0, sl
 8006186:	f7ff f9d5 	bl	8005534 <quorem>
 800618a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800618e:	9b00      	ldr	r3, [sp, #0]
 8006190:	f805 9b01 	strb.w	r9, [r5], #1
 8006194:	1aea      	subs	r2, r5, r3
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	4293      	cmp	r3, r2
 800619a:	dd07      	ble.n	80061ac <_dtoa_r+0xb64>
 800619c:	4651      	mov	r1, sl
 800619e:	2300      	movs	r3, #0
 80061a0:	220a      	movs	r2, #10
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 f8ac 	bl	8006300 <__multadd>
 80061a8:	4682      	mov	sl, r0
 80061aa:	e7ea      	b.n	8006182 <_dtoa_r+0xb3a>
 80061ac:	9b01      	ldr	r3, [sp, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bfc8      	it	gt
 80061b2:	461d      	movgt	r5, r3
 80061b4:	9b00      	ldr	r3, [sp, #0]
 80061b6:	bfd8      	it	le
 80061b8:	2501      	movle	r5, #1
 80061ba:	441d      	add	r5, r3
 80061bc:	f04f 0800 	mov.w	r8, #0
 80061c0:	4651      	mov	r1, sl
 80061c2:	2201      	movs	r2, #1
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fa49 	bl	800665c <__lshift>
 80061ca:	4631      	mov	r1, r6
 80061cc:	4682      	mov	sl, r0
 80061ce:	f000 fab1 	bl	8006734 <__mcmp>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	dc96      	bgt.n	8006104 <_dtoa_r+0xabc>
 80061d6:	d102      	bne.n	80061de <_dtoa_r+0xb96>
 80061d8:	f019 0f01 	tst.w	r9, #1
 80061dc:	d192      	bne.n	8006104 <_dtoa_r+0xabc>
 80061de:	462b      	mov	r3, r5
 80061e0:	461d      	mov	r5, r3
 80061e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061e6:	2a30      	cmp	r2, #48	; 0x30
 80061e8:	d0fa      	beq.n	80061e0 <_dtoa_r+0xb98>
 80061ea:	e6dd      	b.n	8005fa8 <_dtoa_r+0x960>
 80061ec:	9a00      	ldr	r2, [sp, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d189      	bne.n	8006106 <_dtoa_r+0xabe>
 80061f2:	f10b 0b01 	add.w	fp, fp, #1
 80061f6:	2331      	movs	r3, #49	; 0x31
 80061f8:	e796      	b.n	8006128 <_dtoa_r+0xae0>
 80061fa:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <_dtoa_r+0xbdc>)
 80061fc:	f7ff ba99 	b.w	8005732 <_dtoa_r+0xea>
 8006200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006202:	2b00      	cmp	r3, #0
 8006204:	f47f aa6d 	bne.w	80056e2 <_dtoa_r+0x9a>
 8006208:	4b07      	ldr	r3, [pc, #28]	; (8006228 <_dtoa_r+0xbe0>)
 800620a:	f7ff ba92 	b.w	8005732 <_dtoa_r+0xea>
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	dcb5      	bgt.n	8006180 <_dtoa_r+0xb38>
 8006214:	9b07      	ldr	r3, [sp, #28]
 8006216:	2b02      	cmp	r3, #2
 8006218:	f73f aeb1 	bgt.w	8005f7e <_dtoa_r+0x936>
 800621c:	e7b0      	b.n	8006180 <_dtoa_r+0xb38>
 800621e:	bf00      	nop
 8006220:	0800733a 	.word	0x0800733a
 8006224:	080072c9 	.word	0x080072c9
 8006228:	080072bc 	.word	0x080072bc

0800622c <malloc>:
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <malloc+0xc>)
 800622e:	4601      	mov	r1, r0
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	f7fe bef3 	b.w	800501c <_malloc_r>
 8006236:	bf00      	nop
 8006238:	2000006c 	.word	0x2000006c

0800623c <_Balloc>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	69c6      	ldr	r6, [r0, #28]
 8006240:	4604      	mov	r4, r0
 8006242:	460d      	mov	r5, r1
 8006244:	b976      	cbnz	r6, 8006264 <_Balloc+0x28>
 8006246:	2010      	movs	r0, #16
 8006248:	f7ff fff0 	bl	800622c <malloc>
 800624c:	4602      	mov	r2, r0
 800624e:	61e0      	str	r0, [r4, #28]
 8006250:	b920      	cbnz	r0, 800625c <_Balloc+0x20>
 8006252:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <_Balloc+0x78>)
 8006254:	4818      	ldr	r0, [pc, #96]	; (80062b8 <_Balloc+0x7c>)
 8006256:	216b      	movs	r1, #107	; 0x6b
 8006258:	f000 fb98 	bl	800698c <__assert_func>
 800625c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006260:	6006      	str	r6, [r0, #0]
 8006262:	60c6      	str	r6, [r0, #12]
 8006264:	69e6      	ldr	r6, [r4, #28]
 8006266:	68f3      	ldr	r3, [r6, #12]
 8006268:	b183      	cbz	r3, 800628c <_Balloc+0x50>
 800626a:	69e3      	ldr	r3, [r4, #28]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006272:	b9b8      	cbnz	r0, 80062a4 <_Balloc+0x68>
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f605 	lsl.w	r6, r1, r5
 800627a:	1d72      	adds	r2, r6, #5
 800627c:	0092      	lsls	r2, r2, #2
 800627e:	4620      	mov	r0, r4
 8006280:	f000 fba2 	bl	80069c8 <_calloc_r>
 8006284:	b160      	cbz	r0, 80062a0 <_Balloc+0x64>
 8006286:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800628a:	e00e      	b.n	80062aa <_Balloc+0x6e>
 800628c:	2221      	movs	r2, #33	; 0x21
 800628e:	2104      	movs	r1, #4
 8006290:	4620      	mov	r0, r4
 8006292:	f000 fb99 	bl	80069c8 <_calloc_r>
 8006296:	69e3      	ldr	r3, [r4, #28]
 8006298:	60f0      	str	r0, [r6, #12]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e4      	bne.n	800626a <_Balloc+0x2e>
 80062a0:	2000      	movs	r0, #0
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	6802      	ldr	r2, [r0, #0]
 80062a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062aa:	2300      	movs	r3, #0
 80062ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062b0:	e7f7      	b.n	80062a2 <_Balloc+0x66>
 80062b2:	bf00      	nop
 80062b4:	080072cb 	.word	0x080072cb
 80062b8:	0800734b 	.word	0x0800734b

080062bc <_Bfree>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	69c6      	ldr	r6, [r0, #28]
 80062c0:	4605      	mov	r5, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	b976      	cbnz	r6, 80062e4 <_Bfree+0x28>
 80062c6:	2010      	movs	r0, #16
 80062c8:	f7ff ffb0 	bl	800622c <malloc>
 80062cc:	4602      	mov	r2, r0
 80062ce:	61e8      	str	r0, [r5, #28]
 80062d0:	b920      	cbnz	r0, 80062dc <_Bfree+0x20>
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <_Bfree+0x3c>)
 80062d4:	4809      	ldr	r0, [pc, #36]	; (80062fc <_Bfree+0x40>)
 80062d6:	218f      	movs	r1, #143	; 0x8f
 80062d8:	f000 fb58 	bl	800698c <__assert_func>
 80062dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062e0:	6006      	str	r6, [r0, #0]
 80062e2:	60c6      	str	r6, [r0, #12]
 80062e4:	b13c      	cbz	r4, 80062f6 <_Bfree+0x3a>
 80062e6:	69eb      	ldr	r3, [r5, #28]
 80062e8:	6862      	ldr	r2, [r4, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062f0:	6021      	str	r1, [r4, #0]
 80062f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	080072cb 	.word	0x080072cb
 80062fc:	0800734b 	.word	0x0800734b

08006300 <__multadd>:
 8006300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006304:	690d      	ldr	r5, [r1, #16]
 8006306:	4607      	mov	r7, r0
 8006308:	460c      	mov	r4, r1
 800630a:	461e      	mov	r6, r3
 800630c:	f101 0c14 	add.w	ip, r1, #20
 8006310:	2000      	movs	r0, #0
 8006312:	f8dc 3000 	ldr.w	r3, [ip]
 8006316:	b299      	uxth	r1, r3
 8006318:	fb02 6101 	mla	r1, r2, r1, r6
 800631c:	0c1e      	lsrs	r6, r3, #16
 800631e:	0c0b      	lsrs	r3, r1, #16
 8006320:	fb02 3306 	mla	r3, r2, r6, r3
 8006324:	b289      	uxth	r1, r1
 8006326:	3001      	adds	r0, #1
 8006328:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800632c:	4285      	cmp	r5, r0
 800632e:	f84c 1b04 	str.w	r1, [ip], #4
 8006332:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006336:	dcec      	bgt.n	8006312 <__multadd+0x12>
 8006338:	b30e      	cbz	r6, 800637e <__multadd+0x7e>
 800633a:	68a3      	ldr	r3, [r4, #8]
 800633c:	42ab      	cmp	r3, r5
 800633e:	dc19      	bgt.n	8006374 <__multadd+0x74>
 8006340:	6861      	ldr	r1, [r4, #4]
 8006342:	4638      	mov	r0, r7
 8006344:	3101      	adds	r1, #1
 8006346:	f7ff ff79 	bl	800623c <_Balloc>
 800634a:	4680      	mov	r8, r0
 800634c:	b928      	cbnz	r0, 800635a <__multadd+0x5a>
 800634e:	4602      	mov	r2, r0
 8006350:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <__multadd+0x84>)
 8006352:	480d      	ldr	r0, [pc, #52]	; (8006388 <__multadd+0x88>)
 8006354:	21ba      	movs	r1, #186	; 0xba
 8006356:	f000 fb19 	bl	800698c <__assert_func>
 800635a:	6922      	ldr	r2, [r4, #16]
 800635c:	3202      	adds	r2, #2
 800635e:	f104 010c 	add.w	r1, r4, #12
 8006362:	0092      	lsls	r2, r2, #2
 8006364:	300c      	adds	r0, #12
 8006366:	f000 fb03 	bl	8006970 <memcpy>
 800636a:	4621      	mov	r1, r4
 800636c:	4638      	mov	r0, r7
 800636e:	f7ff ffa5 	bl	80062bc <_Bfree>
 8006372:	4644      	mov	r4, r8
 8006374:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006378:	3501      	adds	r5, #1
 800637a:	615e      	str	r6, [r3, #20]
 800637c:	6125      	str	r5, [r4, #16]
 800637e:	4620      	mov	r0, r4
 8006380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006384:	0800733a 	.word	0x0800733a
 8006388:	0800734b 	.word	0x0800734b

0800638c <__hi0bits>:
 800638c:	0c03      	lsrs	r3, r0, #16
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	b9d3      	cbnz	r3, 80063c8 <__hi0bits+0x3c>
 8006392:	0400      	lsls	r0, r0, #16
 8006394:	2310      	movs	r3, #16
 8006396:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800639a:	bf04      	itt	eq
 800639c:	0200      	lsleq	r0, r0, #8
 800639e:	3308      	addeq	r3, #8
 80063a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80063a4:	bf04      	itt	eq
 80063a6:	0100      	lsleq	r0, r0, #4
 80063a8:	3304      	addeq	r3, #4
 80063aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80063ae:	bf04      	itt	eq
 80063b0:	0080      	lsleq	r0, r0, #2
 80063b2:	3302      	addeq	r3, #2
 80063b4:	2800      	cmp	r0, #0
 80063b6:	db05      	blt.n	80063c4 <__hi0bits+0x38>
 80063b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063bc:	f103 0301 	add.w	r3, r3, #1
 80063c0:	bf08      	it	eq
 80063c2:	2320      	moveq	r3, #32
 80063c4:	4618      	mov	r0, r3
 80063c6:	4770      	bx	lr
 80063c8:	2300      	movs	r3, #0
 80063ca:	e7e4      	b.n	8006396 <__hi0bits+0xa>

080063cc <__lo0bits>:
 80063cc:	6803      	ldr	r3, [r0, #0]
 80063ce:	f013 0207 	ands.w	r2, r3, #7
 80063d2:	d00c      	beq.n	80063ee <__lo0bits+0x22>
 80063d4:	07d9      	lsls	r1, r3, #31
 80063d6:	d422      	bmi.n	800641e <__lo0bits+0x52>
 80063d8:	079a      	lsls	r2, r3, #30
 80063da:	bf49      	itett	mi
 80063dc:	085b      	lsrmi	r3, r3, #1
 80063de:	089b      	lsrpl	r3, r3, #2
 80063e0:	6003      	strmi	r3, [r0, #0]
 80063e2:	2201      	movmi	r2, #1
 80063e4:	bf5c      	itt	pl
 80063e6:	6003      	strpl	r3, [r0, #0]
 80063e8:	2202      	movpl	r2, #2
 80063ea:	4610      	mov	r0, r2
 80063ec:	4770      	bx	lr
 80063ee:	b299      	uxth	r1, r3
 80063f0:	b909      	cbnz	r1, 80063f6 <__lo0bits+0x2a>
 80063f2:	0c1b      	lsrs	r3, r3, #16
 80063f4:	2210      	movs	r2, #16
 80063f6:	b2d9      	uxtb	r1, r3
 80063f8:	b909      	cbnz	r1, 80063fe <__lo0bits+0x32>
 80063fa:	3208      	adds	r2, #8
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	0719      	lsls	r1, r3, #28
 8006400:	bf04      	itt	eq
 8006402:	091b      	lsreq	r3, r3, #4
 8006404:	3204      	addeq	r2, #4
 8006406:	0799      	lsls	r1, r3, #30
 8006408:	bf04      	itt	eq
 800640a:	089b      	lsreq	r3, r3, #2
 800640c:	3202      	addeq	r2, #2
 800640e:	07d9      	lsls	r1, r3, #31
 8006410:	d403      	bmi.n	800641a <__lo0bits+0x4e>
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	f102 0201 	add.w	r2, r2, #1
 8006418:	d003      	beq.n	8006422 <__lo0bits+0x56>
 800641a:	6003      	str	r3, [r0, #0]
 800641c:	e7e5      	b.n	80063ea <__lo0bits+0x1e>
 800641e:	2200      	movs	r2, #0
 8006420:	e7e3      	b.n	80063ea <__lo0bits+0x1e>
 8006422:	2220      	movs	r2, #32
 8006424:	e7e1      	b.n	80063ea <__lo0bits+0x1e>
	...

08006428 <__i2b>:
 8006428:	b510      	push	{r4, lr}
 800642a:	460c      	mov	r4, r1
 800642c:	2101      	movs	r1, #1
 800642e:	f7ff ff05 	bl	800623c <_Balloc>
 8006432:	4602      	mov	r2, r0
 8006434:	b928      	cbnz	r0, 8006442 <__i2b+0x1a>
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <__i2b+0x24>)
 8006438:	4805      	ldr	r0, [pc, #20]	; (8006450 <__i2b+0x28>)
 800643a:	f240 1145 	movw	r1, #325	; 0x145
 800643e:	f000 faa5 	bl	800698c <__assert_func>
 8006442:	2301      	movs	r3, #1
 8006444:	6144      	str	r4, [r0, #20]
 8006446:	6103      	str	r3, [r0, #16]
 8006448:	bd10      	pop	{r4, pc}
 800644a:	bf00      	nop
 800644c:	0800733a 	.word	0x0800733a
 8006450:	0800734b 	.word	0x0800734b

08006454 <__multiply>:
 8006454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	4691      	mov	r9, r2
 800645a:	690a      	ldr	r2, [r1, #16]
 800645c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006460:	429a      	cmp	r2, r3
 8006462:	bfb8      	it	lt
 8006464:	460b      	movlt	r3, r1
 8006466:	460c      	mov	r4, r1
 8006468:	bfbc      	itt	lt
 800646a:	464c      	movlt	r4, r9
 800646c:	4699      	movlt	r9, r3
 800646e:	6927      	ldr	r7, [r4, #16]
 8006470:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006474:	68a3      	ldr	r3, [r4, #8]
 8006476:	6861      	ldr	r1, [r4, #4]
 8006478:	eb07 060a 	add.w	r6, r7, sl
 800647c:	42b3      	cmp	r3, r6
 800647e:	b085      	sub	sp, #20
 8006480:	bfb8      	it	lt
 8006482:	3101      	addlt	r1, #1
 8006484:	f7ff feda 	bl	800623c <_Balloc>
 8006488:	b930      	cbnz	r0, 8006498 <__multiply+0x44>
 800648a:	4602      	mov	r2, r0
 800648c:	4b44      	ldr	r3, [pc, #272]	; (80065a0 <__multiply+0x14c>)
 800648e:	4845      	ldr	r0, [pc, #276]	; (80065a4 <__multiply+0x150>)
 8006490:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006494:	f000 fa7a 	bl	800698c <__assert_func>
 8006498:	f100 0514 	add.w	r5, r0, #20
 800649c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064a0:	462b      	mov	r3, r5
 80064a2:	2200      	movs	r2, #0
 80064a4:	4543      	cmp	r3, r8
 80064a6:	d321      	bcc.n	80064ec <__multiply+0x98>
 80064a8:	f104 0314 	add.w	r3, r4, #20
 80064ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064b0:	f109 0314 	add.w	r3, r9, #20
 80064b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064b8:	9202      	str	r2, [sp, #8]
 80064ba:	1b3a      	subs	r2, r7, r4
 80064bc:	3a15      	subs	r2, #21
 80064be:	f022 0203 	bic.w	r2, r2, #3
 80064c2:	3204      	adds	r2, #4
 80064c4:	f104 0115 	add.w	r1, r4, #21
 80064c8:	428f      	cmp	r7, r1
 80064ca:	bf38      	it	cc
 80064cc:	2204      	movcc	r2, #4
 80064ce:	9201      	str	r2, [sp, #4]
 80064d0:	9a02      	ldr	r2, [sp, #8]
 80064d2:	9303      	str	r3, [sp, #12]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d80c      	bhi.n	80064f2 <__multiply+0x9e>
 80064d8:	2e00      	cmp	r6, #0
 80064da:	dd03      	ble.n	80064e4 <__multiply+0x90>
 80064dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d05b      	beq.n	800659c <__multiply+0x148>
 80064e4:	6106      	str	r6, [r0, #16]
 80064e6:	b005      	add	sp, #20
 80064e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ec:	f843 2b04 	str.w	r2, [r3], #4
 80064f0:	e7d8      	b.n	80064a4 <__multiply+0x50>
 80064f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80064f6:	f1ba 0f00 	cmp.w	sl, #0
 80064fa:	d024      	beq.n	8006546 <__multiply+0xf2>
 80064fc:	f104 0e14 	add.w	lr, r4, #20
 8006500:	46a9      	mov	r9, r5
 8006502:	f04f 0c00 	mov.w	ip, #0
 8006506:	f85e 2b04 	ldr.w	r2, [lr], #4
 800650a:	f8d9 1000 	ldr.w	r1, [r9]
 800650e:	fa1f fb82 	uxth.w	fp, r2
 8006512:	b289      	uxth	r1, r1
 8006514:	fb0a 110b 	mla	r1, sl, fp, r1
 8006518:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800651c:	f8d9 2000 	ldr.w	r2, [r9]
 8006520:	4461      	add	r1, ip
 8006522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006526:	fb0a c20b 	mla	r2, sl, fp, ip
 800652a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800652e:	b289      	uxth	r1, r1
 8006530:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006534:	4577      	cmp	r7, lr
 8006536:	f849 1b04 	str.w	r1, [r9], #4
 800653a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800653e:	d8e2      	bhi.n	8006506 <__multiply+0xb2>
 8006540:	9a01      	ldr	r2, [sp, #4]
 8006542:	f845 c002 	str.w	ip, [r5, r2]
 8006546:	9a03      	ldr	r2, [sp, #12]
 8006548:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800654c:	3304      	adds	r3, #4
 800654e:	f1b9 0f00 	cmp.w	r9, #0
 8006552:	d021      	beq.n	8006598 <__multiply+0x144>
 8006554:	6829      	ldr	r1, [r5, #0]
 8006556:	f104 0c14 	add.w	ip, r4, #20
 800655a:	46ae      	mov	lr, r5
 800655c:	f04f 0a00 	mov.w	sl, #0
 8006560:	f8bc b000 	ldrh.w	fp, [ip]
 8006564:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006568:	fb09 220b 	mla	r2, r9, fp, r2
 800656c:	4452      	add	r2, sl
 800656e:	b289      	uxth	r1, r1
 8006570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006574:	f84e 1b04 	str.w	r1, [lr], #4
 8006578:	f85c 1b04 	ldr.w	r1, [ip], #4
 800657c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006580:	f8be 1000 	ldrh.w	r1, [lr]
 8006584:	fb09 110a 	mla	r1, r9, sl, r1
 8006588:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800658c:	4567      	cmp	r7, ip
 800658e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006592:	d8e5      	bhi.n	8006560 <__multiply+0x10c>
 8006594:	9a01      	ldr	r2, [sp, #4]
 8006596:	50a9      	str	r1, [r5, r2]
 8006598:	3504      	adds	r5, #4
 800659a:	e799      	b.n	80064d0 <__multiply+0x7c>
 800659c:	3e01      	subs	r6, #1
 800659e:	e79b      	b.n	80064d8 <__multiply+0x84>
 80065a0:	0800733a 	.word	0x0800733a
 80065a4:	0800734b 	.word	0x0800734b

080065a8 <__pow5mult>:
 80065a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ac:	4615      	mov	r5, r2
 80065ae:	f012 0203 	ands.w	r2, r2, #3
 80065b2:	4606      	mov	r6, r0
 80065b4:	460f      	mov	r7, r1
 80065b6:	d007      	beq.n	80065c8 <__pow5mult+0x20>
 80065b8:	4c25      	ldr	r4, [pc, #148]	; (8006650 <__pow5mult+0xa8>)
 80065ba:	3a01      	subs	r2, #1
 80065bc:	2300      	movs	r3, #0
 80065be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065c2:	f7ff fe9d 	bl	8006300 <__multadd>
 80065c6:	4607      	mov	r7, r0
 80065c8:	10ad      	asrs	r5, r5, #2
 80065ca:	d03d      	beq.n	8006648 <__pow5mult+0xa0>
 80065cc:	69f4      	ldr	r4, [r6, #28]
 80065ce:	b97c      	cbnz	r4, 80065f0 <__pow5mult+0x48>
 80065d0:	2010      	movs	r0, #16
 80065d2:	f7ff fe2b 	bl	800622c <malloc>
 80065d6:	4602      	mov	r2, r0
 80065d8:	61f0      	str	r0, [r6, #28]
 80065da:	b928      	cbnz	r0, 80065e8 <__pow5mult+0x40>
 80065dc:	4b1d      	ldr	r3, [pc, #116]	; (8006654 <__pow5mult+0xac>)
 80065de:	481e      	ldr	r0, [pc, #120]	; (8006658 <__pow5mult+0xb0>)
 80065e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80065e4:	f000 f9d2 	bl	800698c <__assert_func>
 80065e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065ec:	6004      	str	r4, [r0, #0]
 80065ee:	60c4      	str	r4, [r0, #12]
 80065f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80065f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065f8:	b94c      	cbnz	r4, 800660e <__pow5mult+0x66>
 80065fa:	f240 2171 	movw	r1, #625	; 0x271
 80065fe:	4630      	mov	r0, r6
 8006600:	f7ff ff12 	bl	8006428 <__i2b>
 8006604:	2300      	movs	r3, #0
 8006606:	f8c8 0008 	str.w	r0, [r8, #8]
 800660a:	4604      	mov	r4, r0
 800660c:	6003      	str	r3, [r0, #0]
 800660e:	f04f 0900 	mov.w	r9, #0
 8006612:	07eb      	lsls	r3, r5, #31
 8006614:	d50a      	bpl.n	800662c <__pow5mult+0x84>
 8006616:	4639      	mov	r1, r7
 8006618:	4622      	mov	r2, r4
 800661a:	4630      	mov	r0, r6
 800661c:	f7ff ff1a 	bl	8006454 <__multiply>
 8006620:	4639      	mov	r1, r7
 8006622:	4680      	mov	r8, r0
 8006624:	4630      	mov	r0, r6
 8006626:	f7ff fe49 	bl	80062bc <_Bfree>
 800662a:	4647      	mov	r7, r8
 800662c:	106d      	asrs	r5, r5, #1
 800662e:	d00b      	beq.n	8006648 <__pow5mult+0xa0>
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	b938      	cbnz	r0, 8006644 <__pow5mult+0x9c>
 8006634:	4622      	mov	r2, r4
 8006636:	4621      	mov	r1, r4
 8006638:	4630      	mov	r0, r6
 800663a:	f7ff ff0b 	bl	8006454 <__multiply>
 800663e:	6020      	str	r0, [r4, #0]
 8006640:	f8c0 9000 	str.w	r9, [r0]
 8006644:	4604      	mov	r4, r0
 8006646:	e7e4      	b.n	8006612 <__pow5mult+0x6a>
 8006648:	4638      	mov	r0, r7
 800664a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800664e:	bf00      	nop
 8006650:	08007498 	.word	0x08007498
 8006654:	080072cb 	.word	0x080072cb
 8006658:	0800734b 	.word	0x0800734b

0800665c <__lshift>:
 800665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006660:	460c      	mov	r4, r1
 8006662:	6849      	ldr	r1, [r1, #4]
 8006664:	6923      	ldr	r3, [r4, #16]
 8006666:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800666a:	68a3      	ldr	r3, [r4, #8]
 800666c:	4607      	mov	r7, r0
 800666e:	4691      	mov	r9, r2
 8006670:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006674:	f108 0601 	add.w	r6, r8, #1
 8006678:	42b3      	cmp	r3, r6
 800667a:	db0b      	blt.n	8006694 <__lshift+0x38>
 800667c:	4638      	mov	r0, r7
 800667e:	f7ff fddd 	bl	800623c <_Balloc>
 8006682:	4605      	mov	r5, r0
 8006684:	b948      	cbnz	r0, 800669a <__lshift+0x3e>
 8006686:	4602      	mov	r2, r0
 8006688:	4b28      	ldr	r3, [pc, #160]	; (800672c <__lshift+0xd0>)
 800668a:	4829      	ldr	r0, [pc, #164]	; (8006730 <__lshift+0xd4>)
 800668c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006690:	f000 f97c 	bl	800698c <__assert_func>
 8006694:	3101      	adds	r1, #1
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	e7ee      	b.n	8006678 <__lshift+0x1c>
 800669a:	2300      	movs	r3, #0
 800669c:	f100 0114 	add.w	r1, r0, #20
 80066a0:	f100 0210 	add.w	r2, r0, #16
 80066a4:	4618      	mov	r0, r3
 80066a6:	4553      	cmp	r3, sl
 80066a8:	db33      	blt.n	8006712 <__lshift+0xb6>
 80066aa:	6920      	ldr	r0, [r4, #16]
 80066ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066b0:	f104 0314 	add.w	r3, r4, #20
 80066b4:	f019 091f 	ands.w	r9, r9, #31
 80066b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066c0:	d02b      	beq.n	800671a <__lshift+0xbe>
 80066c2:	f1c9 0e20 	rsb	lr, r9, #32
 80066c6:	468a      	mov	sl, r1
 80066c8:	2200      	movs	r2, #0
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	fa00 f009 	lsl.w	r0, r0, r9
 80066d0:	4310      	orrs	r0, r2
 80066d2:	f84a 0b04 	str.w	r0, [sl], #4
 80066d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066da:	459c      	cmp	ip, r3
 80066dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80066e0:	d8f3      	bhi.n	80066ca <__lshift+0x6e>
 80066e2:	ebac 0304 	sub.w	r3, ip, r4
 80066e6:	3b15      	subs	r3, #21
 80066e8:	f023 0303 	bic.w	r3, r3, #3
 80066ec:	3304      	adds	r3, #4
 80066ee:	f104 0015 	add.w	r0, r4, #21
 80066f2:	4584      	cmp	ip, r0
 80066f4:	bf38      	it	cc
 80066f6:	2304      	movcc	r3, #4
 80066f8:	50ca      	str	r2, [r1, r3]
 80066fa:	b10a      	cbz	r2, 8006700 <__lshift+0xa4>
 80066fc:	f108 0602 	add.w	r6, r8, #2
 8006700:	3e01      	subs	r6, #1
 8006702:	4638      	mov	r0, r7
 8006704:	612e      	str	r6, [r5, #16]
 8006706:	4621      	mov	r1, r4
 8006708:	f7ff fdd8 	bl	80062bc <_Bfree>
 800670c:	4628      	mov	r0, r5
 800670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006712:	f842 0f04 	str.w	r0, [r2, #4]!
 8006716:	3301      	adds	r3, #1
 8006718:	e7c5      	b.n	80066a6 <__lshift+0x4a>
 800671a:	3904      	subs	r1, #4
 800671c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006720:	f841 2f04 	str.w	r2, [r1, #4]!
 8006724:	459c      	cmp	ip, r3
 8006726:	d8f9      	bhi.n	800671c <__lshift+0xc0>
 8006728:	e7ea      	b.n	8006700 <__lshift+0xa4>
 800672a:	bf00      	nop
 800672c:	0800733a 	.word	0x0800733a
 8006730:	0800734b 	.word	0x0800734b

08006734 <__mcmp>:
 8006734:	b530      	push	{r4, r5, lr}
 8006736:	6902      	ldr	r2, [r0, #16]
 8006738:	690c      	ldr	r4, [r1, #16]
 800673a:	1b12      	subs	r2, r2, r4
 800673c:	d10e      	bne.n	800675c <__mcmp+0x28>
 800673e:	f100 0314 	add.w	r3, r0, #20
 8006742:	3114      	adds	r1, #20
 8006744:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006748:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800674c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006750:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006754:	42a5      	cmp	r5, r4
 8006756:	d003      	beq.n	8006760 <__mcmp+0x2c>
 8006758:	d305      	bcc.n	8006766 <__mcmp+0x32>
 800675a:	2201      	movs	r2, #1
 800675c:	4610      	mov	r0, r2
 800675e:	bd30      	pop	{r4, r5, pc}
 8006760:	4283      	cmp	r3, r0
 8006762:	d3f3      	bcc.n	800674c <__mcmp+0x18>
 8006764:	e7fa      	b.n	800675c <__mcmp+0x28>
 8006766:	f04f 32ff 	mov.w	r2, #4294967295
 800676a:	e7f7      	b.n	800675c <__mcmp+0x28>

0800676c <__mdiff>:
 800676c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006770:	460c      	mov	r4, r1
 8006772:	4606      	mov	r6, r0
 8006774:	4611      	mov	r1, r2
 8006776:	4620      	mov	r0, r4
 8006778:	4690      	mov	r8, r2
 800677a:	f7ff ffdb 	bl	8006734 <__mcmp>
 800677e:	1e05      	subs	r5, r0, #0
 8006780:	d110      	bne.n	80067a4 <__mdiff+0x38>
 8006782:	4629      	mov	r1, r5
 8006784:	4630      	mov	r0, r6
 8006786:	f7ff fd59 	bl	800623c <_Balloc>
 800678a:	b930      	cbnz	r0, 800679a <__mdiff+0x2e>
 800678c:	4b3a      	ldr	r3, [pc, #232]	; (8006878 <__mdiff+0x10c>)
 800678e:	4602      	mov	r2, r0
 8006790:	f240 2137 	movw	r1, #567	; 0x237
 8006794:	4839      	ldr	r0, [pc, #228]	; (800687c <__mdiff+0x110>)
 8006796:	f000 f8f9 	bl	800698c <__assert_func>
 800679a:	2301      	movs	r3, #1
 800679c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	bfa4      	itt	ge
 80067a6:	4643      	movge	r3, r8
 80067a8:	46a0      	movge	r8, r4
 80067aa:	4630      	mov	r0, r6
 80067ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067b0:	bfa6      	itte	ge
 80067b2:	461c      	movge	r4, r3
 80067b4:	2500      	movge	r5, #0
 80067b6:	2501      	movlt	r5, #1
 80067b8:	f7ff fd40 	bl	800623c <_Balloc>
 80067bc:	b920      	cbnz	r0, 80067c8 <__mdiff+0x5c>
 80067be:	4b2e      	ldr	r3, [pc, #184]	; (8006878 <__mdiff+0x10c>)
 80067c0:	4602      	mov	r2, r0
 80067c2:	f240 2145 	movw	r1, #581	; 0x245
 80067c6:	e7e5      	b.n	8006794 <__mdiff+0x28>
 80067c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067cc:	6926      	ldr	r6, [r4, #16]
 80067ce:	60c5      	str	r5, [r0, #12]
 80067d0:	f104 0914 	add.w	r9, r4, #20
 80067d4:	f108 0514 	add.w	r5, r8, #20
 80067d8:	f100 0e14 	add.w	lr, r0, #20
 80067dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80067e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80067e4:	f108 0210 	add.w	r2, r8, #16
 80067e8:	46f2      	mov	sl, lr
 80067ea:	2100      	movs	r1, #0
 80067ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80067f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80067f4:	fa11 f88b 	uxtah	r8, r1, fp
 80067f8:	b299      	uxth	r1, r3
 80067fa:	0c1b      	lsrs	r3, r3, #16
 80067fc:	eba8 0801 	sub.w	r8, r8, r1
 8006800:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006804:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006808:	fa1f f888 	uxth.w	r8, r8
 800680c:	1419      	asrs	r1, r3, #16
 800680e:	454e      	cmp	r6, r9
 8006810:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006814:	f84a 3b04 	str.w	r3, [sl], #4
 8006818:	d8e8      	bhi.n	80067ec <__mdiff+0x80>
 800681a:	1b33      	subs	r3, r6, r4
 800681c:	3b15      	subs	r3, #21
 800681e:	f023 0303 	bic.w	r3, r3, #3
 8006822:	3304      	adds	r3, #4
 8006824:	3415      	adds	r4, #21
 8006826:	42a6      	cmp	r6, r4
 8006828:	bf38      	it	cc
 800682a:	2304      	movcc	r3, #4
 800682c:	441d      	add	r5, r3
 800682e:	4473      	add	r3, lr
 8006830:	469e      	mov	lr, r3
 8006832:	462e      	mov	r6, r5
 8006834:	4566      	cmp	r6, ip
 8006836:	d30e      	bcc.n	8006856 <__mdiff+0xea>
 8006838:	f10c 0203 	add.w	r2, ip, #3
 800683c:	1b52      	subs	r2, r2, r5
 800683e:	f022 0203 	bic.w	r2, r2, #3
 8006842:	3d03      	subs	r5, #3
 8006844:	45ac      	cmp	ip, r5
 8006846:	bf38      	it	cc
 8006848:	2200      	movcc	r2, #0
 800684a:	4413      	add	r3, r2
 800684c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006850:	b17a      	cbz	r2, 8006872 <__mdiff+0x106>
 8006852:	6107      	str	r7, [r0, #16]
 8006854:	e7a4      	b.n	80067a0 <__mdiff+0x34>
 8006856:	f856 8b04 	ldr.w	r8, [r6], #4
 800685a:	fa11 f288 	uxtah	r2, r1, r8
 800685e:	1414      	asrs	r4, r2, #16
 8006860:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006864:	b292      	uxth	r2, r2
 8006866:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800686a:	f84e 2b04 	str.w	r2, [lr], #4
 800686e:	1421      	asrs	r1, r4, #16
 8006870:	e7e0      	b.n	8006834 <__mdiff+0xc8>
 8006872:	3f01      	subs	r7, #1
 8006874:	e7ea      	b.n	800684c <__mdiff+0xe0>
 8006876:	bf00      	nop
 8006878:	0800733a 	.word	0x0800733a
 800687c:	0800734b 	.word	0x0800734b

08006880 <__d2b>:
 8006880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006884:	460f      	mov	r7, r1
 8006886:	2101      	movs	r1, #1
 8006888:	ec59 8b10 	vmov	r8, r9, d0
 800688c:	4616      	mov	r6, r2
 800688e:	f7ff fcd5 	bl	800623c <_Balloc>
 8006892:	4604      	mov	r4, r0
 8006894:	b930      	cbnz	r0, 80068a4 <__d2b+0x24>
 8006896:	4602      	mov	r2, r0
 8006898:	4b24      	ldr	r3, [pc, #144]	; (800692c <__d2b+0xac>)
 800689a:	4825      	ldr	r0, [pc, #148]	; (8006930 <__d2b+0xb0>)
 800689c:	f240 310f 	movw	r1, #783	; 0x30f
 80068a0:	f000 f874 	bl	800698c <__assert_func>
 80068a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068ac:	bb2d      	cbnz	r5, 80068fa <__d2b+0x7a>
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	f1b8 0300 	subs.w	r3, r8, #0
 80068b4:	d026      	beq.n	8006904 <__d2b+0x84>
 80068b6:	4668      	mov	r0, sp
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	f7ff fd87 	bl	80063cc <__lo0bits>
 80068be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068c2:	b1e8      	cbz	r0, 8006900 <__d2b+0x80>
 80068c4:	f1c0 0320 	rsb	r3, r0, #32
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	430b      	orrs	r3, r1
 80068ce:	40c2      	lsrs	r2, r0
 80068d0:	6163      	str	r3, [r4, #20]
 80068d2:	9201      	str	r2, [sp, #4]
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	61a3      	str	r3, [r4, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf14      	ite	ne
 80068dc:	2202      	movne	r2, #2
 80068de:	2201      	moveq	r2, #1
 80068e0:	6122      	str	r2, [r4, #16]
 80068e2:	b1bd      	cbz	r5, 8006914 <__d2b+0x94>
 80068e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068e8:	4405      	add	r5, r0
 80068ea:	603d      	str	r5, [r7, #0]
 80068ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068f0:	6030      	str	r0, [r6, #0]
 80068f2:	4620      	mov	r0, r4
 80068f4:	b003      	add	sp, #12
 80068f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068fe:	e7d6      	b.n	80068ae <__d2b+0x2e>
 8006900:	6161      	str	r1, [r4, #20]
 8006902:	e7e7      	b.n	80068d4 <__d2b+0x54>
 8006904:	a801      	add	r0, sp, #4
 8006906:	f7ff fd61 	bl	80063cc <__lo0bits>
 800690a:	9b01      	ldr	r3, [sp, #4]
 800690c:	6163      	str	r3, [r4, #20]
 800690e:	3020      	adds	r0, #32
 8006910:	2201      	movs	r2, #1
 8006912:	e7e5      	b.n	80068e0 <__d2b+0x60>
 8006914:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006918:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800691c:	6038      	str	r0, [r7, #0]
 800691e:	6918      	ldr	r0, [r3, #16]
 8006920:	f7ff fd34 	bl	800638c <__hi0bits>
 8006924:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006928:	e7e2      	b.n	80068f0 <__d2b+0x70>
 800692a:	bf00      	nop
 800692c:	0800733a 	.word	0x0800733a
 8006930:	0800734b 	.word	0x0800734b

08006934 <_mprec_log10>:
 8006934:	2817      	cmp	r0, #23
 8006936:	b5d0      	push	{r4, r6, r7, lr}
 8006938:	4604      	mov	r4, r0
 800693a:	dc07      	bgt.n	800694c <_mprec_log10+0x18>
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <_mprec_log10+0x30>)
 800693e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8006942:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006946:	ec41 0b10 	vmov	d0, r0, r1
 800694a:	bdd0      	pop	{r4, r6, r7, pc}
 800694c:	4906      	ldr	r1, [pc, #24]	; (8006968 <_mprec_log10+0x34>)
 800694e:	4f07      	ldr	r7, [pc, #28]	; (800696c <_mprec_log10+0x38>)
 8006950:	2000      	movs	r0, #0
 8006952:	2600      	movs	r6, #0
 8006954:	4632      	mov	r2, r6
 8006956:	463b      	mov	r3, r7
 8006958:	f7f9 fe66 	bl	8000628 <__aeabi_dmul>
 800695c:	3c01      	subs	r4, #1
 800695e:	d1f9      	bne.n	8006954 <_mprec_log10+0x20>
 8006960:	e7f1      	b.n	8006946 <_mprec_log10+0x12>
 8006962:	bf00      	nop
 8006964:	080073d0 	.word	0x080073d0
 8006968:	3ff00000 	.word	0x3ff00000
 800696c:	40240000 	.word	0x40240000

08006970 <memcpy>:
 8006970:	440a      	add	r2, r1
 8006972:	4291      	cmp	r1, r2
 8006974:	f100 33ff 	add.w	r3, r0, #4294967295
 8006978:	d100      	bne.n	800697c <memcpy+0xc>
 800697a:	4770      	bx	lr
 800697c:	b510      	push	{r4, lr}
 800697e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006986:	4291      	cmp	r1, r2
 8006988:	d1f9      	bne.n	800697e <memcpy+0xe>
 800698a:	bd10      	pop	{r4, pc}

0800698c <__assert_func>:
 800698c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800698e:	4614      	mov	r4, r2
 8006990:	461a      	mov	r2, r3
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <__assert_func+0x2c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4605      	mov	r5, r0
 8006998:	68d8      	ldr	r0, [r3, #12]
 800699a:	b14c      	cbz	r4, 80069b0 <__assert_func+0x24>
 800699c:	4b07      	ldr	r3, [pc, #28]	; (80069bc <__assert_func+0x30>)
 800699e:	9100      	str	r1, [sp, #0]
 80069a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069a4:	4906      	ldr	r1, [pc, #24]	; (80069c0 <__assert_func+0x34>)
 80069a6:	462b      	mov	r3, r5
 80069a8:	f000 f824 	bl	80069f4 <fiprintf>
 80069ac:	f000 f834 	bl	8006a18 <abort>
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <__assert_func+0x38>)
 80069b2:	461c      	mov	r4, r3
 80069b4:	e7f3      	b.n	800699e <__assert_func+0x12>
 80069b6:	bf00      	nop
 80069b8:	2000006c 	.word	0x2000006c
 80069bc:	080074a4 	.word	0x080074a4
 80069c0:	080074b1 	.word	0x080074b1
 80069c4:	080074df 	.word	0x080074df

080069c8 <_calloc_r>:
 80069c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069ca:	fba1 2402 	umull	r2, r4, r1, r2
 80069ce:	b94c      	cbnz	r4, 80069e4 <_calloc_r+0x1c>
 80069d0:	4611      	mov	r1, r2
 80069d2:	9201      	str	r2, [sp, #4]
 80069d4:	f7fe fb22 	bl	800501c <_malloc_r>
 80069d8:	9a01      	ldr	r2, [sp, #4]
 80069da:	4605      	mov	r5, r0
 80069dc:	b930      	cbnz	r0, 80069ec <_calloc_r+0x24>
 80069de:	4628      	mov	r0, r5
 80069e0:	b003      	add	sp, #12
 80069e2:	bd30      	pop	{r4, r5, pc}
 80069e4:	220c      	movs	r2, #12
 80069e6:	6002      	str	r2, [r0, #0]
 80069e8:	2500      	movs	r5, #0
 80069ea:	e7f8      	b.n	80069de <_calloc_r+0x16>
 80069ec:	4621      	mov	r1, r4
 80069ee:	f7fe fa2c 	bl	8004e4a <memset>
 80069f2:	e7f4      	b.n	80069de <_calloc_r+0x16>

080069f4 <fiprintf>:
 80069f4:	b40e      	push	{r1, r2, r3}
 80069f6:	b503      	push	{r0, r1, lr}
 80069f8:	4601      	mov	r1, r0
 80069fa:	ab03      	add	r3, sp, #12
 80069fc:	4805      	ldr	r0, [pc, #20]	; (8006a14 <fiprintf+0x20>)
 80069fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a02:	6800      	ldr	r0, [r0, #0]
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	f000 f837 	bl	8006a78 <_vfiprintf_r>
 8006a0a:	b002      	add	sp, #8
 8006a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a10:	b003      	add	sp, #12
 8006a12:	4770      	bx	lr
 8006a14:	2000006c 	.word	0x2000006c

08006a18 <abort>:
 8006a18:	b508      	push	{r3, lr}
 8006a1a:	2006      	movs	r0, #6
 8006a1c:	f000 fb94 	bl	8007148 <raise>
 8006a20:	2001      	movs	r0, #1
 8006a22:	f7fb fb51 	bl	80020c8 <_exit>

08006a26 <__sfputc_r>:
 8006a26:	6893      	ldr	r3, [r2, #8]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	b410      	push	{r4}
 8006a2e:	6093      	str	r3, [r2, #8]
 8006a30:	da08      	bge.n	8006a44 <__sfputc_r+0x1e>
 8006a32:	6994      	ldr	r4, [r2, #24]
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	db01      	blt.n	8006a3c <__sfputc_r+0x16>
 8006a38:	290a      	cmp	r1, #10
 8006a3a:	d103      	bne.n	8006a44 <__sfputc_r+0x1e>
 8006a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a40:	f000 bac4 	b.w	8006fcc <__swbuf_r>
 8006a44:	6813      	ldr	r3, [r2, #0]
 8006a46:	1c58      	adds	r0, r3, #1
 8006a48:	6010      	str	r0, [r2, #0]
 8006a4a:	7019      	strb	r1, [r3, #0]
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <__sfputs_r>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	4606      	mov	r6, r0
 8006a58:	460f      	mov	r7, r1
 8006a5a:	4614      	mov	r4, r2
 8006a5c:	18d5      	adds	r5, r2, r3
 8006a5e:	42ac      	cmp	r4, r5
 8006a60:	d101      	bne.n	8006a66 <__sfputs_r+0x12>
 8006a62:	2000      	movs	r0, #0
 8006a64:	e007      	b.n	8006a76 <__sfputs_r+0x22>
 8006a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6a:	463a      	mov	r2, r7
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f7ff ffda 	bl	8006a26 <__sfputc_r>
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d1f3      	bne.n	8006a5e <__sfputs_r+0xa>
 8006a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a78 <_vfiprintf_r>:
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	b09d      	sub	sp, #116	; 0x74
 8006a80:	4614      	mov	r4, r2
 8006a82:	4698      	mov	r8, r3
 8006a84:	4606      	mov	r6, r0
 8006a86:	b118      	cbz	r0, 8006a90 <_vfiprintf_r+0x18>
 8006a88:	6a03      	ldr	r3, [r0, #32]
 8006a8a:	b90b      	cbnz	r3, 8006a90 <_vfiprintf_r+0x18>
 8006a8c:	f7fe f964 	bl	8004d58 <__sinit>
 8006a90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a92:	07d9      	lsls	r1, r3, #31
 8006a94:	d405      	bmi.n	8006aa2 <_vfiprintf_r+0x2a>
 8006a96:	89ab      	ldrh	r3, [r5, #12]
 8006a98:	059a      	lsls	r2, r3, #22
 8006a9a:	d402      	bmi.n	8006aa2 <_vfiprintf_r+0x2a>
 8006a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a9e:	f7fe fa4e 	bl	8004f3e <__retarget_lock_acquire_recursive>
 8006aa2:	89ab      	ldrh	r3, [r5, #12]
 8006aa4:	071b      	lsls	r3, r3, #28
 8006aa6:	d501      	bpl.n	8006aac <_vfiprintf_r+0x34>
 8006aa8:	692b      	ldr	r3, [r5, #16]
 8006aaa:	b99b      	cbnz	r3, 8006ad4 <_vfiprintf_r+0x5c>
 8006aac:	4629      	mov	r1, r5
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f000 faca 	bl	8007048 <__swsetup_r>
 8006ab4:	b170      	cbz	r0, 8006ad4 <_vfiprintf_r+0x5c>
 8006ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ab8:	07dc      	lsls	r4, r3, #31
 8006aba:	d504      	bpl.n	8006ac6 <_vfiprintf_r+0x4e>
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	b01d      	add	sp, #116	; 0x74
 8006ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	0598      	lsls	r0, r3, #22
 8006aca:	d4f7      	bmi.n	8006abc <_vfiprintf_r+0x44>
 8006acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ace:	f7fe fa37 	bl	8004f40 <__retarget_lock_release_recursive>
 8006ad2:	e7f3      	b.n	8006abc <_vfiprintf_r+0x44>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad8:	2320      	movs	r3, #32
 8006ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae2:	2330      	movs	r3, #48	; 0x30
 8006ae4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006c98 <_vfiprintf_r+0x220>
 8006ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aec:	f04f 0901 	mov.w	r9, #1
 8006af0:	4623      	mov	r3, r4
 8006af2:	469a      	mov	sl, r3
 8006af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af8:	b10a      	cbz	r2, 8006afe <_vfiprintf_r+0x86>
 8006afa:	2a25      	cmp	r2, #37	; 0x25
 8006afc:	d1f9      	bne.n	8006af2 <_vfiprintf_r+0x7a>
 8006afe:	ebba 0b04 	subs.w	fp, sl, r4
 8006b02:	d00b      	beq.n	8006b1c <_vfiprintf_r+0xa4>
 8006b04:	465b      	mov	r3, fp
 8006b06:	4622      	mov	r2, r4
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7ff ffa2 	bl	8006a54 <__sfputs_r>
 8006b10:	3001      	adds	r0, #1
 8006b12:	f000 80a9 	beq.w	8006c68 <_vfiprintf_r+0x1f0>
 8006b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b18:	445a      	add	r2, fp
 8006b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80a1 	beq.w	8006c68 <_vfiprintf_r+0x1f0>
 8006b26:	2300      	movs	r3, #0
 8006b28:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b30:	f10a 0a01 	add.w	sl, sl, #1
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	9307      	str	r3, [sp, #28]
 8006b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b3e:	4654      	mov	r4, sl
 8006b40:	2205      	movs	r2, #5
 8006b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b46:	4854      	ldr	r0, [pc, #336]	; (8006c98 <_vfiprintf_r+0x220>)
 8006b48:	f7f9 fb62 	bl	8000210 <memchr>
 8006b4c:	9a04      	ldr	r2, [sp, #16]
 8006b4e:	b9d8      	cbnz	r0, 8006b88 <_vfiprintf_r+0x110>
 8006b50:	06d1      	lsls	r1, r2, #27
 8006b52:	bf44      	itt	mi
 8006b54:	2320      	movmi	r3, #32
 8006b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5a:	0713      	lsls	r3, r2, #28
 8006b5c:	bf44      	itt	mi
 8006b5e:	232b      	movmi	r3, #43	; 0x2b
 8006b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b64:	f89a 3000 	ldrb.w	r3, [sl]
 8006b68:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6a:	d015      	beq.n	8006b98 <_vfiprintf_r+0x120>
 8006b6c:	9a07      	ldr	r2, [sp, #28]
 8006b6e:	4654      	mov	r4, sl
 8006b70:	2000      	movs	r0, #0
 8006b72:	f04f 0c0a 	mov.w	ip, #10
 8006b76:	4621      	mov	r1, r4
 8006b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b7c:	3b30      	subs	r3, #48	; 0x30
 8006b7e:	2b09      	cmp	r3, #9
 8006b80:	d94d      	bls.n	8006c1e <_vfiprintf_r+0x1a6>
 8006b82:	b1b0      	cbz	r0, 8006bb2 <_vfiprintf_r+0x13a>
 8006b84:	9207      	str	r2, [sp, #28]
 8006b86:	e014      	b.n	8006bb2 <_vfiprintf_r+0x13a>
 8006b88:	eba0 0308 	sub.w	r3, r0, r8
 8006b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	9304      	str	r3, [sp, #16]
 8006b94:	46a2      	mov	sl, r4
 8006b96:	e7d2      	b.n	8006b3e <_vfiprintf_r+0xc6>
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	1d19      	adds	r1, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	9103      	str	r1, [sp, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bfbb      	ittet	lt
 8006ba4:	425b      	neglt	r3, r3
 8006ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8006baa:	9307      	strge	r3, [sp, #28]
 8006bac:	9307      	strlt	r3, [sp, #28]
 8006bae:	bfb8      	it	lt
 8006bb0:	9204      	strlt	r2, [sp, #16]
 8006bb2:	7823      	ldrb	r3, [r4, #0]
 8006bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb6:	d10c      	bne.n	8006bd2 <_vfiprintf_r+0x15a>
 8006bb8:	7863      	ldrb	r3, [r4, #1]
 8006bba:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbc:	d134      	bne.n	8006c28 <_vfiprintf_r+0x1b0>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	1d1a      	adds	r2, r3, #4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	9203      	str	r2, [sp, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfb8      	it	lt
 8006bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bce:	3402      	adds	r4, #2
 8006bd0:	9305      	str	r3, [sp, #20]
 8006bd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006ca8 <_vfiprintf_r+0x230>
 8006bd6:	7821      	ldrb	r1, [r4, #0]
 8006bd8:	2203      	movs	r2, #3
 8006bda:	4650      	mov	r0, sl
 8006bdc:	f7f9 fb18 	bl	8000210 <memchr>
 8006be0:	b138      	cbz	r0, 8006bf2 <_vfiprintf_r+0x17a>
 8006be2:	9b04      	ldr	r3, [sp, #16]
 8006be4:	eba0 000a 	sub.w	r0, r0, sl
 8006be8:	2240      	movs	r2, #64	; 0x40
 8006bea:	4082      	lsls	r2, r0
 8006bec:	4313      	orrs	r3, r2
 8006bee:	3401      	adds	r4, #1
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf6:	4829      	ldr	r0, [pc, #164]	; (8006c9c <_vfiprintf_r+0x224>)
 8006bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bfc:	2206      	movs	r2, #6
 8006bfe:	f7f9 fb07 	bl	8000210 <memchr>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d03f      	beq.n	8006c86 <_vfiprintf_r+0x20e>
 8006c06:	4b26      	ldr	r3, [pc, #152]	; (8006ca0 <_vfiprintf_r+0x228>)
 8006c08:	bb1b      	cbnz	r3, 8006c52 <_vfiprintf_r+0x1da>
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	3307      	adds	r3, #7
 8006c0e:	f023 0307 	bic.w	r3, r3, #7
 8006c12:	3308      	adds	r3, #8
 8006c14:	9303      	str	r3, [sp, #12]
 8006c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c18:	443b      	add	r3, r7
 8006c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1c:	e768      	b.n	8006af0 <_vfiprintf_r+0x78>
 8006c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c22:	460c      	mov	r4, r1
 8006c24:	2001      	movs	r0, #1
 8006c26:	e7a6      	b.n	8006b76 <_vfiprintf_r+0xfe>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	3401      	adds	r4, #1
 8006c2c:	9305      	str	r3, [sp, #20]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f04f 0c0a 	mov.w	ip, #10
 8006c34:	4620      	mov	r0, r4
 8006c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3a:	3a30      	subs	r2, #48	; 0x30
 8006c3c:	2a09      	cmp	r2, #9
 8006c3e:	d903      	bls.n	8006c48 <_vfiprintf_r+0x1d0>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0c6      	beq.n	8006bd2 <_vfiprintf_r+0x15a>
 8006c44:	9105      	str	r1, [sp, #20]
 8006c46:	e7c4      	b.n	8006bd2 <_vfiprintf_r+0x15a>
 8006c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e7f0      	b.n	8006c34 <_vfiprintf_r+0x1bc>
 8006c52:	ab03      	add	r3, sp, #12
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	462a      	mov	r2, r5
 8006c58:	4b12      	ldr	r3, [pc, #72]	; (8006ca4 <_vfiprintf_r+0x22c>)
 8006c5a:	a904      	add	r1, sp, #16
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f3af 8000 	nop.w
 8006c62:	4607      	mov	r7, r0
 8006c64:	1c78      	adds	r0, r7, #1
 8006c66:	d1d6      	bne.n	8006c16 <_vfiprintf_r+0x19e>
 8006c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c6a:	07d9      	lsls	r1, r3, #31
 8006c6c:	d405      	bmi.n	8006c7a <_vfiprintf_r+0x202>
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	059a      	lsls	r2, r3, #22
 8006c72:	d402      	bmi.n	8006c7a <_vfiprintf_r+0x202>
 8006c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c76:	f7fe f963 	bl	8004f40 <__retarget_lock_release_recursive>
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	065b      	lsls	r3, r3, #25
 8006c7e:	f53f af1d 	bmi.w	8006abc <_vfiprintf_r+0x44>
 8006c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c84:	e71c      	b.n	8006ac0 <_vfiprintf_r+0x48>
 8006c86:	ab03      	add	r3, sp, #12
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <_vfiprintf_r+0x22c>)
 8006c8e:	a904      	add	r1, sp, #16
 8006c90:	4630      	mov	r0, r6
 8006c92:	f000 f879 	bl	8006d88 <_printf_i>
 8006c96:	e7e4      	b.n	8006c62 <_vfiprintf_r+0x1ea>
 8006c98:	080074e0 	.word	0x080074e0
 8006c9c:	080074ea 	.word	0x080074ea
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	08006a55 	.word	0x08006a55
 8006ca8:	080074e6 	.word	0x080074e6

08006cac <_printf_common>:
 8006cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb0:	4616      	mov	r6, r2
 8006cb2:	4699      	mov	r9, r3
 8006cb4:	688a      	ldr	r2, [r1, #8]
 8006cb6:	690b      	ldr	r3, [r1, #16]
 8006cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	bfb8      	it	lt
 8006cc0:	4613      	movlt	r3, r2
 8006cc2:	6033      	str	r3, [r6, #0]
 8006cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cc8:	4607      	mov	r7, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	b10a      	cbz	r2, 8006cd2 <_printf_common+0x26>
 8006cce:	3301      	adds	r3, #1
 8006cd0:	6033      	str	r3, [r6, #0]
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	0699      	lsls	r1, r3, #26
 8006cd6:	bf42      	ittt	mi
 8006cd8:	6833      	ldrmi	r3, [r6, #0]
 8006cda:	3302      	addmi	r3, #2
 8006cdc:	6033      	strmi	r3, [r6, #0]
 8006cde:	6825      	ldr	r5, [r4, #0]
 8006ce0:	f015 0506 	ands.w	r5, r5, #6
 8006ce4:	d106      	bne.n	8006cf4 <_printf_common+0x48>
 8006ce6:	f104 0a19 	add.w	sl, r4, #25
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	6832      	ldr	r2, [r6, #0]
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	dc26      	bgt.n	8006d42 <_printf_common+0x96>
 8006cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf8:	1e13      	subs	r3, r2, #0
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	bf18      	it	ne
 8006cfe:	2301      	movne	r3, #1
 8006d00:	0692      	lsls	r2, r2, #26
 8006d02:	d42b      	bmi.n	8006d5c <_printf_common+0xb0>
 8006d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d08:	4649      	mov	r1, r9
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	47c0      	blx	r8
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d01e      	beq.n	8006d50 <_printf_common+0xa4>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	6922      	ldr	r2, [r4, #16]
 8006d16:	f003 0306 	and.w	r3, r3, #6
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	bf02      	ittt	eq
 8006d1e:	68e5      	ldreq	r5, [r4, #12]
 8006d20:	6833      	ldreq	r3, [r6, #0]
 8006d22:	1aed      	subeq	r5, r5, r3
 8006d24:	68a3      	ldr	r3, [r4, #8]
 8006d26:	bf0c      	ite	eq
 8006d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d2c:	2500      	movne	r5, #0
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	bfc4      	itt	gt
 8006d32:	1a9b      	subgt	r3, r3, r2
 8006d34:	18ed      	addgt	r5, r5, r3
 8006d36:	2600      	movs	r6, #0
 8006d38:	341a      	adds	r4, #26
 8006d3a:	42b5      	cmp	r5, r6
 8006d3c:	d11a      	bne.n	8006d74 <_printf_common+0xc8>
 8006d3e:	2000      	movs	r0, #0
 8006d40:	e008      	b.n	8006d54 <_printf_common+0xa8>
 8006d42:	2301      	movs	r3, #1
 8006d44:	4652      	mov	r2, sl
 8006d46:	4649      	mov	r1, r9
 8006d48:	4638      	mov	r0, r7
 8006d4a:	47c0      	blx	r8
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d103      	bne.n	8006d58 <_printf_common+0xac>
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
 8006d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d58:	3501      	adds	r5, #1
 8006d5a:	e7c6      	b.n	8006cea <_printf_common+0x3e>
 8006d5c:	18e1      	adds	r1, r4, r3
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	2030      	movs	r0, #48	; 0x30
 8006d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d66:	4422      	add	r2, r4
 8006d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d70:	3302      	adds	r3, #2
 8006d72:	e7c7      	b.n	8006d04 <_printf_common+0x58>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4622      	mov	r2, r4
 8006d78:	4649      	mov	r1, r9
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	47c0      	blx	r8
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d0e6      	beq.n	8006d50 <_printf_common+0xa4>
 8006d82:	3601      	adds	r6, #1
 8006d84:	e7d9      	b.n	8006d3a <_printf_common+0x8e>
	...

08006d88 <_printf_i>:
 8006d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	7e0f      	ldrb	r7, [r1, #24]
 8006d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d90:	2f78      	cmp	r7, #120	; 0x78
 8006d92:	4691      	mov	r9, r2
 8006d94:	4680      	mov	r8, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	469a      	mov	sl, r3
 8006d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d9e:	d807      	bhi.n	8006db0 <_printf_i+0x28>
 8006da0:	2f62      	cmp	r7, #98	; 0x62
 8006da2:	d80a      	bhi.n	8006dba <_printf_i+0x32>
 8006da4:	2f00      	cmp	r7, #0
 8006da6:	f000 80d4 	beq.w	8006f52 <_printf_i+0x1ca>
 8006daa:	2f58      	cmp	r7, #88	; 0x58
 8006dac:	f000 80c0 	beq.w	8006f30 <_printf_i+0x1a8>
 8006db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db8:	e03a      	b.n	8006e30 <_printf_i+0xa8>
 8006dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dbe:	2b15      	cmp	r3, #21
 8006dc0:	d8f6      	bhi.n	8006db0 <_printf_i+0x28>
 8006dc2:	a101      	add	r1, pc, #4	; (adr r1, 8006dc8 <_printf_i+0x40>)
 8006dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	08006e35 	.word	0x08006e35
 8006dd0:	08006db1 	.word	0x08006db1
 8006dd4:	08006db1 	.word	0x08006db1
 8006dd8:	08006db1 	.word	0x08006db1
 8006ddc:	08006db1 	.word	0x08006db1
 8006de0:	08006e35 	.word	0x08006e35
 8006de4:	08006db1 	.word	0x08006db1
 8006de8:	08006db1 	.word	0x08006db1
 8006dec:	08006db1 	.word	0x08006db1
 8006df0:	08006db1 	.word	0x08006db1
 8006df4:	08006f39 	.word	0x08006f39
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006ef3 	.word	0x08006ef3
 8006e00:	08006db1 	.word	0x08006db1
 8006e04:	08006db1 	.word	0x08006db1
 8006e08:	08006f5b 	.word	0x08006f5b
 8006e0c:	08006db1 	.word	0x08006db1
 8006e10:	08006e61 	.word	0x08006e61
 8006e14:	08006db1 	.word	0x08006db1
 8006e18:	08006db1 	.word	0x08006db1
 8006e1c:	08006efb 	.word	0x08006efb
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	602a      	str	r2, [r5, #0]
 8006e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e30:	2301      	movs	r3, #1
 8006e32:	e09f      	b.n	8006f74 <_printf_i+0x1ec>
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	0607      	lsls	r7, r0, #24
 8006e3a:	f103 0104 	add.w	r1, r3, #4
 8006e3e:	6029      	str	r1, [r5, #0]
 8006e40:	d501      	bpl.n	8006e46 <_printf_i+0xbe>
 8006e42:	681e      	ldr	r6, [r3, #0]
 8006e44:	e003      	b.n	8006e4e <_printf_i+0xc6>
 8006e46:	0646      	lsls	r6, r0, #25
 8006e48:	d5fb      	bpl.n	8006e42 <_printf_i+0xba>
 8006e4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	da03      	bge.n	8006e5a <_printf_i+0xd2>
 8006e52:	232d      	movs	r3, #45	; 0x2d
 8006e54:	4276      	negs	r6, r6
 8006e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e5a:	485a      	ldr	r0, [pc, #360]	; (8006fc4 <_printf_i+0x23c>)
 8006e5c:	230a      	movs	r3, #10
 8006e5e:	e012      	b.n	8006e86 <_printf_i+0xfe>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	6820      	ldr	r0, [r4, #0]
 8006e64:	1d19      	adds	r1, r3, #4
 8006e66:	6029      	str	r1, [r5, #0]
 8006e68:	0605      	lsls	r5, r0, #24
 8006e6a:	d501      	bpl.n	8006e70 <_printf_i+0xe8>
 8006e6c:	681e      	ldr	r6, [r3, #0]
 8006e6e:	e002      	b.n	8006e76 <_printf_i+0xee>
 8006e70:	0641      	lsls	r1, r0, #25
 8006e72:	d5fb      	bpl.n	8006e6c <_printf_i+0xe4>
 8006e74:	881e      	ldrh	r6, [r3, #0]
 8006e76:	4853      	ldr	r0, [pc, #332]	; (8006fc4 <_printf_i+0x23c>)
 8006e78:	2f6f      	cmp	r7, #111	; 0x6f
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2308      	moveq	r3, #8
 8006e7e:	230a      	movne	r3, #10
 8006e80:	2100      	movs	r1, #0
 8006e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e86:	6865      	ldr	r5, [r4, #4]
 8006e88:	60a5      	str	r5, [r4, #8]
 8006e8a:	2d00      	cmp	r5, #0
 8006e8c:	bfa2      	ittt	ge
 8006e8e:	6821      	ldrge	r1, [r4, #0]
 8006e90:	f021 0104 	bicge.w	r1, r1, #4
 8006e94:	6021      	strge	r1, [r4, #0]
 8006e96:	b90e      	cbnz	r6, 8006e9c <_printf_i+0x114>
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	d04b      	beq.n	8006f34 <_printf_i+0x1ac>
 8006e9c:	4615      	mov	r5, r2
 8006e9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ea2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ea6:	5dc7      	ldrb	r7, [r0, r7]
 8006ea8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006eac:	4637      	mov	r7, r6
 8006eae:	42bb      	cmp	r3, r7
 8006eb0:	460e      	mov	r6, r1
 8006eb2:	d9f4      	bls.n	8006e9e <_printf_i+0x116>
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d10b      	bne.n	8006ed0 <_printf_i+0x148>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	07de      	lsls	r6, r3, #31
 8006ebc:	d508      	bpl.n	8006ed0 <_printf_i+0x148>
 8006ebe:	6923      	ldr	r3, [r4, #16]
 8006ec0:	6861      	ldr	r1, [r4, #4]
 8006ec2:	4299      	cmp	r1, r3
 8006ec4:	bfde      	ittt	le
 8006ec6:	2330      	movle	r3, #48	; 0x30
 8006ec8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ecc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ed0:	1b52      	subs	r2, r2, r5
 8006ed2:	6122      	str	r2, [r4, #16]
 8006ed4:	f8cd a000 	str.w	sl, [sp]
 8006ed8:	464b      	mov	r3, r9
 8006eda:	aa03      	add	r2, sp, #12
 8006edc:	4621      	mov	r1, r4
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f7ff fee4 	bl	8006cac <_printf_common>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d14a      	bne.n	8006f7e <_printf_i+0x1f6>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	b004      	add	sp, #16
 8006eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	f043 0320 	orr.w	r3, r3, #32
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	4833      	ldr	r0, [pc, #204]	; (8006fc8 <_printf_i+0x240>)
 8006efc:	2778      	movs	r7, #120	; 0x78
 8006efe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	6829      	ldr	r1, [r5, #0]
 8006f06:	061f      	lsls	r7, r3, #24
 8006f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f0c:	d402      	bmi.n	8006f14 <_printf_i+0x18c>
 8006f0e:	065f      	lsls	r7, r3, #25
 8006f10:	bf48      	it	mi
 8006f12:	b2b6      	uxthmi	r6, r6
 8006f14:	07df      	lsls	r7, r3, #31
 8006f16:	bf48      	it	mi
 8006f18:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1c:	6029      	str	r1, [r5, #0]
 8006f1e:	bf48      	it	mi
 8006f20:	6023      	strmi	r3, [r4, #0]
 8006f22:	b91e      	cbnz	r6, 8006f2c <_printf_i+0x1a4>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	f023 0320 	bic.w	r3, r3, #32
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	e7a7      	b.n	8006e80 <_printf_i+0xf8>
 8006f30:	4824      	ldr	r0, [pc, #144]	; (8006fc4 <_printf_i+0x23c>)
 8006f32:	e7e4      	b.n	8006efe <_printf_i+0x176>
 8006f34:	4615      	mov	r5, r2
 8006f36:	e7bd      	b.n	8006eb4 <_printf_i+0x12c>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	6826      	ldr	r6, [r4, #0]
 8006f3c:	6961      	ldr	r1, [r4, #20]
 8006f3e:	1d18      	adds	r0, r3, #4
 8006f40:	6028      	str	r0, [r5, #0]
 8006f42:	0635      	lsls	r5, r6, #24
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	d501      	bpl.n	8006f4c <_printf_i+0x1c4>
 8006f48:	6019      	str	r1, [r3, #0]
 8006f4a:	e002      	b.n	8006f52 <_printf_i+0x1ca>
 8006f4c:	0670      	lsls	r0, r6, #25
 8006f4e:	d5fb      	bpl.n	8006f48 <_printf_i+0x1c0>
 8006f50:	8019      	strh	r1, [r3, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	4615      	mov	r5, r2
 8006f58:	e7bc      	b.n	8006ed4 <_printf_i+0x14c>
 8006f5a:	682b      	ldr	r3, [r5, #0]
 8006f5c:	1d1a      	adds	r2, r3, #4
 8006f5e:	602a      	str	r2, [r5, #0]
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	6862      	ldr	r2, [r4, #4]
 8006f64:	2100      	movs	r1, #0
 8006f66:	4628      	mov	r0, r5
 8006f68:	f7f9 f952 	bl	8000210 <memchr>
 8006f6c:	b108      	cbz	r0, 8006f72 <_printf_i+0x1ea>
 8006f6e:	1b40      	subs	r0, r0, r5
 8006f70:	6060      	str	r0, [r4, #4]
 8006f72:	6863      	ldr	r3, [r4, #4]
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	2300      	movs	r3, #0
 8006f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7c:	e7aa      	b.n	8006ed4 <_printf_i+0x14c>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4649      	mov	r1, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	47d0      	blx	sl
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d0ad      	beq.n	8006ee8 <_printf_i+0x160>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	079b      	lsls	r3, r3, #30
 8006f90:	d413      	bmi.n	8006fba <_printf_i+0x232>
 8006f92:	68e0      	ldr	r0, [r4, #12]
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	4298      	cmp	r0, r3
 8006f98:	bfb8      	it	lt
 8006f9a:	4618      	movlt	r0, r3
 8006f9c:	e7a6      	b.n	8006eec <_printf_i+0x164>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	47d0      	blx	sl
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d09d      	beq.n	8006ee8 <_printf_i+0x160>
 8006fac:	3501      	adds	r5, #1
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	9903      	ldr	r1, [sp, #12]
 8006fb2:	1a5b      	subs	r3, r3, r1
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dcf2      	bgt.n	8006f9e <_printf_i+0x216>
 8006fb8:	e7eb      	b.n	8006f92 <_printf_i+0x20a>
 8006fba:	2500      	movs	r5, #0
 8006fbc:	f104 0619 	add.w	r6, r4, #25
 8006fc0:	e7f5      	b.n	8006fae <_printf_i+0x226>
 8006fc2:	bf00      	nop
 8006fc4:	080074f1 	.word	0x080074f1
 8006fc8:	08007502 	.word	0x08007502

08006fcc <__swbuf_r>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	460e      	mov	r6, r1
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	b118      	cbz	r0, 8006fde <__swbuf_r+0x12>
 8006fd6:	6a03      	ldr	r3, [r0, #32]
 8006fd8:	b90b      	cbnz	r3, 8006fde <__swbuf_r+0x12>
 8006fda:	f7fd febd 	bl	8004d58 <__sinit>
 8006fde:	69a3      	ldr	r3, [r4, #24]
 8006fe0:	60a3      	str	r3, [r4, #8]
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	071a      	lsls	r2, r3, #28
 8006fe6:	d525      	bpl.n	8007034 <__swbuf_r+0x68>
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	b31b      	cbz	r3, 8007034 <__swbuf_r+0x68>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	6922      	ldr	r2, [r4, #16]
 8006ff0:	1a98      	subs	r0, r3, r2
 8006ff2:	6963      	ldr	r3, [r4, #20]
 8006ff4:	b2f6      	uxtb	r6, r6
 8006ff6:	4283      	cmp	r3, r0
 8006ff8:	4637      	mov	r7, r6
 8006ffa:	dc04      	bgt.n	8007006 <__swbuf_r+0x3a>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4628      	mov	r0, r5
 8007000:	f7fe fa58 	bl	80054b4 <_fflush_r>
 8007004:	b9e0      	cbnz	r0, 8007040 <__swbuf_r+0x74>
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	3b01      	subs	r3, #1
 800700a:	60a3      	str	r3, [r4, #8]
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	6022      	str	r2, [r4, #0]
 8007012:	701e      	strb	r6, [r3, #0]
 8007014:	6962      	ldr	r2, [r4, #20]
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	429a      	cmp	r2, r3
 800701a:	d004      	beq.n	8007026 <__swbuf_r+0x5a>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	07db      	lsls	r3, r3, #31
 8007020:	d506      	bpl.n	8007030 <__swbuf_r+0x64>
 8007022:	2e0a      	cmp	r6, #10
 8007024:	d104      	bne.n	8007030 <__swbuf_r+0x64>
 8007026:	4621      	mov	r1, r4
 8007028:	4628      	mov	r0, r5
 800702a:	f7fe fa43 	bl	80054b4 <_fflush_r>
 800702e:	b938      	cbnz	r0, 8007040 <__swbuf_r+0x74>
 8007030:	4638      	mov	r0, r7
 8007032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007034:	4621      	mov	r1, r4
 8007036:	4628      	mov	r0, r5
 8007038:	f000 f806 	bl	8007048 <__swsetup_r>
 800703c:	2800      	cmp	r0, #0
 800703e:	d0d5      	beq.n	8006fec <__swbuf_r+0x20>
 8007040:	f04f 37ff 	mov.w	r7, #4294967295
 8007044:	e7f4      	b.n	8007030 <__swbuf_r+0x64>
	...

08007048 <__swsetup_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4b2a      	ldr	r3, [pc, #168]	; (80070f4 <__swsetup_r+0xac>)
 800704c:	4605      	mov	r5, r0
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	460c      	mov	r4, r1
 8007052:	b118      	cbz	r0, 800705c <__swsetup_r+0x14>
 8007054:	6a03      	ldr	r3, [r0, #32]
 8007056:	b90b      	cbnz	r3, 800705c <__swsetup_r+0x14>
 8007058:	f7fd fe7e 	bl	8004d58 <__sinit>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007062:	0718      	lsls	r0, r3, #28
 8007064:	d422      	bmi.n	80070ac <__swsetup_r+0x64>
 8007066:	06d9      	lsls	r1, r3, #27
 8007068:	d407      	bmi.n	800707a <__swsetup_r+0x32>
 800706a:	2309      	movs	r3, #9
 800706c:	602b      	str	r3, [r5, #0]
 800706e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007072:	81a3      	strh	r3, [r4, #12]
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	e034      	b.n	80070e4 <__swsetup_r+0x9c>
 800707a:	0758      	lsls	r0, r3, #29
 800707c:	d512      	bpl.n	80070a4 <__swsetup_r+0x5c>
 800707e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007080:	b141      	cbz	r1, 8007094 <__swsetup_r+0x4c>
 8007082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007086:	4299      	cmp	r1, r3
 8007088:	d002      	beq.n	8007090 <__swsetup_r+0x48>
 800708a:	4628      	mov	r0, r5
 800708c:	f7fd ff5a 	bl	8004f44 <_free_r>
 8007090:	2300      	movs	r3, #0
 8007092:	6363      	str	r3, [r4, #52]	; 0x34
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	2300      	movs	r3, #0
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	6023      	str	r3, [r4, #0]
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f043 0308 	orr.w	r3, r3, #8
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	b94b      	cbnz	r3, 80070c4 <__swsetup_r+0x7c>
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ba:	d003      	beq.n	80070c4 <__swsetup_r+0x7c>
 80070bc:	4621      	mov	r1, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 f884 	bl	80071cc <__smakebuf_r>
 80070c4:	89a0      	ldrh	r0, [r4, #12]
 80070c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070ca:	f010 0301 	ands.w	r3, r0, #1
 80070ce:	d00a      	beq.n	80070e6 <__swsetup_r+0x9e>
 80070d0:	2300      	movs	r3, #0
 80070d2:	60a3      	str	r3, [r4, #8]
 80070d4:	6963      	ldr	r3, [r4, #20]
 80070d6:	425b      	negs	r3, r3
 80070d8:	61a3      	str	r3, [r4, #24]
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	b943      	cbnz	r3, 80070f0 <__swsetup_r+0xa8>
 80070de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070e2:	d1c4      	bne.n	800706e <__swsetup_r+0x26>
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
 80070e6:	0781      	lsls	r1, r0, #30
 80070e8:	bf58      	it	pl
 80070ea:	6963      	ldrpl	r3, [r4, #20]
 80070ec:	60a3      	str	r3, [r4, #8]
 80070ee:	e7f4      	b.n	80070da <__swsetup_r+0x92>
 80070f0:	2000      	movs	r0, #0
 80070f2:	e7f7      	b.n	80070e4 <__swsetup_r+0x9c>
 80070f4:	2000006c 	.word	0x2000006c

080070f8 <_raise_r>:
 80070f8:	291f      	cmp	r1, #31
 80070fa:	b538      	push	{r3, r4, r5, lr}
 80070fc:	4604      	mov	r4, r0
 80070fe:	460d      	mov	r5, r1
 8007100:	d904      	bls.n	800710c <_raise_r+0x14>
 8007102:	2316      	movs	r3, #22
 8007104:	6003      	str	r3, [r0, #0]
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800710e:	b112      	cbz	r2, 8007116 <_raise_r+0x1e>
 8007110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007114:	b94b      	cbnz	r3, 800712a <_raise_r+0x32>
 8007116:	4620      	mov	r0, r4
 8007118:	f000 f830 	bl	800717c <_getpid_r>
 800711c:	462a      	mov	r2, r5
 800711e:	4601      	mov	r1, r0
 8007120:	4620      	mov	r0, r4
 8007122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007126:	f000 b817 	b.w	8007158 <_kill_r>
 800712a:	2b01      	cmp	r3, #1
 800712c:	d00a      	beq.n	8007144 <_raise_r+0x4c>
 800712e:	1c59      	adds	r1, r3, #1
 8007130:	d103      	bne.n	800713a <_raise_r+0x42>
 8007132:	2316      	movs	r3, #22
 8007134:	6003      	str	r3, [r0, #0]
 8007136:	2001      	movs	r0, #1
 8007138:	e7e7      	b.n	800710a <_raise_r+0x12>
 800713a:	2400      	movs	r4, #0
 800713c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007140:	4628      	mov	r0, r5
 8007142:	4798      	blx	r3
 8007144:	2000      	movs	r0, #0
 8007146:	e7e0      	b.n	800710a <_raise_r+0x12>

08007148 <raise>:
 8007148:	4b02      	ldr	r3, [pc, #8]	; (8007154 <raise+0xc>)
 800714a:	4601      	mov	r1, r0
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	f7ff bfd3 	b.w	80070f8 <_raise_r>
 8007152:	bf00      	nop
 8007154:	2000006c 	.word	0x2000006c

08007158 <_kill_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d07      	ldr	r5, [pc, #28]	; (8007178 <_kill_r+0x20>)
 800715c:	2300      	movs	r3, #0
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	602b      	str	r3, [r5, #0]
 8007166:	f7fa ff9f 	bl	80020a8 <_kill>
 800716a:	1c43      	adds	r3, r0, #1
 800716c:	d102      	bne.n	8007174 <_kill_r+0x1c>
 800716e:	682b      	ldr	r3, [r5, #0]
 8007170:	b103      	cbz	r3, 8007174 <_kill_r+0x1c>
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	bd38      	pop	{r3, r4, r5, pc}
 8007176:	bf00      	nop
 8007178:	200002ac 	.word	0x200002ac

0800717c <_getpid_r>:
 800717c:	f7fa bf8c 	b.w	8002098 <_getpid>

08007180 <__swhatbuf_r>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	460c      	mov	r4, r1
 8007184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007188:	2900      	cmp	r1, #0
 800718a:	b096      	sub	sp, #88	; 0x58
 800718c:	4615      	mov	r5, r2
 800718e:	461e      	mov	r6, r3
 8007190:	da0d      	bge.n	80071ae <__swhatbuf_r+0x2e>
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007198:	f04f 0100 	mov.w	r1, #0
 800719c:	bf0c      	ite	eq
 800719e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80071a2:	2340      	movne	r3, #64	; 0x40
 80071a4:	2000      	movs	r0, #0
 80071a6:	6031      	str	r1, [r6, #0]
 80071a8:	602b      	str	r3, [r5, #0]
 80071aa:	b016      	add	sp, #88	; 0x58
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
 80071ae:	466a      	mov	r2, sp
 80071b0:	f000 f848 	bl	8007244 <_fstat_r>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	dbec      	blt.n	8007192 <__swhatbuf_r+0x12>
 80071b8:	9901      	ldr	r1, [sp, #4]
 80071ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80071be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80071c2:	4259      	negs	r1, r3
 80071c4:	4159      	adcs	r1, r3
 80071c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ca:	e7eb      	b.n	80071a4 <__swhatbuf_r+0x24>

080071cc <__smakebuf_r>:
 80071cc:	898b      	ldrh	r3, [r1, #12]
 80071ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071d0:	079d      	lsls	r5, r3, #30
 80071d2:	4606      	mov	r6, r0
 80071d4:	460c      	mov	r4, r1
 80071d6:	d507      	bpl.n	80071e8 <__smakebuf_r+0x1c>
 80071d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	2301      	movs	r3, #1
 80071e2:	6163      	str	r3, [r4, #20]
 80071e4:	b002      	add	sp, #8
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	ab01      	add	r3, sp, #4
 80071ea:	466a      	mov	r2, sp
 80071ec:	f7ff ffc8 	bl	8007180 <__swhatbuf_r>
 80071f0:	9900      	ldr	r1, [sp, #0]
 80071f2:	4605      	mov	r5, r0
 80071f4:	4630      	mov	r0, r6
 80071f6:	f7fd ff11 	bl	800501c <_malloc_r>
 80071fa:	b948      	cbnz	r0, 8007210 <__smakebuf_r+0x44>
 80071fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007200:	059a      	lsls	r2, r3, #22
 8007202:	d4ef      	bmi.n	80071e4 <__smakebuf_r+0x18>
 8007204:	f023 0303 	bic.w	r3, r3, #3
 8007208:	f043 0302 	orr.w	r3, r3, #2
 800720c:	81a3      	strh	r3, [r4, #12]
 800720e:	e7e3      	b.n	80071d8 <__smakebuf_r+0xc>
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	6020      	str	r0, [r4, #0]
 8007214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	9b00      	ldr	r3, [sp, #0]
 800721c:	6163      	str	r3, [r4, #20]
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	6120      	str	r0, [r4, #16]
 8007222:	b15b      	cbz	r3, 800723c <__smakebuf_r+0x70>
 8007224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007228:	4630      	mov	r0, r6
 800722a:	f000 f81d 	bl	8007268 <_isatty_r>
 800722e:	b128      	cbz	r0, 800723c <__smakebuf_r+0x70>
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	f023 0303 	bic.w	r3, r3, #3
 8007236:	f043 0301 	orr.w	r3, r3, #1
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	431d      	orrs	r5, r3
 8007240:	81a5      	strh	r5, [r4, #12]
 8007242:	e7cf      	b.n	80071e4 <__smakebuf_r+0x18>

08007244 <_fstat_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d07      	ldr	r5, [pc, #28]	; (8007264 <_fstat_r+0x20>)
 8007248:	2300      	movs	r3, #0
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	4611      	mov	r1, r2
 8007250:	602b      	str	r3, [r5, #0]
 8007252:	f7fa ff88 	bl	8002166 <_fstat>
 8007256:	1c43      	adds	r3, r0, #1
 8007258:	d102      	bne.n	8007260 <_fstat_r+0x1c>
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	b103      	cbz	r3, 8007260 <_fstat_r+0x1c>
 800725e:	6023      	str	r3, [r4, #0]
 8007260:	bd38      	pop	{r3, r4, r5, pc}
 8007262:	bf00      	nop
 8007264:	200002ac 	.word	0x200002ac

08007268 <_isatty_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d06      	ldr	r5, [pc, #24]	; (8007284 <_isatty_r+0x1c>)
 800726c:	2300      	movs	r3, #0
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	f7fa ff87 	bl	8002186 <_isatty>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_isatty_r+0x1a>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_isatty_r+0x1a>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	200002ac 	.word	0x200002ac

08007288 <_init>:
 8007288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728a:	bf00      	nop
 800728c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728e:	bc08      	pop	{r3}
 8007290:	469e      	mov	lr, r3
 8007292:	4770      	bx	lr

08007294 <_fini>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	bf00      	nop
 8007298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729a:	bc08      	pop	{r3}
 800729c:	469e      	mov	lr, r3
 800729e:	4770      	bx	lr
